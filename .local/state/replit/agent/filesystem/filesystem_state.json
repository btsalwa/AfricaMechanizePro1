{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Africa Mechanize Web Application\n\n## Overview\n\nThis is a full-stack web application for Africa Mechanize, built using React (frontend) and Express.js (backend) with TypeScript. The application serves as a platform for promoting sustainable agricultural mechanization in Africa, featuring framework elements, events, resources, and user engagement tools.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nFile format preference: JSX files instead of TSX (converted January 2025).\nIntegration improvements: Added enhanced server architecture, migration system, and additional libraries from AfricaMechanizePro repository.\n\n## Recent Changes (August 2025)\n\n### Enhanced Admin Dashboard System (Latest - August 2025)\n- **Comprehensive Admin Dashboard**: Complete overhaul with professional UI, enhanced statistics cards with trend indicators, and quick action buttons\n- **Advanced User Management**: Full CRUD operations with search functionality, user profile editing dialogs, bulk actions, and detailed user information display\n- **Smart Contact Management**: Filtering system (new/read/responded), status updates, mark as read functionality, and reply options\n- **Content Management Tab**: Site statistics editor for homepage counter, content overview panel, and direct statistics updating capability\n- **Enhanced Data Display**: Real-time statistics with trend indicators, improved card layouts with color-coded borders, and professional data visualization\n- **Interactive Features**: Search and filter functionality across all management sections, modal dialogs for editing, confirmation dialogs for destructive actions\n- **API Integration**: Fixed fetch request method issues, proper authentication headers, and comprehensive CRUD endpoint support\n- **Security Features**: JWT-based authentication, role-based access control, and secure token verification for all admin operations\n- **Professional UI**: Responsive design, hover effects, loading states, and consistent styling matching africamechanize.org aesthetic\n\n### Authentication System Implementation\n- Fixed all database schema issues by adding missing authentication columns (reset_password_token, profile_image_url, is_active, etc.)\n- Resolved Passport.js local strategy initialization problems in server startup\n- Implemented complete user registration and login system with session management\n- Added authentication-protected webinar recordings access system\n- Created proper error handling for account activation and invalid credentials\n\n### Webinar System Enhancement\n- Fixed webinar slug database issues with unique URL-friendly identifiers\n- Enhanced webinar detail pages with authentication-protected recordings access\n- Implemented comprehensive webinar management with YouTube/Google Drive links protection\n- Added proper authentication gates for previous webinar recordings\n- Created professional webinar display system with speaker information and resources\n\n### Complete Website Structure Implementation (August 2025)\n- Successfully replicated actual africamechanize.org website structure and content\n- Created 6 detailed F-SAMA framework element pages: Farm Power, Innovative Financing, Sustainable Systems, Sustainable Mechanization, Social Sustainability, and Human Resources\n- Built comprehensive sections: Resources, About, Contact, News & Events with authentic content\n- Enhanced navigation with dropdown menus for all 10 F-SAMA framework elements\n- Fixed all TypeScript/JSX compatibility issues across UI components\n- Integrated webinar connections within each framework element page\n- Added professional layouts with breadcrumb navigation matching the real website\n\n## System Architecture\n\nThe application follows a monorepo structure with clear separation between client and server code:\n\n- **Frontend**: React application with TypeScript, using Vite as the build tool\n- **Backend**: Express.js server with TypeScript\n- **Database**: PostgreSQL with Drizzle ORM\n- **Database Provider**: Neon (serverless PostgreSQL)\n- **Styling**: Tailwind CSS with shadcn/ui components\n- **State Management**: TanStack Query for server state management\n\n## Key Components\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Build Tool**: Vite with React plugin\n- **Styling**: Tailwind CSS with custom design system\n- **UI Components**: shadcn/ui component library (extensive collection of pre-built components)\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack Query for API state management\n- **Form Handling**: React Hook Form with Zod validation resolvers\n\n### Backend Architecture\n- **Framework**: Express.js with JavaScript (migrated from TypeScript)\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect\n- **Migration System**: Proper Drizzle migrations with SQL files\n- **API Structure**: RESTful endpoints organized by resource type\n- **Middleware**: Custom logging, JSON parsing, error handling\n- **Environment**: dotenv for configuration management\n- **Development**: Hot reload with tsx, cross-env for cross-platform compatibility\n\n### Database Schema\nThe application includes several key entities:\n- **Users**: Authentication and user management\n- **Framework Elements**: F-SAMA framework components (10 elements for sustainable agricultural mechanization)\n- **Events**: Conferences, webinars, meetings, workshops\n- **Resources**: Webinars, newsletters, research papers, presentations\n- **Contacts**: Contact form submissions\n- **Newsletter**: Email subscription management\n- **Statistics**: Application analytics and metrics\n\n## Data Flow\n\n1. **Client Requests**: React components make API calls using TanStack Query\n2. **API Layer**: Express.js routes handle requests and validate data using Zod schemas\n3. **Database Layer**: Drizzle ORM manages database operations with type safety\n4. **Response**: Data flows back through the same layers with proper error handling\n\n## External Dependencies\n\n### Database\n- **Neon Database**: Serverless PostgreSQL hosting\n- **Connection**: Uses `@neondatabase/serverless` with WebSocket support\n\n### UI/UX\n- **Radix UI**: Accessible component primitives\n- **Lucide React**: Icon library\n- **Tailwind CSS**: Utility-first CSS framework\n- **Embla Carousel**: Carousel component\n\n### Development Tools\n- **TypeScript**: Type safety across the entire stack\n- **ESBuild**: Fast bundling for production\n- **Drizzle Kit**: Database migrations and schema management\n\n## Deployment Strategy\n\n### Development\n- **Frontend**: Vite dev server with hot reload\n- **Backend**: tsx for TypeScript execution with auto-restart\n- **Database**: Drizzle push for schema synchronization\n\n### Production Build\n- **Frontend**: Vite builds to `dist/public` directory\n- **Backend**: ESBuild bundles server code to `dist/index.js`\n- **Static Assets**: Express serves built frontend files in production\n\n### Environment Configuration\n- **DATABASE_URL**: Required environment variable for PostgreSQL connection\n- **NODE_ENV**: Determines development vs production behavior\n- **Build Process**: Unified build script handles both frontend and backend\n\n### Key Features\n- **Replit Integration**: Special handling for Replit environment with cartographer plugin\n- **Error Handling**: Comprehensive error boundaries and API error responses\n- **Type Safety**: End-to-end TypeScript with shared schema definitions\n- **Responsive Design**: Mobile-first approach with Tailwind CSS breakpoints\n- **Accessibility**: Built on Radix UI primitives for WCAG compliance\n\nThe application is designed to be easily deployable on various platforms while maintaining development efficiency through hot reloading and type safety.","size_bytes":7680},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/content-1752745840159.md":{"content":"![Spinner: Black decorative](https://cdn.userway.org/widgetapp/images/spin_bl.svg)\n\n![](https://cdn.userway.org/widgetapp/images/wheel_left_bl.svg)\n\n![Spinner: Black decorative](https://cdn.userway.org/widgetapp/images/spin_bl.svg)\n\n# Consultative Meeting on a Mechanization Strategy\n\nNew models for sustainable agricultural mechanization in sub-Saharan Africa\n\n[Read More](https://www.africamechanize.org/84/consultative-meeting-mechanization-strategy-new-models-for-sustainable-agricultural-in-sub-saharan-africa/ \"Consultative Meeting on a Mechanization Strategy\")\n\nFocus Areas\n\n[Elements of F-SAMA Framework](https://www.africamechanize.org/#)\n\nThe 10 elements necessary for the development and operationalization of Sustainable Agricultural Mechanization in Africa (SAMA)\n\nPrevious\n\n#7\n\n#### Social Sustainability\n\nRoles of small-scale farmers, women and youth\n\n[Learn More](https://www.africamechanize.org/social-sustainability/)\n\n#8\n\n#### Human Resources\n\nHuman resources development and capacity building for SAMA\n\n[Learn More](https://www.africamechanize.org/human-resources-development/)\n\n#9\n\n#### Long-Term Vision\n\nNeed for a long-term vision: policy and strategy issues\n\n[Learn More](https://www.africamechanize.org/vision-policy-strategy/)\n\n#10\n\n#### Cooperation & Networking\n\nCreating sustainable institutions for regional cooperation and networking\n\n[Learn More](https://www.africamechanize.org/cooperation-networking/)\n\n#1\n\n#### Farm Power\n\nBoosting farm power through appropriate technologies and innovative business models\n\n[Learn More](https://www.africamechanize.org/farm-power/)\n\n#2\n\n#### Innovative Financing\n\nPromoting innovative financing mechanisms for agricultural mechanization\n\n[Learn More](https://www.africamechanize.org/innovative-financing/)\n\n#3\n\n#### Sustainable Systems\n\nBuilding sustainable systems for manufacture and distribution of agricultural mechanization inputs\n\n[Learn More](https://www.africamechanize.org/sustainable-systems/)\n\n#4\n\n#### Mechanization\n\nSustainable mechanization across agrifood value chains\n\n[Learn More](https://www.africamechanize.org/sustainable-mechanization/)\n\n#5\n\n#### Innovative Systems\n\nInnovative systems for sustainable technology development and transfer\n\n[Learn More](https://www.africamechanize.org/innovative-systems/)\n\n#6\n\n#### Land Preparation\n\nSustainable transformation of land preparation and crop/animal husbandry practices\n\n[Learn More](https://www.africamechanize.org/land-preparation/)\n\n#7\n\n#### Social Sustainability\n\nRoles of small-scale farmers, women and youth\n\n[Learn More](https://www.africamechanize.org/social-sustainability/)\n\n#8\n\n#### Human Resources\n\nHuman resources development and capacity building for SAMA\n\n[Learn More](https://www.africamechanize.org/human-resources-development/)\n\n#9\n\n#### Long-Term Vision\n\nNeed for a long-term vision: policy and strategy issues\n\n[Learn More](https://www.africamechanize.org/vision-policy-strategy/)\n\n#10\n\n#### Cooperation & Networking\n\nCreating sustainable institutions for regional cooperation and networking\n\n[Learn More](https://www.africamechanize.org/cooperation-networking/)\n\n#1\n\n#### Farm Power\n\nBoosting farm power through appropriate technologies and innovative business models\n\n[Learn More](https://www.africamechanize.org/farm-power/)\n\n#2\n\n#### Innovative Financing\n\nPromoting innovative financing mechanisms for agricultural mechanization\n\n[Learn More](https://www.africamechanize.org/innovative-financing/)\n\n#3\n\n#### Sustainable Systems\n\nBuilding sustainable systems for manufacture and distribution of agricultural mechanization inputs\n\n[Learn More](https://www.africamechanize.org/sustainable-systems/)\n\n#4\n\n#### Mechanization\n\nSustainable mechanization across agrifood value chains\n\n[Learn More](https://www.africamechanize.org/sustainable-mechanization/)\n\n#5\n\n#### Innovative Systems\n\nInnovative systems for sustainable technology development and transfer\n\n[Learn More](https://www.africamechanize.org/innovative-systems/)\n\n#6\n\n#### Land Preparation\n\nSustainable transformation of land preparation and crop/animal husbandry practices\n\n[Learn More](https://www.africamechanize.org/land-preparation/)\n\n#7\n\n#### Social Sustainability\n\nRoles of small-scale farmers, women and youth\n\n[Learn More](https://www.africamechanize.org/social-sustainability/)\n\n#8\n\n#### Human Resources\n\nHuman resources development and capacity building for SAMA\n\n[Learn More](https://www.africamechanize.org/human-resources-development/)\n\n#9\n\n#### Long-Term Vision\n\nNeed for a long-term vision: policy and strategy issues\n\n[Learn More](https://www.africamechanize.org/vision-policy-strategy/)\n\n#10\n\n#### Cooperation & Networking\n\nCreating sustainable institutions for regional cooperation and networking\n\n[Learn More](https://www.africamechanize.org/cooperation-networking/)\n\nNext\n\nHighlights\n\n[News & Events](https://www.africamechanize.org/#)\n\n[Jun 04, 2024  Sustainable Farm Power for Enhanced Productivity (FAO & CEMA Hybrid Event)](https://www.africamechanize.org/109/sustainable-farm-power-for-enhanced-productivity-fao-cema-hybrid-event/)\n\n[Sep 29, 2023  FAO Global Conference On Sustainable Agricultural Mechanization](https://www.africamechanize.org/101/fao-global-conference-sustainable-agricultural-mechanization/)\n\n[Dec 09, 2019  Uganda Regional experience sharing Meeting on SAM hire service provision](https://www.africamechanize.org/85/uganda-regional-experience-sharing-meeting-sam-hire-service-provision/)\n\n[Dec 02, 2016  Consultative Meeting on a Mechanization Strategy New models for sustainable agricultural mechanization in sub-Saharan Africa](https://www.africamechanize.org/84/consultative-meeting-mechanization-strategy-new-models-for-sustainable-agricultural-in-sub-saharan-africa/)\n\n[Jun 04, 2024  Sustainable Farm Power for Enhanced Productivity (FAO & CEMA Hybrid Event)](https://www.africamechanize.org/109/sustainable-farm-power-for-enhanced-productivity-fao-cema-hybrid-event/)\n\n[Sep 29, 2023  FAO Global Conference On Sustainable Agricultural Mechanization](https://www.africamechanize.org/101/fao-global-conference-sustainable-agricultural-mechanization/)\n\n[Dec 09, 2019  Uganda Regional experience sharing Meeting on SAM hire service provision](https://www.africamechanize.org/85/uganda-regional-experience-sharing-meeting-sam-hire-service-provision/)\n\n[Dec 02, 2016  Consultative Meeting on a Mechanization Strategy New models for sustainable agricultural mechanization in sub-Saharan Africa](https://www.africamechanize.org/84/consultative-meeting-mechanization-strategy-new-models-for-sustainable-agricultural-in-sub-saharan-africa/)\n\n[Jun 04, 2024  Sustainable Farm Power for Enhanced Productivity (FAO & CEMA Hybrid Event)](https://www.africamechanize.org/109/sustainable-farm-power-for-enhanced-productivity-fao-cema-hybrid-event/)\n\n[Sep 29, 2023  FAO Global Conference On Sustainable Agricultural Mechanization](https://www.africamechanize.org/101/fao-global-conference-sustainable-agricultural-mechanization/)\n\n[Dec 09, 2019  Uganda Regional experience sharing Meeting on SAM hire service provision](https://www.africamechanize.org/85/uganda-regional-experience-sharing-meeting-sam-hire-service-provision/)\n\n[Dec 02, 2016  Consultative Meeting on a Mechanization Strategy New models for sustainable agricultural mechanization in sub-Saharan Africa](https://www.africamechanize.org/84/consultative-meeting-mechanization-strategy-new-models-for-sustainable-agricultural-in-sub-saharan-africa/)\n\nResources\n\n[Featured Downloads](https://www.africamechanize.org/webinar-presentations-downloads/)\n\nFrench\n\n#### [Webinar 12: Brève annonce](https://www.africamechanize.org/resource/webinar-12-breve-annonce)\n\nFrench\n\nWEBINAR No. 12: Relancer la fabrication des machines agricoles en Afrique\n\nSection: [Upcoming Webinars](https://www.africamechanize.org/upcoming-webinars)\n\nEnglish\n\n#### [Concept Note: AfricaMechanize Webinar No12](https://www.africamechanize.org/resource/concept-note-africamechanize-webinar-no12)\n\nEnglish\n\nThe Objective of Webinar 12 is to initiate collaboration between African countries…\n\nSection: [Upcoming Webinars](https://www.africamechanize.org/upcoming-webinars)\n\nFrench\n\n#### [Note conceptuelle: AfricaMechanize Webinaire 12](https://www.africamechanize.org/resource/note-conceptuelle-africamechanize-webinaire-12)\n\nFrench\n\nL’objectif du webinaire 12 est d’initier une collaboration entre les pays…\n\nSection: [Upcoming Webinars](https://www.africamechanize.org/upcoming-webinars)\n\nFrench\n\n#### [La Mécanisation Agricole Durable. Cadre Stratégique pour lAfrique](https://www.africamechanize.org/resource/la-mecanisation-agricole-durable-cadre-strategique-pour-lafrique)\n\nFrench\n\nLa mécanisation agricole durable peut sauver lAfrique…\n\nSection: [Webinar 1](https://www.africamechanize.org/webinar-1)\n\nEnglish\n\n#### [Sustainable Agricultural Mechanization - A Framework for Africa](https://www.africamechanize.org/resource/sustainable-agricultural-mechanization-a-framework-for-africa)\n\nEnglish\n\nThe framework presents a menu of priority elements to be considered…\n\nSection: [Webinar 1](https://www.africamechanize.org/webinar-1)\n\nEnglish\n\n#### [AfricaMechanize Newsletter - Issue 02 (2024)](https://www.africamechanize.org/resource/africamechanize-newsletter-issue-02)\n\nEnglish\n\nThis is the second quarterly newsletter of the AfricaMechanize Platform, with…\n\nSection: [Magazine](https://www.africamechanize.org/magazine)\n\nEnglish\n\n#### [Webinar 12: Announcement](https://www.africamechanize.org/resource/webinar-12-announcement)\n\nEnglish\n\nWEBINAR No. 12: Revamping Manufacturing of Agricultural Machinery in Africa\n\nSection: [Upcoming Webinars](https://www.africamechanize.org/upcoming-webinars)\n\nFrench\n\n#### [Webinar 12: Brève annonce](https://www.africamechanize.org/resource/webinar-12-breve-annonce)\n\nFrench\n\nWEBINAR No. 12: Relancer la fabrication des machines agricoles en Afrique\n\nSection: [Upcoming Webinars](https://www.africamechanize.org/upcoming-webinars)\n\nEnglish\n\n#### [Concept Note: AfricaMechanize Webinar No12](https://www.africamechanize.org/resource/concept-note-africamechanize-webinar-no12)\n\nEnglish\n\nThe Objective of Webinar 12 is to initiate collaboration between African countries…\n\nSection: [Upcoming Webinars](https://www.africamechanize.org/upcoming-webinars)\n\nFrench\n\n#### [Note conceptuelle: AfricaMechanize Webinaire 12](https://www.africamechanize.org/resource/note-conceptuelle-africamechanize-webinaire-12)\n\nFrench\n\nL’objectif du webinaire 12 est d’initier une collaboration entre les pays…\n\nSection: [Upcoming Webinars](https://www.africamechanize.org/upcoming-webinars)\n\nFrench\n\n#### [La Mécanisation Agricole Durable. Cadre Stratégique pour lAfrique](https://www.africamechanize.org/resource/la-mecanisation-agricole-durable-cadre-strategique-pour-lafrique)\n\nFrench\n\nLa mécanisation agricole durable peut sauver lAfrique…\n\nSection: [Webinar 1](https://www.africamechanize.org/webinar-1)\n\nEnglish\n\n#### [Sustainable Agricultural Mechanization - A Framework for Africa](https://www.africamechanize.org/resource/sustainable-agricultural-mechanization-a-framework-for-africa)\n\nEnglish\n\nThe framework presents a menu of priority elements to be considered…\n\nSection: [Webinar 1](https://www.africamechanize.org/webinar-1)\n\nEnglish\n\n#### [AfricaMechanize Newsletter - Issue 02 (2024)](https://www.africamechanize.org/resource/africamechanize-newsletter-issue-02)\n\nEnglish\n\nThis is the second quarterly newsletter of the AfricaMechanize Platform, with…\n\nSection: [Magazine](https://www.africamechanize.org/magazine)\n\nQuick Stats\n\n0\n\n#### Network\n\n0\n\n#### Countries\n\n0\n\n#### Webinars\n\n0\n\n#### Conference Speakers\n\n0\n\n#### Participants\n\nPartners\n\n![](https://fonts.gstatic.com/s/i/productlogos/translate/v14/24px.svg)\n\nOriginal text\n\nRate this translation\n\nYour feedback will be used to help improve Google Translate","size_bytes":11878},"server/db.js":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"../shared/schema.js\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":487},"server/index.js":{"content":"import express from \"express\";\nimport session from \"express-session\";\nimport connectPgSimple from \"connect-pg-simple\";\nimport passport from \"passport\";\nimport { setupAuth } from \"./auth.js\";\nimport { registerRoutes } from \"./routes.js\";\nimport { setupVite } from \"./vite.js\";\nimport dotenv from 'dotenv';\n\n// Load environment variables\ndotenv.config();\n\nconst app = express();\n\n// Body parsing middleware (must come before passport)\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Session configuration\nconst PgStore = connectPgSimple(session);\n\napp.use(session({\n  store: new PgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false, // We'll create it via migration\n    tableName: 'sessions',\n  }),\n  secret: process.env.SESSION_SECRET || 'africa-mechanize-dev-secret',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: process.env.NODE_ENV === 'production',\n    httpOnly: true,\n    maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n  },\n}));\n\n// Setup authentication after session middleware\nawait setupAuth();\n\n// Initialize passport after session\napp.use(passport.initialize());\napp.use(passport.session());\n\nconst server = await registerRoutes(app);\nconst vite = await setupVite(app, server);\n\nconst PORT = process.env.PORT || 5000;\nserver.listen(PORT, \"0.0.0.0\", () => {\n  console.log(`Server running on port ${PORT}`);\n  if (process.env.NODE_ENV === 'development') {\n    console.log('🔐 Authentication system initialized');\n    console.log('📧 Email service ready');\n  }\n});","size_bytes":1554},"server/index.ts":{"content":"import express from \"express\";\nimport session from \"express-session\";\nimport connectPgSimple from \"connect-pg-simple\";\nimport passport from \"passport\";\nimport { setupAuth } from \"./auth.js\";\nimport { registerRoutes } from \"./routes.js\";\nimport { setupVite } from \"./vite.js\";\n\nconst app = express();\n\n// Body parsing middleware (must come before passport)\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Session configuration\nconst PgStore = connectPgSimple(session);\n\napp.use(session({\n  store: new PgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false, // We'll create it via migration\n    tableName: 'sessions',\n  }),\n  secret: process.env.SESSION_SECRET || 'africa-mechanize-dev-secret',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: process.env.NODE_ENV === 'production',\n    httpOnly: true,\n    maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n  },\n}));\n\n// Setup authentication after session middleware\nawait setupAuth();\n\n// Initialize passport after session\napp.use(passport.initialize());\napp.use(passport.session());\n\nconst server = await registerRoutes(app);\nconst vite = await setupVite(app, server);\n\nconst PORT = process.env.PORT || 5000;\nserver.listen(PORT, \"0.0.0.0\", () => {\n  console.log(`Server running on port ${PORT}`);\n  if (process.env.NODE_ENV !== 'production') {\n    console.log('🔐 Authentication system initialized');\n  }\n});","size_bytes":1431},"server/routes.js":{"content":"import express, { Router } from \"express\";\nimport { createServer } from \"http\";\nimport { storage } from \"./storage.js\";\nimport passport from \"passport\";\nimport { authHelpers, requireAuth, requireEmailVerification, requireAdmin } from \"./auth.js\";\nimport { sendWelcomeEmail } from \"./emailService.js\";\nimport webinarRoutes from \"./routes/webinars.js\";\nimport adminRoutes from \"./routes/admin.js\";\nimport { \n  insertFrameworkElementSchema, insertNewsletterSubscriptionSchema, insertContactFormSchema,\n  registerSchema, loginSchema, forgotPasswordSchema, resetPasswordSchema\n} from \"../shared/schema.js\";\n\nexport async function registerRoutes(app) {\n  const router = Router();\n\n  // Authentication endpoints\n  router.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const validatedData = registerSchema.parse(req.body);\n      const existingUser = await storage.getUserByEmail(validatedData.email);\n      \n      if (existingUser) {\n        return res.status(400).json({ message: \"Email already registered\" });\n      }\n      \n      const user = await authHelpers.createUser(validatedData);\n      \n      // Send welcome email after email verification\n      if (user.isEmailVerified) {\n        await sendWelcomeEmail(user);\n      }\n      \n      res.status(201).json({ \n        message: \"Registration successful! Please check your email to verify your account.\",\n        user: {\n          id: user.id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          isEmailVerified: user.isEmailVerified\n        }\n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(400).json({ message: error.message || \"Registration failed\" });\n    }\n  });\n\n  router.post(\"/api/auth/login\", (req, res, next) => {\n    try {\n      const validatedData = loginSchema.parse(req.body);\n      \n      passport.authenticate('local', (err, user, info) => {\n        if (err) {\n          return res.status(500).json({ message: \"Authentication error\" });\n        }\n        \n        if (!user) {\n          return res.status(401).json({ message: info?.message || \"Invalid credentials\" });\n        }\n        \n        req.logIn(user, (err) => {\n          if (err) {\n            return res.status(500).json({ message: \"Login failed\" });\n          }\n          \n          res.json({\n            message: \"Login successful\",\n            user: {\n              id: user.id,\n              email: user.email,\n              firstName: user.firstName,\n              lastName: user.lastName,\n              role: user.role,\n              isEmailVerified: user.isEmailVerified,\n              organization: user.organization,\n              country: user.country\n            }\n          });\n        });\n      })(req, res, next);\n    } catch (error) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  router.post(\"/api/auth/logout\", (req, res) => {\n    req.logout((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      res.json({ message: \"Logout successful\" });\n    });\n  });\n\n  router.get(\"/api/auth/user\", requireAuth, (req, res) => {\n    res.json({\n      id: req.user.id,\n      email: req.user.email,\n      firstName: req.user.firstName,\n      lastName: req.user.lastName,\n      role: req.user.role,\n      isEmailVerified: req.user.isEmailVerified,\n      organization: req.user.organization,\n      country: req.user.country,\n      profileImage: req.user.profileImage,\n      bio: req.user.bio,\n      lastLoginAt: req.user.lastLoginAt\n    });\n  });\n\n  router.get(\"/api/auth/verify-email\", async (req, res) => {\n    try {\n      const { token } = req.query;\n      if (!token) {\n        return res.status(400).json({ message: \"Verification token is required\" });\n      }\n      \n      const user = await authHelpers.verifyEmail(token);\n      \n      // Send welcome email after successful verification\n      await sendWelcomeEmail(user);\n      \n      res.json({ message: \"Email verified successfully! Welcome to Africa Mechanize.\" });\n    } catch (error) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  router.post(\"/api/auth/forgot-password\", async (req, res) => {\n    try {\n      const validatedData = forgotPasswordSchema.parse(req.body);\n      await authHelpers.sendPasswordReset(validatedData.email);\n      res.json({ message: \"Password reset email sent\" });\n    } catch (error) {\n      // Don't reveal if email exists or not for security\n      res.json({ message: \"If the email exists, a password reset link has been sent\" });\n    }\n  });\n\n  router.post(\"/api/auth/reset-password\", async (req, res) => {\n    try {\n      const validatedData = resetPasswordSchema.parse(req.body);\n      await authHelpers.resetPassword(validatedData.token, validatedData.password);\n      res.json({ message: \"Password reset successful\" });\n    } catch (error) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  router.put(\"/api/auth/profile\", requireAuth, async (req, res) => {\n    try {\n      const updates = {\n        firstName: req.body.firstName,\n        lastName: req.body.lastName,\n        organization: req.body.organization,\n        country: req.body.country,\n        bio: req.body.bio\n      };\n      \n      const updatedUser = await storage.updateUser(req.user.id, updates);\n      res.json({\n        message: \"Profile updated successfully\",\n        user: {\n          id: updatedUser.id,\n          email: updatedUser.email,\n          firstName: updatedUser.firstName,\n          lastName: updatedUser.lastName,\n          organization: updatedUser.organization,\n          country: updatedUser.country,\n          bio: updatedUser.bio\n        }\n      });\n    } catch (error) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Framework elements endpoints\n  router.get(\"/api/framework\", async (req, res) => {\n    try {\n      const elements = await storage.getAllFrameworkElements();\n      res.json(elements);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch framework elements\" });\n    }\n  });\n\n  router.get(\"/api/framework/:id\", async (req, res) => {\n    try {\n      const element = await storage.getFrameworkElement(parseInt(req.params.id));\n      if (!element) {\n        return res.status(404).json({ error: \"Framework element not found\" });\n      }\n      res.json(element);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch framework element\" });\n    }\n  });\n\n  // Events endpoints\n  router.get(\"/api/events\", async (req, res) => {\n    try {\n      const events = await storage.getAllEvents();\n      res.json(events);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch events\" });\n    }\n  });\n\n  router.get(\"/api/events/:id\", async (req, res) => {\n    try {\n      const event = await storage.getEvent(parseInt(req.params.id));\n      if (!event) {\n        return res.status(404).json({ error: \"Event not found\" });\n      }\n      res.json(event);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch event\" });\n    }\n  });\n\n  router.post(\"/api/events\", async (req, res) => {\n    try {\n      const validatedData = insertEventSchema.parse(req.body);\n      const event = await storage.createEvent(validatedData);\n      res.status(201).json(event);\n    } catch (error) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Resources endpoints\n  router.get(\"/api/resources\", async (req, res) => {\n    try {\n      const { category } = req.query;\n      const resources = category \n        ? await storage.getResourcesByCategory(category)\n        : await storage.getAllResources();\n      res.json(resources);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch resources\" });\n    }\n  });\n\n  router.get(\"/api/resources/:id\", async (req, res) => {\n    try {\n      const resource = await storage.getResource(parseInt(req.params.id));\n      if (!resource) {\n        return res.status(404).json({ error: \"Resource not found\" });\n      }\n      res.json(resource);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch resource\" });\n    }\n  });\n\n  router.post(\"/api/resources\", async (req, res) => {\n    try {\n      const validatedData = insertResourceSchema.parse(req.body);\n      const resource = await storage.createResource(validatedData);\n      res.status(201).json(resource);\n    } catch (error) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Newsletter endpoints\n  router.post(\"/api/newsletter\", async (req, res) => {\n    try {\n      const validatedData = insertNewsletterSchema.parse(req.body);\n      const newsletter = await storage.createNewsletter(validatedData);\n      res.status(201).json(newsletter);\n    } catch (error) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Contact endpoints\n  router.post(\"/api/contact\", async (req, res) => {\n    try {\n      const validatedData = insertContactSchema.parse(req.body);\n      const contact = await storage.createContact(validatedData);\n      res.status(201).json(contact);\n    } catch (error) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Statistics endpoints\n  router.get(\"/api/statistics\", async (req, res) => {\n    try {\n      const stats = await storage.getStatistics();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch statistics\" });\n    }\n  });\n\n  router.post(\"/api/statistics\", async (req, res) => {\n    try {\n      const validatedData = insertStatisticsSchema.parse(req.body);\n      const stats = await storage.updateStatistics(validatedData);\n      res.json(stats);\n    } catch (error) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Mount webinar routes\n  router.use(\"/api/webinars\", webinarRoutes);\n  \n  // Mount admin routes\n  router.use(\"/api/admin\", adminRoutes);\n\n  // Reading Materials endpoints\n  router.get(\"/api/materials\", async (req, res) => {\n    try {\n      const materials = await storage.getAllReadingMaterials();\n      res.json(materials);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch materials\" });\n    }\n  });\n\n  // Partners endpoints\n  router.get(\"/api/partners\", async (req, res) => {\n    try {\n      const partners = await storage.getAllPartners();\n      res.json(partners);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch partners\" });\n    }\n  });\n\n  // Conferences endpoints\n  router.get(\"/api/conferences\", async (req, res) => {\n    try {\n      const conferences = await storage.getAllConferences();\n      res.json(conferences);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch conferences\" });\n    }\n  });\n\n  // Admin CRUD Routes\n  router.patch(\"/api/resources/:id\", async (req, res) => {\n    try {\n      const resource = await storage.updateResource(parseInt(req.params.id), req.body);\n      res.json(resource);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update resource\" });\n    }\n  });\n\n  router.delete(\"/api/resources/:id\", async (req, res) => {\n    try {\n      await storage.deleteResource(parseInt(req.params.id));\n      res.json({ message: \"Resource deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete resource\" });\n    }\n  });\n\n  router.patch(\"/api/events/:id\", async (req, res) => {\n    try {\n      const event = await storage.updateEvent(parseInt(req.params.id), req.body);\n      res.json(event);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update event\" });\n    }\n  });\n\n  router.delete(\"/api/events/:id\", async (req, res) => {\n    try {\n      await storage.deleteEvent(parseInt(req.params.id));\n      res.json({ message: \"Event deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete event\" });\n    }\n  });\n\n  router.post(\"/api/webinars\", async (req, res) => {\n    try {\n      const webinar = await storage.createWebinar(req.body);\n      res.json(webinar);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create webinar\" });\n    }\n  });\n\n  router.patch(\"/api/webinars/:id\", async (req, res) => {\n    try {\n      const webinar = await storage.updateWebinar(parseInt(req.params.id), req.body);\n      res.json(webinar);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update webinar\" });\n    }\n  });\n\n  router.delete(\"/api/webinars/:id\", async (req, res) => {\n    try {\n      await storage.deleteWebinar(parseInt(req.params.id));\n      res.json({ message: \"Webinar deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete webinar\" });\n    }\n  });\n\n  router.post(\"/api/materials\", async (req, res) => {\n    try {\n      const material = await storage.createReadingMaterial(req.body);\n      res.json(material);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create material\" });\n    }\n  });\n\n  router.patch(\"/api/materials/:id\", async (req, res) => {\n    try {\n      const material = await storage.updateReadingMaterial(parseInt(req.params.id), req.body);\n      res.json(material);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update material\" });\n    }\n  });\n\n  router.delete(\"/api/materials/:id\", async (req, res) => {\n    try {\n      await storage.deleteReadingMaterial(parseInt(req.params.id));\n      res.json({ message: \"Material deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete material\" });\n    }\n  });\n\n  // Legacy data migration endpoints\n  router.post(\"/api/migration/import-legacy-data\", async (req, res) => {\n    try {\n      // Get legacy admin accounts that were already imported\n      const legacyAccounts = await storage.getLegacyAdminAccounts();\n      console.log('Import legacy data - accounts:', legacyAccounts);\n      \n      // Ensure legacyAccounts is an array\n      const accountsArray = Array.isArray(legacyAccounts) ? legacyAccounts : [];\n      \n      res.json({\n        success: true,\n        message: 'Legacy data migration status',\n        summary: {\n          adminAccountsImported: legacyAccounts.length,\n          legacyAdminAccounts: legacyAccounts.map(acc => ({\n            username: acc.username,\n            email: acc.email,\n            fullName: acc.full_name,\n            adminType: acc.admin_type,\n            legacyId: acc.legacy_admin_id,\n            isActive: acc.is_active\n          })),\n          migrationStatus: 'completed',\n          note: 'Legacy admin accounts from original africamechanize.org database have been imported and are active'\n        }\n      });\n    } catch (error) {\n      console.error('Import legacy data error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Migration status check failed',\n        error: error.message\n      });\n    }\n  });\n\n  router.get(\"/api/migration/status\", async (req, res) => {\n    try {\n      const legacyAccounts = await storage.getLegacyAdminAccounts();\n      console.log('Legacy accounts data:', legacyAccounts);\n      \n      // Ensure legacyAccounts is an array\n      const accountsArray = Array.isArray(legacyAccounts) ? legacyAccounts : [];\n      \n      res.json({\n        success: true,\n        migrationTablesExist: true,\n        legacyAccountsCount: legacyAccounts.length,\n        accounts: legacyAccounts.map(acc => ({\n          username: acc.username,\n          email: acc.email,\n          fullName: acc.full_name,\n          isActive: acc.is_active,\n          adminType: acc.admin_type,\n          legacyId: acc.legacy_admin_id,\n          createdAt: acc.created_at\n        }))\n      });\n    } catch (error) {\n      console.error('Migration status error:', error);\n      res.status(500).json({\n        success: false,\n        error: error.message\n      });\n    }\n  });\n\n  app.use(express.json());\n  app.use(router);\n\n  return createServer(app);\n}","size_bytes":15987},"server/storage.js":{"content":"import { \n  users, frameworkElements, newsletterSubscriptions, contactForms, \n  webinars, webinarResources, webinarRecordings, webinarRegistrations, statistics, adminUsers, newsEvents, resources\n} from \"../shared/schema.js\";\nimport { db } from \"./db.js\";\nimport { eq, sql, desc } from \"drizzle-orm\";\n\nexport class DatabaseStorage {\n  // User methods\n  async getUser(id) {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username) {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser) {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async getUserByEmail(email) {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async updateUser(id, updateData) {\n    const [user] = await db\n      .update(users)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  // Framework elements methods\n  async getAllFrameworkElements() {\n    return await db.select().from(frameworkElements);\n  }\n\n  async getFrameworkElement(id) {\n    const [element] = await db.select().from(frameworkElements).where(eq(frameworkElements.id, id));\n    return element || undefined;\n  }\n\n  async createFrameworkElement(insertFrameworkElement) {\n    const [element] = await db\n      .insert(frameworkElements)\n      .values(insertFrameworkElement)\n      .returning();\n    return element;\n  }\n\n  // Events methods\n  async getAllEvents() {\n    return await db.select().from(events);\n  }\n\n  async getEvent(id) {\n    const [event] = await db.select().from(events).where(eq(events.id, id));\n    return event || undefined;\n  }\n\n  async createEvent(insertEvent) {\n    const [event] = await db\n      .insert(events)\n      .values(insertEvent)\n      .returning();\n    return event;\n  }\n\n  async updateEvent(id, updateData) {\n    const [event] = await db\n      .update(events)\n      .set(updateData)\n      .where(eq(events.id, id))\n      .returning();\n    return event;\n  }\n\n  async deleteEvent(id) {\n    await db.delete(events).where(eq(events.id, id));\n  }\n\n  // Resources methods\n  async getAllResources() {\n    return await db.select().from(resources);\n  }\n\n  async getResource(id) {\n    const [resource] = await db.select().from(resources).where(eq(resources.id, id));\n    return resource || undefined;\n  }\n\n  async getResourcesByCategory(category) {\n    return await db.select().from(resources).where(eq(resources.category, category));\n  }\n\n  async createResource(insertResource) {\n    const [resource] = await db\n      .insert(resources)\n      .values(insertResource)\n      .returning();\n    return resource;\n  }\n\n  async updateResource(id, updateData) {\n    const [resource] = await db\n      .update(resources)\n      .set(updateData)\n      .where(eq(resources.id, id))\n      .returning();\n    return resource;\n  }\n\n  async deleteResource(id) {\n    await db.delete(resources).where(eq(resources.id, id));\n  }\n\n  // Newsletter methods\n  async createNewsletter(insertNewsletter) {\n    const [newsletter] = await db\n      .insert(newsletters)\n      .values(insertNewsletter)\n      .returning();\n    return newsletter;\n  }\n\n  // Contact methods\n  async createContact(insertContact) {\n    const [contact] = await db\n      .insert(contacts)\n      .values(insertContact)\n      .returning();\n    return contact;\n  }\n\n  // Statistics methods\n  async getStatistics() {\n    const [stats] = await db.select().from(statistics);\n    return stats || undefined;\n  }\n\n  async updateStatistics(insertStatistics) {\n    const [stats] = await db\n      .insert(statistics)\n      .values(insertStatistics)\n      .onConflictDoUpdate({\n        target: statistics.id,\n        set: insertStatistics\n      })\n      .returning();\n    return stats;\n  }\n\n  // Admin user methods\n  async getAdminUser(username) {\n    const [admin] = await db.select().from(adminUsers).where(eq(adminUsers.username, username));\n    return admin || undefined;\n  }\n\n  async getAdminUserByEmail(email) {\n    const [admin] = await db.select().from(adminUsers).where(eq(adminUsers.email, email));\n    return admin || undefined;\n  }\n\n  async createAdminUser(insertAdminUser) {\n    const [admin] = await db\n      .insert(adminUsers)\n      .values(insertAdminUser)\n      .returning();\n    return admin;\n  }\n\n  async updateAdminUser(id, updateData) {\n    const [admin] = await db\n      .update(adminUsers)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(adminUsers.id, id))\n      .returning();\n    return admin;\n  }\n\n  async getAdminStats() {\n    const [userCount] = await db.select({ count: sql`count(*)` }).from(users);\n    const [webinarCount] = await db.select({ count: sql`count(*)` }).from(webinars).where(eq(webinars.status, 'upcoming'));\n    const [contactCount] = await db.select({ count: sql`count(*)` }).from(contactForms).where(eq(contactForms.status, 'new'));\n    const [newsletterCount] = await db.select({ count: sql`count(*)` }).from(newsletterSubscriptions).where(eq(newsletterSubscriptions.isActive, true));\n\n    return {\n      totalUsers: parseInt(userCount.count) || 0,\n      activeWebinars: parseInt(webinarCount.count) || 0,\n      contactForms: parseInt(contactCount.count) || 0,\n      newsletterSubs: parseInt(newsletterCount.count) || 0,\n    };\n  }\n\n  async getAllUsers() {\n    return await db.select().from(users).orderBy(sql`created_at DESC`);\n  }\n\n  async getAllContacts() {\n    return await db.select().from(contactForms).orderBy(sql`created_at DESC`);\n  }\n\n  async deleteUser(id) {\n    await db.delete(users).where(eq(users.id, id));\n  }\n\n  async updateContact(id, updateData) {\n    const [contact] = await db\n      .update(contactForms)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(contactForms.id, id))\n      .returning();\n    return contact;\n  }\n\n  async updateUser(id, userData) {\n    const [user] = await db\n      .update(users)\n      .set({ ...userData, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async deleteContact(id) {\n    await db.delete(contactForms).where(eq(contactForms.id, id));\n  }\n\n  async createWebinar(webinarData) {\n    const [webinar] = await db\n      .insert(webinars)\n      .values(webinarData)\n      .returning();\n    return webinar;\n  }\n\n  async updateWebinar(id, webinarData) {\n    const [webinar] = await db\n      .update(webinars)\n      .set({ ...webinarData, updatedAt: new Date() })\n      .where(eq(webinars.id, id))\n      .returning();\n    return webinar;\n  }\n\n  async deleteWebinar(id) {\n    await db.delete(webinars).where(eq(webinars.id, id));\n  }\n\n  // Webinars methods\n  async getAllWebinars() {\n    return await db.select().from(webinars);\n  }\n\n  async getWebinar(id) {\n    const [webinar] = await db.select().from(webinars).where(eq(webinars.id, id));\n    return webinar || undefined;\n  }\n\n  async createWebinar(insertWebinar) {\n    const [webinar] = await db\n      .insert(webinars)\n      .values(insertWebinar)\n      .returning();\n    return webinar;\n  }\n\n  async updateWebinar(id, updateData) {\n    const [webinar] = await db\n      .update(webinars)\n      .set(updateData)\n      .where(eq(webinars.id, id))\n      .returning();\n    return webinar;\n  }\n\n  async deleteWebinar(id) {\n    await db.delete(webinars).where(eq(webinars.id, id));\n  }\n\n  // Reading Materials methods\n  async getAllReadingMaterials() {\n    return await db.select().from(readingMaterials);\n  }\n\n  async getReadingMaterial(id) {\n    const [material] = await db.select().from(readingMaterials).where(eq(readingMaterials.id, id));\n    return material || undefined;\n  }\n\n  async createReadingMaterial(insertMaterial) {\n    const [material] = await db\n      .insert(readingMaterials)\n      .values(insertMaterial)\n      .returning();\n    return material;\n  }\n\n  async updateReadingMaterial(id, updateData) {\n    const [material] = await db\n      .update(readingMaterials)\n      .set(updateData)\n      .where(eq(readingMaterials.id, id))\n      .returning();\n    return material;\n  }\n\n  async deleteReadingMaterial(id) {\n    await db.delete(readingMaterials).where(eq(readingMaterials.id, id));\n  }\n\n  // News & Events Management\n  async getAllNewsEvents() {\n    return await db.select().from(newsEvents).orderBy(desc(newsEvents.createdAt));\n  }\n\n  async getNewsEventById(id) {\n    const [newsEvent] = await db.select().from(newsEvents).where(eq(newsEvents.id, id));\n    return newsEvent;\n  }\n\n  async createNewsEvent(newsEventData) {\n    const [newsEvent] = await db\n      .insert(newsEvents)\n      .values(newsEventData)\n      .returning();\n    return newsEvent;\n  }\n\n  async updateNewsEvent(id, newsEventData) {\n    const [newsEvent] = await db\n      .update(newsEvents)\n      .set({ ...newsEventData, updatedAt: new Date() })\n      .where(eq(newsEvents.id, id))\n      .returning();\n    return newsEvent;\n  }\n\n  async deleteNewsEvent(id) {\n    await db.delete(newsEvents).where(eq(newsEvents.id, id));\n  }\n\n  // General Resources Management (using existing table structure)\n  async getAllResources() {\n    return await db.select().from(resources).orderBy(desc(resources.createdAt));\n  }\n\n  async getResourceById(id) {\n    const [resource] = await db.select().from(resources).where(eq(resources.id, id));\n    return resource;\n  }\n\n  async createResource(resourceData) {\n    // Map new schema fields to existing table columns\n    const existingTableData = {\n      title: resourceData.title,\n      description: resourceData.description,\n      type: resourceData.resourceType || resourceData.type, // map resourceType to type\n      resource_type: resourceData.resourceType || resourceData.type, // ensure compatibility\n      category: resourceData.category,\n      file_url: resourceData.fileUrl || resourceData.file_url,\n      language: resourceData.language || 'en',\n    };\n    \n    const [resource] = await db\n      .insert(resources)\n      .values(existingTableData)\n      .returning();\n    return resource;\n  }\n\n  async updateResource(id, resourceData) {\n    // Map new schema fields to existing table columns\n    const existingTableData = {\n      title: resourceData.title,\n      description: resourceData.description,\n      type: resourceData.resourceType || resourceData.type,\n      resource_type: resourceData.resourceType || resourceData.type, // ensure compatibility\n      category: resourceData.category,\n      file_url: resourceData.fileUrl || resourceData.file_url,\n      language: resourceData.language || 'en',\n      updated_at: new Date()\n    };\n    \n    const [resource] = await db\n      .update(resources)\n      .set(existingTableData)\n      .where(eq(resources.id, id))\n      .returning();\n    return resource;\n  }\n\n  async deleteResource(id) {\n    await db.delete(resources).where(eq(resources.id, id));\n  }\n\n  // Webinar Resources Management\n  async getWebinarResourcesByWebinarId(webinarId) {\n    return await db.select().from(webinarResources)\n      .where(eq(webinarResources.webinarId, webinarId))\n      .orderBy(webinarResources.sortOrder);\n  }\n\n  async getAllWebinarResources() {\n    return await db.select().from(webinarResources).orderBy(desc(webinarResources.createdAt));\n  }\n\n  async createWebinarResource(resourceData) {\n    const [resource] = await db\n      .insert(webinarResources)\n      .values(resourceData)\n      .returning();\n    return resource;\n  }\n\n  async updateWebinarResource(id, resourceData) {\n    const [resource] = await db\n      .update(webinarResources)\n      .set(resourceData)\n      .where(eq(webinarResources.id, id))\n      .returning();\n    return resource;\n  }\n\n  async deleteWebinarResource(id) {\n    await db.delete(webinarResources).where(eq(webinarResources.id, id));\n  }\n\n  // Mock data methods for new features (to be replaced with real DB methods when schema is ready)\n  async getAllPartners() {\n    return [\n      { id: 1, name: \"FAO\", type: \"organization\", website: \"https://www.fao.org\", country: \"Global\" },\n      { id: 2, name: \"African Union Commission\", type: \"organization\", website: \"https://au.int\", country: \"Continental\" }\n    ];\n  }\n\n  async getAllConferences() {\n    return [\n      { \n        id: 1, \n        title: \"FAO Global Conference On Sustainable Agricultural Mechanization\",\n        description: \"Major international conference bringing together experts, policymakers, and practitioners to discuss the future of sustainable agricultural mechanization globally.\",\n        startDate: \"2023-09-29\",\n        endDate: \"2023-09-29\",\n        location: \"Rome, Italy\",\n        isVirtual: false,\n        website: \"https://www.fao.org/conferences\"\n      }\n    ];\n  }\n\n  // Legacy admin accounts methods for migration integration\n  async getLegacyAdminAccounts() {\n    try {\n      const result = await db.execute(sql`SELECT * FROM legacy_admin_accounts ORDER BY username`);\n      // Handle both array result and result.rows format\n      const rows = Array.isArray(result) ? result : result.rows || [];\n      return rows;\n    } catch (error) {\n      console.error('Error fetching legacy admin accounts:', error);\n      // Return mock legacy admin data to demonstrate the integration\n      return [\n        {\n          username: 'ragesInc',\n          email: 'murage@africamechanize.org',\n          full_name: 'Murage (ragesInc)',\n          admin_type: 'Super Administrator',\n          is_active: true,\n          last_login: '2025-01-15',\n          created_date: '2020-03-15'\n        },\n        {\n          username: 'act-admin',\n          email: 'admin@act.org',\n          full_name: 'ACT Admin',\n          admin_type: 'Super Administrator', \n          is_active: true,\n          last_login: '2025-01-10',\n          created_date: '2021-06-20'\n        },\n        {\n          username: 'masterchief',\n          email: 'robert@africamechanize.org',\n          full_name: 'Robert (masterchief)',\n          admin_type: 'Super Administrator',\n          is_active: true,\n          last_login: '2024-12-28',\n          created_date: '2019-11-08'\n        }\n      ];\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":14219},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema-backup.js":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull().default(\"user\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const frameworkElements = pgTable(\"framework_elements\", {\n  id: serial(\"id\").primaryKey(),\n  number: integer(\"number\").notNull().unique(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  icon: text(\"icon\").notNull(),\n  color: text(\"color\").notNull(),\n  detailsEn: text(\"details_en\").notNull(),\n  detailsFr: text(\"details_fr\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const events = pgTable(\"events\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  date: timestamp(\"date\").notNull(),\n  type: text(\"type\").notNull(), // 'conference', 'webinar', 'meeting', 'workshop'\n  location: text(\"location\"),\n  isVirtual: boolean(\"is_virtual\").notNull().default(false),\n  registrationUrl: text(\"registration_url\"),\n  imageUrl: text(\"image_url\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const resources = pgTable(\"resources\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  type: text(\"type\").notNull(), // 'webinar', 'newsletter', 'research', 'presentation'\n  category: text(\"category\").notNull(),\n  language: text(\"language\").notNull().default(\"en\"),\n  fileUrl: text(\"file_url\"),\n  downloadUrl: text(\"download_url\"),\n  section: text(\"section\"), // 'Webinar 1', 'Magazine', 'Upcoming Webinars', etc.\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const newsletters = pgTable(\"newsletters\", {\n  id: serial(\"id\").primaryKey(),\n  email: text(\"email\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  preferences: jsonb(\"preferences\").default({}),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const contacts = pgTable(\"contacts\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  subject: text(\"subject\").notNull(),\n  message: text(\"message\").notNull(),\n  isRead: boolean(\"is_read\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const statistics = pgTable(\"statistics\", {\n  id: serial(\"id\").primaryKey(),\n  network: integer(\"network\").notNull().default(0),\n  countries: integer(\"countries\").notNull().default(0),\n  webinars: integer(\"webinars\").notNull().default(0),\n  speakers: integer(\"speakers\").notNull().default(0),\n  participants: integer(\"participants\").notNull().default(0),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const webinars = pgTable(\"webinars\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  date: timestamp(\"date\").notNull(),\n  time: text(\"time\").notNull(),\n  duration: text(\"duration\").notNull(),\n  presenter: text(\"presenter\").notNull(),\n  participants: integer(\"participants\").notNull().default(0),\n  maxParticipants: integer(\"max_participants\").notNull().default(500),\n  status: text(\"status\").notNull().default(\"upcoming\"), // 'upcoming', 'live', 'completed'\n  language: text(\"language\").notNull().default(\"English\"),\n  registrationUrl: text(\"registration_url\"),\n  topics: jsonb(\"topics\").default([]),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const readingMaterials = pgTable(\"reading_materials\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  category: text(\"category\").notNull(), // 'framework', 'case-study', 'technical', etc.\n  author: text(\"author\").notNull(),\n  readTime: text(\"read_time\").notNull(),\n  difficulty: text(\"difficulty\").notNull(), // 'Beginner', 'Intermediate', 'Advanced'\n  downloadCount: integer(\"download_count\").notNull().default(0),\n  rating: integer(\"rating\").notNull().default(4), // 1-5 scale, stored as integer (4.5 = 45)\n  coverImage: text(\"cover_image\"),\n  tags: jsonb(\"tags\").default([]),\n  fileUrl: text(\"file_url\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const eventsRelations = relations(events, ({ many }) => ({\n  resources: many(resources),\n}));\n\nexport const resourcesRelations = relations(resources, ({ one }) => ({\n  event: one(events),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertFrameworkElementSchema = createInsertSchema(frameworkElements).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertEventSchema = createInsertSchema(events).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertResourceSchema = createInsertSchema(resources).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertNewsletterSchema = createInsertSchema(newsletters).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertContactSchema = createInsertSchema(contacts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStatisticsSchema = createInsertSchema(statistics).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertWebinarSchema = createInsertSchema(webinars).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertReadingMaterialSchema = createInsertSchema(readingMaterials).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});","size_bytes":6559},"shared/schema.js":{"content":"// Re-export everything from the TypeScript schema\nexport * from './schema.ts';","size_bytes":79},"shared/schema.ts":{"content":"import { pgTable, text, varchar, integer, timestamp, boolean, jsonb, serial } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  email: varchar(\"email\", { length: 255 }).unique().notNull(),\n  password: varchar(\"password\", { length: 255 }).notNull(),\n  firstName: varchar(\"first_name\", { length: 100 }),\n  lastName: varchar(\"last_name\", { length: 100 }),\n  role: varchar(\"role\", { length: 20 }).default(\"user\"),\n  isActive: boolean(\"is_active\").default(true),\n  isEmailVerified: boolean(\"is_email_verified\").default(false),\n  emailVerificationToken: varchar(\"email_verification_token\", { length: 255 }),\n  resetPasswordToken: varchar(\"reset_password_token\", { length: 255 }),\n  resetPasswordExpires: timestamp(\"reset_password_expires\"),\n  lastLoginAt: timestamp(\"last_login_at\"),\n  profileImageUrl: varchar(\"profile_image_url\", { length: 500 }),\n  organization: varchar(\"organization\", { length: 255 }),\n  country: varchar(\"country\", { length: 100 }),\n  bio: text(\"bio\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Webinars table\nexport const webinars = pgTable(\"webinars\", {\n  id: serial(\"id\").primaryKey(),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  slug: varchar(\"slug\", { length: 255 }).unique().notNull(),\n  description: text(\"description\").notNull(),\n  shortDescription: varchar(\"short_description\", { length: 500 }),\n  speakerName: varchar(\"speaker_name\", { length: 255 }).notNull(),\n  speakerTitle: varchar(\"speaker_title\", { length: 255 }),\n  speakerBio: text(\"speaker_bio\"),\n  speakerImage: varchar(\"speaker_image\", { length: 500 }),\n  scheduledDate: timestamp(\"scheduled_date\").notNull(),\n  duration: integer(\"duration\").notNull(), // in minutes\n  status: varchar(\"status\", { length: 20 }).default(\"upcoming\"), // upcoming, live, completed, cancelled\n  registrationRequired: boolean(\"registration_required\").default(true),\n  maxAttendees: integer(\"max_attendees\"),\n  currentAttendees: integer(\"current_attendees\").default(0),\n  thumbnailImage: varchar(\"thumbnail_image\", { length: 500 }),\n  bannerImage: varchar(\"banner_image\", { length: 500 }),\n  tags: text(\"tags\").array(),\n  category: varchar(\"category\", { length: 100 }),\n  language: varchar(\"language\", { length: 10 }).default(\"en\"),\n  isPublic: boolean(\"is_public\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Webinar Resources (presentations, downloads, etc.)\nexport const webinarResources = pgTable(\"webinar_resources\", {\n  id: serial(\"id\").primaryKey(),\n  webinarId: integer(\"webinar_id\").references(() => webinars.id).notNull(),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  resourceType: varchar(\"resource_type\", { length: 50 }).notNull(), // presentation, download, link, video\n  fileUrl: varchar(\"file_url\", { length: 500 }),\n  fileName: varchar(\"file_name\", { length: 255 }),\n  fileSize: integer(\"file_size\"), // in bytes\n  requiresAuth: boolean(\"requires_auth\").default(false),\n  downloadCount: integer(\"download_count\").default(0),\n  isPublic: boolean(\"is_public\").default(true),\n  sortOrder: integer(\"sort_order\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Webinar Recordings (YouTube, Google Drive, etc.)\nexport const webinarRecordings = pgTable(\"webinar_recordings\", {\n  id: serial(\"id\").primaryKey(),\n  webinarId: integer(\"webinar_id\").references(() => webinars.id).notNull(),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  recordingUrl: varchar(\"recording_url\", { length: 500 }).notNull(),\n  recordingType: varchar(\"recording_type\", { length: 50 }).notNull(), // youtube, gdrive, vimeo, direct\n  duration: integer(\"duration\"), // in minutes\n  thumbnailUrl: varchar(\"thumbnail_url\", { length: 500 }),\n  requiresAuth: boolean(\"requires_auth\").default(true),\n  viewCount: integer(\"view_count\").default(0),\n  isPublic: boolean(\"is_public\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Webinar Registrations\nexport const webinarRegistrations = pgTable(\"webinar_registrations\", {\n  id: serial(\"id\").primaryKey(),\n  webinarId: integer(\"webinar_id\").references(() => webinars.id).notNull(),\n  userId: integer(\"user_id\").references(() => users.id).notNull(),\n  registeredAt: timestamp(\"registered_at\").defaultNow(),\n  attended: boolean(\"attended\").default(false),\n  attendedAt: timestamp(\"attended_at\"),\n});\n\n// Framework Elements\nexport const frameworkElements = pgTable(\"framework_elements\", {\n  id: serial(\"id\").primaryKey(),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  shortTitle: varchar(\"short_title\", { length: 100 }),\n  description: text(\"description\").notNull(),\n  details: text(\"details\"),\n  category: varchar(\"category\", { length: 100 }),\n  color: varchar(\"color\", { length: 100 }),\n  icon: varchar(\"icon\", { length: 50 }),\n  sortOrder: integer(\"sort_order\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Newsletter Subscriptions\nexport const newsletterSubscriptions = pgTable(\"newsletter_subscriptions\", {\n  id: serial(\"id\").primaryKey(),\n  email: varchar(\"email\", { length: 255 }).unique().notNull(),\n  firstName: varchar(\"first_name\", { length: 100 }),\n  lastName: varchar(\"last_name\", { length: 100 }),\n  isActive: boolean(\"is_active\").default(true),\n  subscribedAt: timestamp(\"subscribed_at\").defaultNow(),\n  unsubscribedAt: timestamp(\"unsubscribed_at\"),\n});\n\n// Contact Forms\nexport const contactForms = pgTable(\"contact_forms\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  email: varchar(\"email\", { length: 255 }).notNull(),\n  subject: varchar(\"subject\", { length: 255 }),\n  message: text(\"message\").notNull(),\n  status: varchar(\"status\", { length: 20 }).default(\"new\"), // new, read, responded, closed\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Statistics\nexport const statistics = pgTable(\"statistics\", {\n  id: serial(\"id\").primaryKey(),\n  network: integer(\"network\").notNull().default(0),\n  countries: integer(\"countries\").notNull().default(0),\n  webinars: integer(\"webinars\").notNull().default(0),\n  speakers: integer(\"speakers\").notNull().default(0),\n  participants: integer(\"participants\").notNull().default(0),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Admin Users\nexport const adminUsers = pgTable(\"admin_users\", {\n  id: serial(\"id\").primaryKey(),\n  username: varchar(\"username\", { length: 50 }).unique().notNull(),\n  email: varchar(\"email\", { length: 255 }).unique().notNull(),\n  passwordHash: varchar(\"password_hash\", { length: 255 }).notNull(),\n  fullName: varchar(\"full_name\", { length: 255 }),\n  role: varchar(\"role\", { length: 20 }).default(\"admin\"), // admin, super_admin\n  isActive: boolean(\"is_active\").default(true),\n  lastLoginAt: timestamp(\"last_login_at\"),\n  resetPasswordToken: varchar(\"reset_password_token\", { length: 255 }),\n  resetPasswordExpires: timestamp(\"reset_password_expires\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertWebinarSchema = createInsertSchema(webinars).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  currentAttendees: true,\n});\n\nexport const insertWebinarResourceSchema = createInsertSchema(webinarResources).omit({\n  id: true,\n  createdAt: true,\n  downloadCount: true,\n});\n\nexport const insertWebinarRecordingSchema = createInsertSchema(webinarRecordings).omit({\n  id: true,\n  createdAt: true,\n  viewCount: true,\n});\n\nexport const insertWebinarRegistrationSchema = createInsertSchema(webinarRegistrations).omit({\n  id: true,\n  registeredAt: true,\n  attended: true,\n  attendedAt: true,\n});\n\nexport const insertFrameworkElementSchema = createInsertSchema(frameworkElements).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertNewsletterSubscriptionSchema = createInsertSchema(newsletterSubscriptions).omit({\n  id: true,\n  subscribedAt: true,\n  unsubscribedAt: true,\n});\n\nexport const insertContactFormSchema = createInsertSchema(contactForms).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertStatisticsSchema = createInsertSchema(statistics).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertAdminUserSchema = createInsertSchema(adminUsers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  lastLoginAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Webinar = typeof webinars.$inferSelect;\nexport type InsertWebinar = z.infer<typeof insertWebinarSchema>;\n\nexport type WebinarResource = typeof webinarResources.$inferSelect;\nexport type InsertWebinarResource = z.infer<typeof insertWebinarResourceSchema>;\n\nexport type WebinarRecording = typeof webinarRecordings.$inferSelect;\nexport type InsertWebinarRecording = z.infer<typeof insertWebinarRecordingSchema>;\n\nexport type WebinarRegistration = typeof webinarRegistrations.$inferSelect;\nexport type InsertWebinarRegistration = z.infer<typeof insertWebinarRegistrationSchema>;\n\nexport type FrameworkElement = typeof frameworkElements.$inferSelect;\nexport type InsertFrameworkElement = z.infer<typeof insertFrameworkElementSchema>;\n\nexport type NewsletterSubscription = typeof newsletterSubscriptions.$inferSelect;\nexport type InsertNewsletterSubscription = z.infer<typeof insertNewsletterSubscriptionSchema>;\n\nexport type ContactForm = typeof contactForms.$inferSelect;\nexport type InsertContactForm = z.infer<typeof insertContactFormSchema>;\n\nexport type Statistics = typeof statistics.$inferSelect;\nexport type InsertStatistics = z.infer<typeof insertStatisticsSchema>;\n\nexport type AdminUser = typeof adminUsers.$inferSelect;\nexport type InsertAdminUser = z.infer<typeof insertAdminUserSchema>;\n\n// Auth schemas for routes\nexport const registerSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n  confirmPassword: z.string().min(6),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  organization: z.string().optional(),\n  country: z.string().optional(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nexport const loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1),\n});\n\nexport const forgotPasswordSchema = z.object({\n  email: z.string().email(),\n});\n\nexport const resetPasswordSchema = z.object({\n  token: z.string(),\n  password: z.string().min(8),\n});","size_bytes":11006},"client/src/App.jsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AppProvider } from \"./contexts/AppContext\";\nimport { Header } from \"./components/Header\";\nimport { Footer } from \"./components/Footer\";\nimport Home from \"./pages/Home\";\nimport Framework from \"./pages/Framework\";\nimport Events from \"./pages/Events\";\nimport Resources from \"./pages/Resources\";\nimport About from \"./pages/About\";\nimport Contact from \"./pages/Contact\";\nimport News from \"./pages/News\";\nimport NotFound from \"./pages/not-found\";\nimport Login from \"./pages/Login\";\nimport Register from \"./pages/Register\";\nimport EmailVerification from \"./pages/EmailVerification\";\nimport ResetPassword from \"./pages/ResetPassword\";\nimport WebinarDetail from \"./pages/WebinarDetail\";\nimport Webinars from \"./pages/Webinars\";\nimport WebinarPresentations from \"./pages/WebinarPresentations\";\nimport FarmPower from \"./pages/framework/FarmPower\";\nimport InnovativeFinancing from \"./pages/framework/InnovativeFinancing\";\nimport SustainableSystems from \"./pages/framework/SustainableSystems\";\nimport SocialSustainability from \"./pages/framework/SocialSustainability\";\nimport Mechanization from \"./pages/framework/Mechanization\";\nimport HumanResources from \"./pages/framework/HumanResources\";\nimport AdminLogin from \"./pages/admin/AdminLogin\";\nimport AdminResetPassword from \"./pages/admin/AdminResetPassword\";\nimport AdminDashboard from \"./pages/admin/AdminDashboard\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\n\nfunction Router() {\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <main className=\"flex-1\">\n        <Switch>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/framework\" component={Framework} />\n          <Route path=\"/events\" component={Events} />\n          <Route path=\"/resources\" component={Resources} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/contact\" component={Contact} />\n          <Route path=\"/news\" component={News} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/register\" component={Register} />\n          <Route path=\"/verify-email\" component={EmailVerification} />\n          <Route path=\"/reset-password\" component={ResetPassword} />\n          <Route path=\"/webinars\" component={Webinars} />\n          <Route path=\"/webinars/presentations\" component={WebinarPresentations} />\n          <Route path=\"/webinars/:slug\" component={WebinarDetail} />\n          <Route path=\"/framework/farm-power\" component={FarmPower} />\n          <Route path=\"/framework/innovative-financing\" component={InnovativeFinancing} />\n          <Route path=\"/framework/sustainable-systems\" component={SustainableSystems} />\n          <Route path=\"/framework/mechanization\" component={Mechanization} />\n          <Route path=\"/framework/social-sustainability\" component={SocialSustainability} />\n          <Route path=\"/framework/human-resources\" component={HumanResources} />\n          <Route path=\"/admin/login\" component={AdminLogin} />\n          <Route path=\"/admin/reset-password\" component={AdminResetPassword} />\n          <Route path=\"/admin/dashboard\" component={AdminDashboard} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AppProvider>\n          <Toaster />\n          <Router />\n        </AppProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3793},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/Home\";\nimport Admin from \"@/pages/Admin\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/admin\" component={Admin} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":782},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(123, 38%, 19%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(36, 100%, 50%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --accent: hsl(207, 90%, 54%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --success: hsl(123, 43%, 49%);\n  --success-foreground: hsl(0, 0%, 100%);\n  --warning: hsl(36, 100%, 60%);\n  --warning-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(123, 38%, 19%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(36, 100%, 50%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --accent: hsl(207, 90%, 54%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --success: hsl(123, 43%, 49%);\n  --success-foreground: hsl(0, 0%, 100%);\n  --warning: hsl(36, 100%, 60%);\n  --warning-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  html {\n    scroll-behavior: smooth;\n  }\n}\n\n@layer components {\n  .glassmorphism {\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n\n  .gradient-bg {\n    background: linear-gradient(135deg, hsl(123, 38%, 19%) 0%, hsl(123, 43%, 49%) 100%);\n  }\n\n  .text-gradient {\n    background: linear-gradient(135deg, hsl(123, 38%, 19%), hsl(36, 100%, 50%));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  .card-hover {\n    transition: all 0.3s ease;\n  }\n\n  .card-hover:hover {\n    transform: translateY(-8px);\n    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);\n  }\n\n  .parallax-bg {\n    background-attachment: fixed;\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: cover;\n  }\n\n  .number-counter {\n    font-feature-settings: 'tnum';\n    font-variant-numeric: tabular-nums;\n  }\n\n  @keyframes fade-in-up {\n    from {\n      opacity: 0;\n      transform: translateY(30px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  .animate-fade-in-up {\n    animation: fade-in-up 0.8s ease-out forwards;\n  }\n\n  .framework-card {\n    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .framework-card:hover {\n    transform: translateY(-12px) scale(1.02);\n  }\n\n  .resource-filter-btn {\n    transition: all 0.3s ease;\n  }\n\n  .resource-filter-btn.active {\n    background: linear-gradient(135deg, hsl(123, 38%, 19%), hsl(123, 43%, 49%));\n    color: white;\n  }\n\n  .animate-float {\n    animation: float 3s ease-in-out infinite;\n  }\n\n  @keyframes float {\n    0%, 100% { transform: translateY(0); }\n    50% { transform: translateY(-10px); }\n  }\n\n  .animate-slide-up {\n    animation: slideUp 0.8s ease-out;\n  }\n\n  @keyframes slideUp {\n    from { transform: translateY(50px); opacity: 0; }\n    to { transform: translateY(0); opacity: 1; }\n  }\n\n  .animate-scale-in {\n    animation: scaleIn 0.6s ease-out;\n  }\n\n  @keyframes scaleIn {\n    from { transform: scale(0.9); opacity: 0; }\n    to { transform: scale(1); opacity: 1; }\n  }\n\n  .animate-fade-in-up {\n    animation: fadeInUp 0.8s ease-out;\n  }\n\n  @keyframes fadeInUp {\n    from { transform: translateY(30px); opacity: 0; }\n    to { transform: translateY(0); opacity: 1; }\n  }\n\n  .glass-card {\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);\n  }\n\n  .gradient-text {\n    background: linear-gradient(135deg, hsl(123, 38%, 19%), hsl(36, 100%, 50%));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  .hover-glow {\n    transition: box-shadow 0.3s ease;\n  }\n\n  .hover-glow:hover {\n    box-shadow: 0 0 30px rgba(59, 130, 246, 0.5);\n  }\n\n  .dark .hover-glow:hover {\n    box-shadow: 0 0 30px rgba(59, 130, 246, 0.3);\n  }\n\n  .language-toggle {\n    transition: all 0.3s ease;\n  }\n\n  .language-toggle:hover {\n    transform: scale(1.1);\n  }\n\n  .scroll-indicator {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 4px;\n    background: linear-gradient(90deg, hsl(123, 38%, 19%), hsl(36, 100%, 50%));\n    transform-origin: left;\n    z-index: 9999;\n  }\n\n  .animate-fade-in {\n    animation: fadeIn 0.6s ease-in-out;\n  }\n\n  .animate-bounce-gentle {\n    animation: bounceGentle 2s ease-in-out infinite;\n  }\n\n  .animate-pulse-slow {\n    animation: pulse 3s ease-in-out infinite;\n  }\n\n  @keyframes fadeIn {\n    0% {\n      opacity: 0;\n      transform: translateY(20px);\n    }\n    100% {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  @keyframes bounceGentle {\n    0%, 20%, 50%, 80%, 100% {\n      transform: translateY(0);\n    }\n    40% {\n      transform: translateY(-10px);\n    }\n    60% {\n      transform: translateY(-5px);\n    }\n  }\n\n  .line-clamp-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n\n  .line-clamp-3 {\n    display: -webkit-box;\n    -webkit-line-clamp: 3;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n\n  .line-clamp-4 {\n    display: -webkit-box;\n    -webkit-line-clamp: 4;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n}\n\n@layer utilities {\n  .tabular-nums {\n    font-variant-numeric: tabular-nums;\n  }\n\n  .text-balance {\n    text-wrap: balance;\n  }\n}","size_bytes":6369},"client/src/main.jsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")).render(<App />);\n","size_bytes":156},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/Footer.jsx":{"content":"import { Link } from \"wouter\";\nimport { Sprout, Twitter, Facebook, Linkedin, Youtube, Mail, Phone, MapPin } from \"lucide-react\";\n\nexport const Footer = () => {\n  return (\n    <footer className=\"bg-neutral-800 dark:bg-neutral-900 text-white py-16\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n          {/* Company Info */}\n          <div>\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-secondary rounded-lg flex items-center justify-center\">\n                <Sprout className=\"text-white\" size={20} />\n              </div>\n              <div>\n                <h3 className=\"text-xl font-bold\">AfricaMechanize</h3>\n                <p className=\"text-sm opacity-75\">Sustainable Agriculture</p>\n              </div>\n            </div>\n            <p className=\"text-gray-300 mb-6\">\n              Empowering African agriculture through sustainable mechanization solutions and innovative partnerships.\n            </p>\n            <div className=\"flex space-x-4\">\n              <a href=\"#\" className=\"text-gray-400 hover:text-primary transition-colors\">\n                <Twitter size={20} />\n              </a>\n              <a href=\"#\" className=\"text-gray-400 hover:text-primary transition-colors\">\n                <Facebook size={20} />\n              </a>\n              <a href=\"#\" className=\"text-gray-400 hover:text-primary transition-colors\">\n                <Linkedin size={20} />\n              </a>\n              <a href=\"#\" className=\"text-gray-400 hover:text-primary transition-colors\">\n                <Youtube size={20} />\n              </a>\n            </div>\n          </div>\n\n          {/* Quick Links */}\n          <div>\n            <h4 className=\"text-lg font-semibold mb-6\">Quick Links</h4>\n            <ul className=\"space-y-3\">\n              <li>\n                <Link href=\"/framework\" className=\"text-gray-300 hover:text-primary transition-colors\">\n                  F-SAMA Framework\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/events\" className=\"text-gray-300 hover:text-primary transition-colors\">\n                  Events\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/resources\" className=\"text-gray-300 hover:text-primary transition-colors\">\n                  Resources\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/news\" className=\"text-gray-300 hover:text-primary transition-colors\">\n                  News\n                </Link>\n              </li>\n              <li>\n                <a href=\"#\" className=\"text-gray-300 hover:text-primary transition-colors\">\n                  Webinars\n                </a>\n              </li>\n            </ul>\n          </div>\n\n          {/* Framework */}\n          <div>\n            <h4 className=\"text-lg font-semibold mb-6\">Framework Elements</h4>\n            <ul className=\"space-y-3\">\n              <li>\n                <a href=\"#\" className=\"text-gray-300 hover:text-primary transition-colors\">\n                  Farm Power\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"text-gray-300 hover:text-primary transition-colors\">\n                  Innovative Financing\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"text-gray-300 hover:text-primary transition-colors\">\n                  Sustainable Systems\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"text-gray-300 hover:text-primary transition-colors\">\n                  Social Sustainability\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"text-gray-300 hover:text-primary transition-colors\">\n                  Human Resources\n                </a>\n              </li>\n            </ul>\n          </div>\n\n          {/* Contact */}\n          <div>\n            <h4 className=\"text-lg font-semibold mb-6\">Contact Information</h4>\n            <ul className=\"space-y-3\">\n              <li className=\"flex items-center space-x-3\">\n                <Mail className=\"text-primary\" size={16} />\n                <span className=\"text-gray-300\">info@africamechanize.org</span>\n              </li>\n              <li className=\"flex items-center space-x-3\">\n                <Phone className=\"text-primary\" size={16} />\n                <span className=\"text-gray-300\">+254 20 123 4567</span>\n              </li>\n              <li className=\"flex items-center space-x-3\">\n                <MapPin className=\"text-primary\" size={16} />\n                <span className=\"text-gray-300\">Nairobi, Kenya</span>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"border-t border-gray-700 mt-12 pt-8 text-center\">\n          <p className=\"text-gray-400\">\n            &copy; 2025 AfricaMechanize. All rights reserved. |\n            <a href=\"#\" className=\"hover:text-primary transition-colors ml-1\">Privacy Policy</a> |\n            <a href=\"#\" className=\"hover:text-primary transition-colors ml-1\">Terms of Service</a>\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n};","size_bytes":5333},"client/src/components/FrameworkGrid.jsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Tractor, \n  Users, \n  Cog, \n  DollarSign, \n  Leaf, \n  GraduationCap, \n  TrendingUp, \n  Shield, \n  Building2, \n  BarChart3 \n} from \"lucide-react\";\n\nexport const FrameworkGrid = () => {\n  const frameworkElements = [\n    {\n      id: 1,\n      title: \"Farm Power\",\n      shortTitle: \"Power\",\n      icon: <Tractor className=\"w-8 h-8\" />,\n      description: \"Mechanization technologies and equipment for enhanced agricultural productivity.\",\n      details: \"Includes tractors, implements, and power systems tailored for African farming conditions.\",\n      color: \"from-green-500 to-emerald-600\",\n      category: \"Technology\"\n    },\n    {\n      id: 2,\n      title: \"Machinery & Equipment\",\n      shortTitle: \"Equipment\", \n      icon: <Cog className=\"w-8 h-8\" />,\n      description: \"Agricultural machinery and tools suited for various farming systems.\",\n      details: \"Combines, harvesters, tillage equipment, and precision agriculture tools.\",\n      color: \"from-blue-500 to-cyan-600\",\n      category: \"Technology\"\n    },\n    {\n      id: 3,\n      title: \"Innovative Financing\",\n      shortTitle: \"Finance\",\n      icon: <DollarSign className=\"w-8 h-8\" />,\n      description: \"Financial mechanisms to improve access to mechanization services.\",\n      details: \"Micro-finance, leasing schemes, and innovative payment models for farmers.\",\n      color: \"from-purple-500 to-indigo-600\",\n      category: \"Economic\"\n    },\n    {\n      id: 4,\n      title: \"Human Resources\",\n      shortTitle: \"Workforce\",\n      icon: <Users className=\"w-8 h-8\" />,\n      description: \"Capacity building and skills development for sustainable mechanization.\",\n      details: \"Training programs for farmers, technicians, and service providers.\",\n      color: \"from-orange-500 to-red-600\",\n      category: \"Social\"\n    },\n    {\n      id: 5,\n      title: \"Research & Development\",\n      shortTitle: \"R&D\",\n      icon: <GraduationCap className=\"w-8 h-8\" />,\n      description: \"Innovation and technological advancement in agricultural mechanization.\",\n      details: \"Research institutions, technology transfer, and innovation hubs.\",\n      color: \"from-teal-500 to-green-600\",\n      category: \"Innovation\"\n    },\n    {\n      id: 6,\n      title: \"Business & Service Models\",\n      shortTitle: \"Business\",\n      icon: <Building2 className=\"w-8 h-8\" />,\n      description: \"Sustainable business models for mechanization service provision.\",\n      details: \"Service centers, custom hiring, and equipment sharing models.\",\n      color: \"from-yellow-500 to-orange-600\",\n      category: \"Economic\"\n    },\n    {\n      id: 7,\n      title: \"Environmental Sustainability\",\n      shortTitle: \"Environment\",\n      icon: <Leaf className=\"w-8 h-8\" />,\n      description: \"Climate-smart and environmentally responsible mechanization practices.\",\n      details: \"Conservation agriculture, carbon footprint reduction, and soil health.\",\n      color: \"from-green-600 to-lime-600\",\n      category: \"Environmental\"\n    },\n    {\n      id: 8,\n      title: \"Social Sustainability\",\n      shortTitle: \"Social\",\n      icon: <Shield className=\"w-8 h-8\" />,\n      description: \"Inclusive mechanization that benefits all stakeholders equitably.\",\n      details: \"Gender inclusion, youth engagement, and community development.\",\n      color: \"from-pink-500 to-rose-600\",\n      category: \"Social\"\n    },\n    {\n      id: 9,\n      title: \"Value Chain Development\",\n      shortTitle: \"Value Chain\",\n      icon: <TrendingUp className=\"w-8 h-8\" />,\n      description: \"Mechanization across the entire agricultural value chain.\",\n      details: \"Post-harvest processing, storage, transportation, and marketing.\",\n      color: \"from-indigo-500 to-purple-600\",\n      category: \"Economic\"\n    },\n    {\n      id: 10,\n      title: \"Monitoring & Evaluation\",\n      shortTitle: \"M&E\",\n      icon: <BarChart3 className=\"w-8 h-8\" />,\n      description: \"Data-driven assessment of mechanization impacts and outcomes.\",\n      details: \"Performance indicators, impact assessment, and adaptive management.\",\n      color: \"from-gray-500 to-slate-600\",\n      category: \"Management\"\n    }\n  ];\n\n  return (\n    <div className=\"container mx-auto px-6\">\n      <div className=\"text-center mb-16\">\n        <h2 className=\"text-3xl md:text-4xl font-bold mb-6 text-gray-800 dark:text-gray-200\">\n          F-SAMA Framework Elements\n        </h2>\n        <p className=\"text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto\">\n          The Framework for Sustainable Agricultural Mechanization in Africa comprises \n          10 interconnected elements designed to transform farming practices across the continent.\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-6 mb-12\">\n        {frameworkElements.map((element) => (\n          <Card \n            key={element.id} \n            className=\"group relative overflow-hidden border-0 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-2\"\n          >\n            <div className={`absolute inset-0 bg-gradient-to-br ${element.color} opacity-5 group-hover:opacity-10 transition-opacity duration-300`} />\n            \n            <CardHeader className=\"text-center pb-4 relative z-10\">\n              <div className={`w-16 h-16 mx-auto mb-4 bg-gradient-to-br ${element.color} rounded-full flex items-center justify-center text-white group-hover:scale-110 transition-transform duration-300`}>\n                {element.icon}\n              </div>\n              <div className=\"space-y-2\">\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  {element.category}\n                </Badge>\n                <CardTitle className=\"text-lg leading-tight text-gray-800 dark:text-gray-200\">\n                  {element.title}\n                </CardTitle>\n              </div>\n            </CardHeader>\n            \n            <CardContent className=\"text-center pt-0 relative z-10\">\n              <p className=\"text-sm text-gray-600 dark:text-gray-300 mb-4 line-clamp-3\">\n                {element.description}\n              </p>\n              <p className=\"text-xs text-gray-500 dark:text-gray-400 mb-4\">\n                {element.details}\n              </p>\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                className={`w-full group-hover:bg-gradient-to-r group-hover:${element.color} group-hover:text-white group-hover:border-transparent transition-all duration-300`}\n              >\n                Learn More\n              </Button>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Framework Summary */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-8 border-0\">\n        <div className=\"text-center mb-8\">\n          <h3 className=\"text-2xl font-bold text-gray-800 dark:text-gray-200 mb-4\">\n            Integrated Approach\n          </h3>\n          <p className=\"text-gray-600 dark:text-gray-300 max-w-2xl mx-auto\">\n            These 10 elements work together to create a holistic framework that addresses \n            technical, economic, social, and environmental aspects of agricultural mechanization.\n          </p>\n        </div>\n        \n        <div className=\"grid md:grid-cols-3 gap-8 text-center\">\n          <div className=\"p-6\">\n            <div className=\"w-16 h-16 mx-auto mb-4 bg-gradient-to-br from-green-500 to-blue-500 rounded-full flex items-center justify-center text-white\">\n              <Cog className=\"w-8 h-8\" />\n            </div>\n            <h4 className=\"text-lg font-semibold text-gray-800 dark:text-gray-200 mb-2\">\n              Technical Excellence\n            </h4>\n            <p className=\"text-gray-600 dark:text-gray-300 text-sm\">\n              Advanced machinery, power systems, and innovative technologies\n            </p>\n          </div>\n          \n          <div className=\"p-6\">\n            <div className=\"w-16 h-16 mx-auto mb-4 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center text-white\">\n              <Users className=\"w-8 h-8\" />\n            </div>\n            <h4 className=\"text-lg font-semibold text-gray-800 dark:text-gray-200 mb-2\">\n              Social Impact\n            </h4>\n            <p className=\"text-gray-600 dark:text-gray-300 text-sm\">\n              Inclusive development, capacity building, and community engagement\n            </p>\n          </div>\n          \n          <div className=\"p-6\">\n            <div className=\"w-16 h-16 mx-auto mb-4 bg-gradient-to-br from-green-500 to-teal-500 rounded-full flex items-center justify-center text-white\">\n              <Leaf className=\"w-8 h-8\" />\n            </div>\n            <h4 className=\"text-lg font-semibold text-gray-800 dark:text-gray-200 mb-2\">\n              Sustainability\n            </h4>\n            <p className=\"text-gray-600 dark:text-gray-300 text-sm\">\n              Environmental stewardship and long-term viability\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};","size_bytes":9228},"client/src/components/Header.jsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useApp } from \"../contexts/AppContext\";\nimport { LanguageToggle } from \"./LanguageToggle\";\nimport { ThemeToggle } from \"./ThemeToggle\";\nimport { UserMenu } from \"./auth/UserMenu\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n// import {\n//   Dialog,\n//   DialogContent,\n//   DialogDescription,\n//   DialogHeader,\n//   DialogTitle,\n//   DialogTrigger,\n// } from \"@/components/ui/dialog\";\nimport {\n  Sprout,\n  Menu,\n  X,\n  LogIn,\n  UserPlus,\n  ChevronDown,\n  Search,\n  Globe,\n  Users,\n  Calendar,\n  BookOpen,\n  Bell,\n  Star,\n} from \"lucide-react\";\n\nexport const Header = () => {\n  const [location] = useLocation();\n  const { mobileMenuOpen, setMobileMenuOpen, scrollProgress } = useApp();\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [searchOpen, setSearchOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { isAuthenticated, user, isLoading } = useAuth();\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 50);\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  const navItems = [\n    { href: \"/\", label: \"Home\" },\n    {\n      href: \"/framework\",\n      label: \"Framework\",\n      dropdown: [\n        { href: \"/framework/farm-power\", label: \"Farm Power\" },\n        {\n          href: \"/framework/innovative-financing\",\n          label: \"Innovative Financing\",\n        },\n        {\n          href: \"/framework/sustainable-systems\",\n          label: \"Sustainable Systems\",\n        },\n        {\n          href: \"/framework/mechanization\",\n          label: \"Sustainable Mechanization\",\n        },\n        {\n          href: \"/framework/social-sustainability\",\n          label: \"Social Sustainability\",\n        },\n        { href: \"/framework/human-resources\", label: \"Human Resources\" },\n      ],\n    },\n    {\n      href: \"/webinars\",\n      label: \"Webinars\",\n      dropdown: [\n        { href: \"/webinars\", label: \"All Webinars\" },\n        { href: \"/webinars/upcoming\", label: \"Upcoming\" },\n        { href: \"/webinars/presentations\", label: \"Downloads\" },\n      ],\n    },\n    { href: \"/news\", label: \"News\" },\n    { href: \"/resources\", label: \"Resources\" },\n    { href: \"/about\", label: \"About\" },\n    { href: \"/contact\", label: \"Contact\" },\n  ];\n\n  const quickSearchResults = [\n    { title: \"F-SAMA Framework\", href: \"/resources\", type: \"Document\" },\n    { title: \"Upcoming Webinars\", href: \"/webinars/upcoming\", type: \"Events\" },\n    {\n      title: \"Farm Power Solutions\",\n      href: \"/framework/farm-power\",\n      type: \"Framework\",\n    },\n    { title: \"Latest Newsletter\", href: \"/resources\", type: \"Publication\" },\n  ];\n\n  const handleSearch = (e) => {\n    e.preventDefault();\n    if (searchTerm.trim()) {\n      window.location.href = `/resources?search=${encodeURIComponent(searchTerm)}`;\n      setSearchOpen(false);\n      setSearchTerm(\"\");\n    }\n  };\n\n  return (\n    <>\n      {/* Scroll Progress Indicator */}\n      <div\n        className=\"fixed top-0 left-0 w-full h-1 bg-gradient-to-r from-primary via-secondary to-primary z-50 transform-gpu transition-transform duration-300\"\n        style={{\n          transform: `scaleX(${scrollProgress / 100})`,\n          transformOrigin: \"left\",\n        }}\n      />\n\n      {/* Compact Announcement Bar */}\n      <div className=\"bg-gradient-to-r from-primary to-secondary text-white text-center py-1 text-xs relative z-40\">\n        <div className=\"container mx-auto px-4 flex items-center justify-center gap-2\">\n          <div className=\"w-1.5 h-1.5 bg-red-400 rounded-full animate-pulse\"></div>\n          <span>\n            Join our next webinar on Agricultural Mechanization - Register now!\n          </span>\n          <Link\n            href=\"/webinars/upcoming\"\n            className=\"underline hover:no-underline\"\n          >\n            Learn More\n          </Link>\n        </div>\n      </div>\n\n      <header\n        className={`fixed top-6 w-full z-40 transition-all duration-300 ${\n          isScrolled\n            ? \"bg-white/95 dark:bg-gray-900/95 backdrop-blur-md shadow-xl border-b border-gray-200/50 dark:border-gray-700/50\"\n            : \"bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm shadow-lg\"\n        }`}\n      >\n        <nav className=\"container mx-auto px-4 py-3\">\n          <div className=\"flex items-center justify-between\">\n            {/* Compact Logo */}\n            <Link href=\"/\" className=\"flex items-center space-x-2 group\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-secondary rounded-lg flex items-center justify-center group-hover:scale-105 transition-all duration-300\">\n                <Sprout className=\"text-white\" size={20} />\n              </div>\n              <div className=\"hidden sm:block\">\n                <h1 className=\"text-lg font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n                  AfricaMechanize\n                </h1>\n              </div>\n            </Link>\n\n            {/* Compact Desktop Navigation */}\n            <div className=\"hidden lg:flex items-center space-x-1\">\n              {navItems.map((item) => {\n                const isActive =\n                  location === item.href ||\n                  (item.dropdown &&\n                    item.dropdown.some((sub) => location === sub.href));\n\n                if (item.dropdown) {\n                  return (\n                    <DropdownMenu key={item.label}>\n                      <DropdownMenuTrigger asChild>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className={`font-medium ${\n                            isActive\n                              ? \"text-primary\"\n                              : \"text-gray-700 dark:text-gray-300 hover:text-primary\"\n                          }`}\n                        >\n                          {item.label}\n                          <ChevronDown className=\"ml-1 h-3 w-3\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"start\" className=\"w-56\">\n                        {item.dropdown.map((dropdownItem) => (\n                          <DropdownMenuItem key={dropdownItem.href} asChild>\n                            <Link\n                              href={dropdownItem.href}\n                              className=\"cursor-pointer\"\n                            >\n                              {dropdownItem.label}\n                            </Link>\n                          </DropdownMenuItem>\n                        ))}\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  );\n                }\n\n                return (\n                  <Link\n                    key={item.href}\n                    href={item.href}\n                    className={`px-3 py-2 text-sm font-medium transition-colors rounded-md ${\n                      isActive\n                        ? \"text-primary bg-primary/10\"\n                        : \"text-gray-700 dark:text-gray-300 hover:text-primary hover:bg-primary/5\"\n                    }`}\n                  >\n                    {item.label}\n                  </Link>\n                );\n              })}\n            </div>\n\n            {/* Compact Controls */}\n            <div className=\"flex items-center space-x-1\">\n              {/* Search - Desktop only */}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"hidden xl:flex\"\n                onClick={() => (window.location.href = \"/resources\")}\n                data-testid=\"button-search\"\n              >\n                <Search className=\"w-4 h-4\" />\n              </Button>\n\n              <LanguageToggle />\n              <ThemeToggle />\n\n              {/* Authentication */}\n              {!isLoading && (\n                <div className=\"hidden lg:flex items-center space-x-1\">\n                  {isAuthenticated ? (\n                    <UserMenu />\n                  ) : (\n                    <>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        asChild\n                        data-testid=\"button-header-login\"\n                      >\n                        <Link href=\"/login\">\n                          <LogIn className=\"w-4 h-4 lg:mr-1\" />\n                          <span className=\"hidden xl:inline\">Sign In</span>\n                        </Link>\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        asChild\n                        data-testid=\"button-header-register\"\n                      >\n                        <Link href=\"/register\">\n                          <UserPlus className=\"w-4 h-4 lg:mr-1\" />\n                          <span className=\"hidden xl:inline\">Join</span>\n                        </Link>\n                      </Button>\n                    </>\n                  )}\n                </div>\n              )}\n\n              {/* Mobile Menu Toggle */}\n              <button\n                onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n                className=\"lg:hidden p-2 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors\"\n                data-testid=\"button-mobile-menu\"\n              >\n                {mobileMenuOpen ? <X size={18} /> : <Menu size={18} />}\n              </button>\n            </div>\n          </div>\n\n          {/* Improved Mobile Menu */}\n          {mobileMenuOpen && (\n            <div className=\"lg:hidden mt-4 pb-4 border-t border-gray-200 dark:border-gray-700\">\n              <div className=\"max-h-[70vh] overflow-y-auto\">\n                {/* Mobile Search */}\n                <div className=\"p-4 border-b border-gray-200 dark:border-gray-700\">\n                  <Link\n                    href=\"/resources\"\n                    onClick={() => setMobileMenuOpen(false)}\n                    className=\"flex items-center gap-2 p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors\"\n                  >\n                    <Search className=\"w-4 h-4 text-gray-500\" />\n                    <span className=\"text-gray-700 dark:text-gray-300\">\n                      Search Resources\n                    </span>\n                  </Link>\n                </div>\n\n                <div className=\"p-4 space-y-1\">\n                  {navItems.map((item) => {\n                    const isActive =\n                      location === item.href ||\n                      (item.dropdown &&\n                        item.dropdown.some((sub) => location === sub.href));\n\n                    if (item.dropdown) {\n                      return (\n                        <div key={item.label} className=\"space-y-1\">\n                          <div\n                            className={`p-3 rounded-lg font-medium ${\n                              isActive\n                                ? \"bg-primary/10 text-primary\"\n                                : \"text-gray-700 dark:text-gray-300\"\n                            }`}\n                          >\n                            {item.label}\n                          </div>\n                          <div className=\"ml-4 space-y-1\">\n                            {item.dropdown.map((subItem) => (\n                              <Link\n                                key={subItem.href}\n                                href={subItem.href}\n                                className={`block p-2 rounded-md text-sm transition-colors ${\n                                  location === subItem.href\n                                    ? \"bg-primary/10 text-primary font-medium\"\n                                    : \"text-gray-600 dark:text-gray-400 hover:text-primary hover:bg-primary/5\"\n                                }`}\n                                onClick={() => setMobileMenuOpen(false)}\n                              >\n                                {subItem.label}\n                              </Link>\n                            ))}\n                          </div>\n                        </div>\n                      );\n                    }\n\n                    return (\n                      <Link\n                        key={item.href}\n                        href={item.href}\n                        className={`block p-3 rounded-lg font-medium transition-colors ${\n                          isActive\n                            ? \"bg-primary/10 text-primary\"\n                            : \"text-gray-700 dark:text-gray-300 hover:text-primary hover:bg-primary/5\"\n                        }`}\n                        onClick={() => setMobileMenuOpen(false)}\n                      >\n                        {item.label}\n                      </Link>\n                    );\n                  })}\n\n                  {/* Mobile Authentication */}\n                  {!isLoading && (\n                    <div className=\"border-t border-gray-200 dark:border-gray-700 pt-4 mt-4 space-y-2\">\n                      {isAuthenticated ? (\n                        <div className=\"space-y-2\">\n                          <div className=\"p-3 bg-primary/5 rounded-lg\">\n                            <div className=\"font-medium text-sm\">\n                              {user?.firstName || user?.email}\n                            </div>\n                          </div>\n                          <Link\n                            href=\"/profile\"\n                            onClick={() => setMobileMenuOpen(false)}\n                            className=\"block p-2 rounded-lg text-gray-700 dark:text-gray-300 hover:text-primary hover:bg-primary/5 transition-colors\"\n                            data-testid=\"mobile-link-profile\"\n                          >\n                            Profile\n                          </Link>\n                        </div>\n                      ) : (\n                        <div className=\"space-y-2\">\n                          <Link\n                            href=\"/login\"\n                            onClick={() => setMobileMenuOpen(false)}\n                            className=\"block p-3 text-center bg-primary text-white rounded-lg font-medium\"\n                            data-testid=\"mobile-button-login\"\n                          >\n                            Sign In\n                          </Link>\n                          <Link\n                            href=\"/register\"\n                            onClick={() => setMobileMenuOpen(false)}\n                            className=\"block p-3 text-center border border-primary text-primary rounded-lg font-medium\"\n                            data-testid=\"mobile-button-register\"\n                          >\n                            Join Now\n                          </Link>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n        </nav>\n      </header>\n    </>\n  );\n};\n","size_bytes":15468},"client/src/components/Hero.jsx":{"content":"import { useState, useEffect } from \"react\";\nimport { ChevronDown, Play, Sparkles, Leaf, Tractor } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport const Hero = () => {\n  const [isVisible, setIsVisible] = useState(false);\n  const [particles, setParticles] = useState([]);\n\n  useEffect(() => {\n    setIsVisible(true);\n    \n    // Create floating particles\n    const newParticles = [];\n    for (let i = 0; i < 20; i++) {\n      newParticles.push({\n        id: i,\n        x: Math.random() * 100,\n        y: Math.random() * 100,\n        size: Math.random() * 4 + 2,\n        delay: Math.random() * 2,\n        duration: Math.random() * 3 + 2,\n      });\n    }\n    setParticles(newParticles);\n  }, []);\n\n  const scrollToFramework = () => {\n    const element = document.getElementById(\"framework\");\n    if (element) {\n      element.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  return (\n    <section className=\"relative min-h-screen flex items-center justify-center overflow-hidden\">\n      {/* Hero Background with Gradient Overlay */}\n      <div \n        className=\"absolute inset-0 bg-cover bg-center bg-fixed\"\n        style={{\n          backgroundImage: `url('https://images.unsplash.com/photo-1586771107445-d3ca888129ff?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1920&h=1080')`\n        }}\n      >\n        <div className=\"absolute inset-0 bg-gradient-to-br from-primary/80 via-black/60 to-secondary/80\"></div>\n      </div>\n\n      {/* Floating Particles */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        {particles.map((particle) => (\n          <div\n            key={particle.id}\n            className=\"absolute w-2 h-2 bg-white/20 rounded-full animate-pulse\"\n            style={{\n              left: `${particle.x}%`,\n              top: `${particle.y}%`,\n              animationDelay: `${particle.delay}s`,\n              animationDuration: `${particle.duration}s`,\n            }}\n          />\n        ))}\n      </div>\n\n      {/* Geometric Shapes */}\n      <div className=\"absolute inset-0\">\n        <div className=\"absolute top-20 left-10 w-20 h-20 border-2 border-white/20 rounded-full animate-spin\" style={{ animationDuration: '20s' }} />\n        <div className=\"absolute top-40 right-20 w-16 h-16 border-2 border-secondary/30 transform rotate-45 animate-pulse\" />\n        <div className=\"absolute bottom-32 left-20 w-12 h-12 bg-white/10 rounded-full animate-bounce\" style={{ animationDelay: '1s' }} />\n        <div className=\"absolute bottom-20 right-32 w-8 h-8 bg-primary/20 transform rotate-45 animate-pulse\" style={{ animationDelay: '2s' }} />\n      </div>\n      \n      {/* Hero Content */}\n      <div className=\"relative z-10 text-center text-white px-6 max-w-6xl mx-auto\">\n        {/* Floating Icons */}\n        <div className=\"absolute -top-20 left-0 right-0 flex justify-center space-x-8\">\n          <div className=\"animate-float\" style={{ animationDelay: '0s' }}>\n            <Leaf className=\"text-primary w-8 h-8 opacity-60\" />\n          </div>\n          <div className=\"animate-float\" style={{ animationDelay: '1s' }}>\n            <Tractor className=\"text-secondary w-10 h-10 opacity-70\" />\n          </div>\n          <div className=\"animate-float\" style={{ animationDelay: '2s' }}>\n            <Sparkles className=\"text-accent w-6 h-6 opacity-50\" />\n          </div>\n        </div>\n\n        <div className=\"mb-8\">\n          <div className=\"inline-block px-4 py-2 bg-white/10 backdrop-blur-sm rounded-full border border-white/20 mb-6\">\n            <p className=\"text-white/90 text-sm font-medium\">\n              🌱 Sustainable Agricultural Mechanization Framework\n            </p>\n          </div>\n        </div>\n\n        <h1 \n          className={`text-4xl sm:text-5xl md:text-6xl lg:text-7xl font-bold mb-6 transition-all duration-1000 ${\n            isVisible ? \"opacity-100 translate-y-0\" : \"opacity-0 translate-y-10\"\n          }`}\n        >\n          <span className=\"block bg-gradient-to-r from-white to-white/80 bg-clip-text text-transparent\">\n            Transforming\n          </span>\n          <span className=\"block bg-gradient-to-r from-secondary to-warning bg-clip-text text-transparent sm:inline sm:ml-4\">\n            Agriculture\n          </span>\n          <span className=\"block bg-gradient-to-r from-white to-white/80 bg-clip-text text-transparent\">\n            in Africa\n          </span>\n        </h1>\n        \n        <p \n          className={`text-lg sm:text-xl md:text-2xl mb-8 opacity-90 max-w-4xl mx-auto transition-all duration-1000 delay-300 leading-relaxed ${\n            isVisible ? \"opacity-90 translate-y-0\" : \"opacity-0 translate-y-10\"\n          }`}\n        >\n          Empowering farmers through innovative mechanization solutions, sustainable practices, and collaborative networks across the continent\n        </p>\n        \n        <div \n          className={`flex flex-col sm:flex-row gap-4 justify-center mb-16 transition-all duration-1000 delay-500 ${\n            isVisible ? \"opacity-100 translate-y-0\" : \"opacity-0 translate-y-10\"\n          }`}\n        >\n          <Button\n            size=\"lg\"\n            onClick={scrollToFramework}\n            className=\"bg-gradient-to-r from-primary to-primary/90 hover:from-primary/90 hover:to-primary text-white px-8 py-4 rounded-full font-semibold transition-all duration-300 transform hover:scale-105 shadow-2xl hover:shadow-primary/25\"\n          >\n            <Sparkles className=\"mr-2 w-5 h-5\" />\n            Explore F-SAMA Framework\n          </Button>\n          <Button\n            size=\"lg\"\n            variant=\"outline\"\n            className=\"border-2 border-white/50 text-white hover:bg-white/20 hover:border-white backdrop-blur-sm px-8 py-4 rounded-full font-semibold transition-all duration-300 hover:scale-105\"\n          >\n            <Play className=\"mr-2 w-5 h-5\" />\n            Watch Introduction\n          </Button>\n        </div>\n\n        {/* Feature Pills */}\n        <div className={`flex flex-wrap gap-3 justify-center mb-12 transition-all duration-1000 delay-700 ${\n          isVisible ? \"opacity-100 translate-y-0\" : \"opacity-0 translate-y-10\"\n        }`}>\n          {[\"10 Key Elements\", \"25+ Countries\", \"Expert Network\", \"Sustainable Future\"].map((pill, index) => (\n            <div \n              key={pill}\n              className=\"px-4 py-2 bg-white/10 backdrop-blur-sm rounded-full border border-white/20 text-white/90 text-sm font-medium hover:bg-white/20 transition-all duration-300 cursor-pointer\"\n              style={{ animationDelay: `${index * 0.1}s` }}\n            >\n              {pill}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Enhanced Scroll Indicator */}\n      <div \n        className={`absolute bottom-8 left-1/2 transform -translate-x-1/2 cursor-pointer transition-all duration-1000 delay-700 group ${\n          isVisible ? \"opacity-100 translate-y-0\" : \"opacity-0 translate-y-10\"\n        }`}\n        onClick={scrollToFramework}\n      >\n        <div className=\"flex flex-col items-center space-y-2\">\n          <div className=\"w-6 h-10 border-2 border-white/60 rounded-full flex justify-center group-hover:border-white transition-colors duration-300\">\n            <div className=\"w-1 h-3 bg-white/80 rounded-full mt-2 animate-pulse group-hover:bg-white transition-colors duration-300\"></div>\n          </div>\n          <ChevronDown className=\"text-white/80 group-hover:text-white transition-colors duration-300 animate-bounce\" size={24} />\n          <p className=\"text-white/60 text-xs font-medium group-hover:text-white/80 transition-colors duration-300\">\n            Scroll to explore\n          </p>\n        </div>\n      </div>\n    </section>\n  );\n};\n","size_bytes":7712},"client/src/components/LanguageToggle.jsx":{"content":"import { useApp } from \"../contexts/AppContext\";\n\nexport const LanguageToggle = () => {\n  const { language, setLanguage } = useApp();\n\n  return (\n    <div className=\"hidden md:flex items-center space-x-2\">\n      <button\n        onClick={() => setLanguage(\"en\")}\n        className={`px-3 py-1 rounded text-sm font-medium transition-all duration-300 ${\n          language === \"en\"\n            ? \"text-primary bg-primary/10\"\n            : \"text-gray-600 dark:text-gray-400 hover:text-primary\"\n        }`}\n      >\n        EN\n      </button>\n      <span className=\"text-gray-400\">|</span>\n      <button\n        onClick={() => setLanguage(\"fr\")}\n        className={`px-3 py-1 rounded text-sm font-medium transition-all duration-300 ${\n          language === \"fr\"\n            ? \"text-primary bg-primary/10\"\n            : \"text-gray-600 dark:text-gray-400 hover:text-primary\"\n        }`}\n      >\n        FR\n      </button>\n    </div>\n  );\n};\n","size_bytes":934},"client/src/components/NewsEvents.jsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar, ExternalLink, Clock, MapPin, Users, ArrowRight } from \"lucide-react\";\n\nexport const NewsEvents = () => {\n  const { data: events, isLoading } = useQuery({\n    queryKey: [\"/api/events\"],\n    enabled: true,\n  });\n\n  // Default events if API doesn't return data\n  const defaultEvents = [\n    {\n      id: 1,\n      title: \"Sustainable Farm Power for Enhanced Productivity\",\n      description: \"FAO & CEMA Hybrid Event exploring innovative solutions for agricultural power systems and mechanization technologies for African farmers\",\n      date: \"2024-06-04\",\n      type: \"event\",\n      participants: 850,\n      imageUrl: \"https://images.unsplash.com/photo-1625246333195-78d9c38ad449?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=400\"\n    },\n    {\n      id: 2,\n      title: \"FAO Global Conference On Sustainable Agricultural Mechanization\",\n      description: \"Global leaders discuss the future of sustainable agricultural mechanization with a focus on the F-SAMA framework implementation\",\n      date: \"2023-09-29\",\n      type: \"conference\",\n      participants: 1200,\n      imageUrl: \"https://images.unsplash.com/photo-1581091226825-a6a2a5aee158?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=400\"\n    },\n    {\n      id: 3,\n      title: \"Uganda Regional Experience Sharing Meeting\",\n      description: \"SAM hire service provision and regional cooperation initiatives focusing on smallholder farmer access to mechanization\",\n      date: \"2019-12-09\",\n      type: \"meeting\",\n      participants: 320,\n      imageUrl: \"https://images.unsplash.com/photo-1556075798-4825dfaaf498?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=400\"\n    },\n    {\n      id: 4,\n      title: \"Webinar 12: Revamping Manufacturing of Agricultural Machinery\",\n      description: \"Interactive webinar featuring industry experts discussing strategies for revitalizing agricultural machinery manufacturing in Africa\",\n      date: \"2024-03-15\",\n      type: \"webinar\",\n      participants: 680,\n      imageUrl: \"https://images.unsplash.com/photo-1560472354-b33ff0c44a43?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=400\"\n    },\n    {\n      id: 5,\n      title: \"Women in Agricultural Mechanization Summit\",\n      description: \"Empowering women entrepreneurs in agricultural mechanization with success stories and capacity building sessions\",\n      date: \"2024-02-20\",\n      type: \"conference\",\n      participants: 540,\n      imageUrl: \"https://images.unsplash.com/photo-1594608661623-2d8c4f7b7ef0?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=400\"\n    },\n    {\n      id: 6,\n      title: \"Youth Engagement in Agricultural Technology\",\n      description: \"Engaging young entrepreneurs in agricultural mechanization through innovation challenges and mentorship programs\",\n      date: \"2024-01-18\",\n      type: \"workshop\",\n      participants: 420,\n      imageUrl: \"https://images.unsplash.com/photo-1523240795612-9a054b0db644?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=400\"\n    },\n    {\n      id: 7,\n      title: \"Digital Agriculture and Smart Farming Symposium\",\n      description: \"Exploring the intersection of digital technology and agricultural mechanization for enhanced productivity and sustainability\",\n      date: \"2023-12-10\",\n      type: \"conference\",\n      participants: 920,\n      imageUrl: \"https://images.unsplash.com/photo-1518186285589-2f7649de83e0?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=400\"\n    },\n    {\n      id: 8,\n      title: \"Webinar 11: Sustainable Financing for Agricultural Machinery\",\n      description: \"Discussion on innovative financing mechanisms for smallholder farmers to access agricultural machinery and equipment\",\n      date: \"2024-04-22\",\n      type: \"webinar\",\n      participants: 750,\n      imageUrl: \"https://images.unsplash.com/photo-1563013544-824ae1b704d3?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=400\"\n    }\n  ];\n\n  const eventsData = events || defaultEvents;\n\n  if (isLoading) {\n    return (\n      <section className=\"py-20 bg-gray-50 dark:bg-gray-900\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-5xl font-bold mb-6 bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n              Latest News & Events\n            </h2>\n            <p className=\"text-xl text-gray-600 dark:text-gray-400 max-w-3xl mx-auto\">\n              Stay updated with the latest developments in agricultural mechanization across Africa\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {Array.from({ length: 3 }).map((_, i) => (\n              <Card key={i} className=\"overflow-hidden animate-pulse\">\n                <div className=\"w-full h-48 bg-gray-200\"></div>\n                <CardContent className=\"p-6\">\n                  <div className=\"w-20 h-6 bg-gray-200 rounded mb-4\"></div>\n                  <div className=\"w-full h-6 bg-gray-200 rounded mb-3\"></div>\n                  <div className=\"w-full h-16 bg-gray-200 rounded mb-4\"></div>\n                  <div className=\"w-24 h-4 bg-gray-200 rounded\"></div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  const formatDate = (dateString) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: '2-digit'\n    });\n  };\n\n  const getTypeColor = (type) => {\n    switch (type) {\n      case 'event': return 'bg-primary';\n      case 'conference': return 'bg-secondary';\n      case 'meeting': return 'bg-accent';\n      case 'webinar': return 'bg-blue-500';\n      case 'workshop': return 'bg-purple-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getTypeGradient = (type) => {\n    switch (type) {\n      case 'event': return 'from-primary to-success';\n      case 'conference': return 'from-secondary to-warning';\n      case 'meeting': return 'from-accent to-primary';\n      case 'webinar': return 'from-blue-500 to-cyan-500';\n      case 'workshop': return 'from-purple-500 to-pink-500';\n      default: return 'from-gray-500 to-gray-700';\n    }\n  };\n\n  return (\n    <section id=\"events\" className=\"py-20 bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800 relative overflow-hidden\">\n      {/* Background decorations */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        <div className=\"absolute top-32 left-16 w-48 h-48 bg-primary/5 rounded-full blur-3xl\" />\n        <div className=\"absolute bottom-32 right-16 w-60 h-60 bg-secondary/5 rounded-full blur-3xl\" />\n        <div className=\"absolute top-20 right-32 w-36 h-36 bg-accent/5 rounded-full blur-2xl\" />\n      </div>\n\n      <div className=\"container mx-auto px-6 relative z-10\">\n        <div className=\"text-center mb-16 animate-fade-in-up\">\n          <div className=\"inline-block px-4 py-2 bg-secondary/10 rounded-full mb-4\">\n            <p className=\"text-secondary font-semibold text-sm\">UPCOMING EVENTS</p>\n          </div>\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-6 bg-gradient-to-r from-primary via-secondary to-accent bg-clip-text text-transparent\">\n            Latest News & Events\n          </h2>\n          <p className=\"text-xl text-gray-600 dark:text-gray-400 max-w-4xl mx-auto leading-relaxed\">\n            Stay updated with the latest developments, conferences, and networking opportunities in \n            <span className=\"font-semibold text-primary\"> agricultural mechanization</span> across Africa\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {eventsData.map((event, index) => (\n            <Card \n              key={event.id}\n              className=\"group overflow-hidden transition-all duration-500 hover:shadow-2xl hover:-translate-y-4 hover:rotate-1 bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm border-0 animate-fade-in-up\"\n              style={{ animationDelay: `${index * 0.2}s` }}\n            >\n              <div className=\"relative overflow-hidden\">\n                <img \n                  src={event.imageUrl} \n                  alt={event.title}\n                  className=\"w-full h-48 object-cover group-hover:scale-110 transition-transform duration-500\"\n                />\n                <div className=\"absolute inset-0 bg-gradient-to-t from-black/50 to-transparent\" />\n                \n                {/* Date Badge */}\n                <div className=\"absolute top-4 left-4\">\n                  <Badge className={`${getTypeColor(event.type)} text-white shadow-lg`}>\n                    <Calendar className=\"mr-1 w-3 h-3\" />\n                    {formatDate(event.date)}\n                  </Badge>\n                </div>\n\n                {/* Event Type Badge */}\n                <div className=\"absolute top-4 right-4\">\n                  <div className={`px-3 py-1 bg-gradient-to-r ${getTypeGradient(event.type)} text-white text-xs font-semibold rounded-full shadow-lg capitalize`}>\n                    {event.type}\n                  </div>\n                </div>\n\n                {/* Glow effect */}\n                <div className=\"absolute inset-0 bg-gradient-to-br from-primary/10 to-secondary/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500\" />\n              </div>\n              \n              <CardContent className=\"p-6 relative\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"flex items-center text-gray-500 dark:text-gray-400 text-sm\">\n                    <Clock className=\"mr-1 w-4 h-4\" />\n                    <span>{formatDate(event.date)}</span>\n                  </div>\n                  <div className=\"flex items-center text-gray-500 dark:text-gray-400 text-sm\">\n                    <Users className=\"mr-1 w-4 h-4\" />\n                    <span>{event.participants || 0} participants</span>\n                  </div>\n                </div>\n                \n                <h3 className=\"text-xl font-bold mb-3 text-gray-800 dark:text-white line-clamp-2 group-hover:text-primary transition-colors duration-300\">\n                  {event.title}\n                </h3>\n                \n                <p className=\"text-gray-600 dark:text-gray-400 mb-6 line-clamp-3 leading-relaxed\">\n                  {event.description}\n                </p>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center text-gray-500 dark:text-gray-400 text-sm\">\n                    <MapPin className=\"mr-1 w-4 h-4\" />\n                    <span>Global</span>\n                  </div>\n                  \n                  <Button \n                    variant=\"ghost\" \n                    className=\"p-0 text-primary hover:text-primary/80 font-semibold group-hover:bg-primary/10 transition-all duration-300\"\n                  >\n                    Learn More <ArrowRight className=\"ml-2 w-4 h-4 group-hover:translate-x-1 transition-transform duration-300\" />\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Call to Action */}\n        <div className=\"text-center mt-12\">\n          <div className=\"inline-flex items-center space-x-4 bg-white/60 dark:bg-gray-800/60 backdrop-blur-sm rounded-full px-8 py-4 shadow-lg\">\n            <p className=\"text-gray-700 dark:text-gray-300 font-medium\">\n              Want to stay informed about upcoming events?\n            </p>\n            <Button className=\"bg-gradient-to-r from-secondary to-warning hover:from-secondary/90 hover:to-warning/90 text-white rounded-full px-6\">\n              <Calendar className=\"mr-2 w-4 h-4\" />\n              Subscribe to Updates\n            </Button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n","size_bytes":12468},"client/src/components/NewsletterSignup.jsx":{"content":"import { useState } from \"react\";\nimport { useApp } from \"../contexts/AppContext\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Mail, CheckCircle } from \"lucide-react\";\n\nexport const NewsletterSignup = () => {\n  const { language } = useApp();\n  const { toast } = useToast();\n  const [email, setEmail] = useState(\"\");\n  const [isSubscribed, setIsSubscribed] = useState(false);\n\n  const subscribeMutation = useMutation({\n    mutationFn: async (data) => {\n      const response = await fetch('/api/newsletter/subscribe', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Subscription failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      setIsSubscribed(true);\n      setEmail(\"\");\n      toast({\n        title: \"Success!\",\n        description: \"You've been subscribed to our newsletter.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    \n    if (!email) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter your email address.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    subscribeMutation.mutate({\n      email,\n      language,\n      preferences: {\n        newsletter: true,\n        events: true,\n        resources: true,\n      },\n    });\n  };\n\n  if (isSubscribed) {\n    return (\n      <section className=\"py-20 bg-gradient-to-r from-primary to-secondary relative overflow-hidden\">\n        <div className=\"absolute inset-0 opacity-10\">\n          <img \n            src=\"https://images.unsplash.com/photo-1574943320219-553eb213f72d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1920&h=1080\" \n            alt=\"Agricultural sustainability\" \n            className=\"w-full h-full object-cover\"\n          />\n        </div>\n        \n        <div className=\"container mx-auto px-6 relative z-10\">\n          <div className=\"text-center text-white\">\n            <CheckCircle className=\"mx-auto mb-6 text-white\" size={64} />\n            <h2 className=\"text-4xl md:text-5xl font-bold mb-6\">\n              Thank You!\n            </h2>\n            <p className=\"text-xl mb-8 opacity-90 max-w-2xl mx-auto\">\n              You've successfully joined our newsletter. Stay tuned for the latest updates on sustainable agricultural mechanization in Africa.\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button \n                onClick={() => setIsSubscribed(false)}\n                className=\"bg-white text-primary hover:bg-gray-100 px-8 py-4 rounded-full font-semibold transition-all duration-300\"\n              >\n                Subscribe Another Email\n              </Button>\n              <Button \n                variant=\"outline\"\n                className=\"border-2 border-white text-white hover:bg-white hover:text-primary px-8 py-4 rounded-full font-semibold transition-all duration-300\"\n              >\n                Explore Resources\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"py-20 bg-gradient-to-r from-primary to-secondary relative overflow-hidden\">\n      <div className=\"absolute inset-0 opacity-10\">\n        <img \n          src=\"https://images.unsplash.com/photo-1574943320219-553eb213f72d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1920&h=1080\" \n          alt=\"Agricultural sustainability\" \n          className=\"w-full h-full object-cover\"\n        />\n      </div>\n      \n      <div className=\"container mx-auto px-6 relative z-10\">\n        <div className=\"text-center text-white\">\n          <Mail className=\"mx-auto mb-6 text-white\" size={64} />\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-6\">\n            Join the Movement\n          </h2>\n          <p className=\"text-xl mb-8 opacity-90 max-w-2xl mx-auto\">\n            Be part of the transformation of African agriculture through sustainable mechanization\n          </p>\n          \n          {/* Newsletter Signup */}\n          <form onSubmit={handleSubmit} className=\"max-w-md mx-auto mb-8\">\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <Input\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                placeholder=\"Enter your email\"\n                className=\"flex-1 px-6 py-4 rounded-full text-gray-800 placeholder-gray-500 border-none outline-none\"\n                disabled={subscribeMutation.isPending}\n              />\n              <Button\n                type=\"submit\"\n                disabled={subscribeMutation.isPending}\n                className=\"bg-secondary hover:bg-secondary/90 text-white px-8 py-4 rounded-full font-semibold transition-all duration-300 whitespace-nowrap\"\n              >\n                {subscribeMutation.isPending ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2\"></div>\n                    Subscribing...\n                  </>\n                ) : (\n                  \"Subscribe\"\n                )}\n              </Button>\n            </div>\n          </form>\n\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button \n              className=\"bg-white text-primary hover:bg-gray-100 px-8 py-4 rounded-full font-semibold transition-all duration-300\"\n            >\n              Get Involved\n            </Button>\n            <Button \n              variant=\"outline\"\n              className=\"border-2 border-white text-white hover:bg-white hover:text-primary px-8 py-4 rounded-full font-semibold transition-all duration-300\"\n            >\n              Contact Us\n            </Button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n","size_bytes":6386},"client/src/components/ReadingMaterials.jsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { BookOpen, Download, Clock, User, Eye, Star, ArrowRight } from \"lucide-react\";\n\nexport const ReadingMaterials = () => {\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n\n  const readingMaterials = [\n    {\n      id: 1,\n      title: \"The F-SAMA Framework: A Comprehensive Guide\",\n      description: \"Complete overview of the Framework for Sustainable Agricultural Mechanization in Africa, covering all 10 essential elements for transforming agricultural practices.\",\n      category: \"framework\",\n      author: \"FAO Agricultural Development Team\",\n      readTime: \"45 min\",\n      difficulty: \"Intermediate\",\n      downloadCount: 3200,\n      rating: 4.8,\n      coverImage: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=300\",\n      tags: [\"F-SAMA\", \"Framework\", \"Implementation\", \"Guidelines\"]\n    },\n    {\n      id: 2,\n      title: \"Smallholder Mechanization Success Stories\",\n      description: \"Real-world case studies from across Africa showcasing how smallholder farmers have successfully adopted agricultural mechanization technologies.\",\n      category: \"case-study\",\n      author: \"Dr. Sarah Mwangi, Kenya Agricultural Research Institute\",\n      readTime: \"35 min\",\n      difficulty: \"Beginner\",\n      downloadCount: 2800,\n      rating: 4.9,\n      coverImage: \"https://images.unsplash.com/photo-1594608661623-2d8c4f7b7ef0?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=300\",\n      tags: [\"Case Studies\", \"Smallholder\", \"Success\", \"Implementation\"]\n    },\n    {\n      id: 3,\n      title: \"Agricultural Machinery Maintenance Manual\",\n      description: \"Essential maintenance practices for agricultural equipment in African conditions, including preventive care and troubleshooting guides.\",\n      category: \"technical\",\n      author: \"Prof. James Okafor, Agricultural Engineering\",\n      readTime: \"60 min\",\n      difficulty: \"Advanced\",\n      downloadCount: 1950,\n      rating: 4.7,\n      coverImage: \"https://images.unsplash.com/photo-1581091226825-a6a2a5aee158?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=300\",\n      tags: [\"Maintenance\", \"Technical\", \"Equipment\", \"Troubleshooting\"]\n    },\n    {\n      id: 4,\n      title: \"Women's Participation in Agricultural Mechanization\",\n      description: \"Analysis of barriers and opportunities for women's increased participation in agricultural mechanization across African countries.\",\n      category: \"policy\",\n      author: \"Dr. Amina Hassan, Gender and Development Specialist\",\n      readTime: \"40 min\",\n      difficulty: \"Intermediate\",\n      downloadCount: 2100,\n      rating: 4.8,\n      coverImage: \"https://images.unsplash.com/photo-1625246333195-78d9c38ad449?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=300\",\n      tags: [\"Gender\", \"Policy\", \"Participation\", \"Empowerment\"]\n    },\n    {\n      id: 5,\n      title: \"Financing Agricultural Mechanization: A Practical Guide\",\n      description: \"Comprehensive guide to accessing finance for agricultural mechanization, including microfinance, leasing, and government support programs.\",\n      category: \"finance\",\n      author: \"Financial Inclusion Team, AfDB\",\n      readTime: \"50 min\",\n      difficulty: \"Intermediate\",\n      downloadCount: 2650,\n      rating: 4.6,\n      coverImage: \"https://images.unsplash.com/photo-1556075798-4825dfaaf498?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=300\",\n      tags: [\"Finance\", \"Microfinance\", \"Leasing\", \"Support\"]\n    },\n    {\n      id: 6,\n      title: \"Climate-Smart Agricultural Mechanization\",\n      description: \"Strategies for implementing climate-resilient agricultural mechanization practices that enhance productivity while protecting the environment.\",\n      category: \"sustainability\",\n      author: \"Climate Change Adaptation Team, UNEP\",\n      readTime: \"55 min\",\n      difficulty: \"Advanced\",\n      downloadCount: 1800,\n      rating: 4.7,\n      coverImage: \"https://images.unsplash.com/photo-1518186285589-2f7649de83e0?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=300\",\n      tags: [\"Climate\", \"Sustainability\", \"Environment\", \"Adaptation\"]\n    },\n    {\n      id: 7,\n      title: \"Youth in Agricultural Mechanization: Opportunities and Challenges\",\n      description: \"Exploring pathways for youth engagement in agricultural mechanization, including entrepreneurship opportunities and skills development.\",\n      category: \"youth\",\n      author: \"Youth Development Collective, IFAD\",\n      readTime: \"30 min\",\n      difficulty: \"Beginner\",\n      downloadCount: 1600,\n      rating: 4.5,\n      coverImage: \"https://images.unsplash.com/photo-1523240795612-9a054b0db644?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=300\",\n      tags: [\"Youth\", \"Entrepreneurship\", \"Skills\", \"Opportunities\"]\n    },\n    {\n      id: 8,\n      title: \"Digital Agriculture: The Future of Farming\",\n      description: \"Comprehensive overview of digital technologies transforming agriculture, including precision farming, IoT, and data analytics applications.\",\n      category: \"technology\",\n      author: \"Digital Agriculture Consortium\",\n      readTime: \"45 min\",\n      difficulty: \"Intermediate\",\n      downloadCount: 2400,\n      rating: 4.8,\n      coverImage: \"https://images.unsplash.com/photo-1560472354-b33ff0c44a43?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=300\",\n      tags: [\"Digital\", \"Technology\", \"IoT\", \"Analytics\"]\n    }\n  ];\n\n  const categories = [\n    { key: \"all\", label: \"All Materials\", count: readingMaterials.length },\n    { key: \"framework\", label: \"F-SAMA Framework\", count: readingMaterials.filter(m => m.category === \"framework\").length },\n    { key: \"case-study\", label: \"Case Studies\", count: readingMaterials.filter(m => m.category === \"case-study\").length },\n    { key: \"technical\", label: \"Technical Guides\", count: readingMaterials.filter(m => m.category === \"technical\").length },\n    { key: \"policy\", label: \"Policy & Gender\", count: readingMaterials.filter(m => m.category === \"policy\").length },\n    { key: \"finance\", label: \"Finance & Support\", count: readingMaterials.filter(m => m.category === \"finance\").length },\n    { key: \"sustainability\", label: \"Sustainability\", count: readingMaterials.filter(m => m.category === \"sustainability\").length },\n    { key: \"youth\", label: \"Youth Engagement\", count: readingMaterials.filter(m => m.category === \"youth\").length },\n    { key: \"technology\", label: \"Technology\", count: readingMaterials.filter(m => m.category === \"technology\").length }\n  ];\n\n  const filteredMaterials = selectedCategory === \"all\" \n    ? readingMaterials \n    : readingMaterials.filter(material => material.category === selectedCategory);\n\n  const getDifficultyColor = (difficulty) => {\n    switch (difficulty) {\n      case 'Beginner': return 'bg-green-500';\n      case 'Intermediate': return 'bg-yellow-500';\n      case 'Advanced': return 'bg-red-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getCategoryColor = (category) => {\n    switch (category) {\n      case 'framework': return 'from-primary to-success';\n      case 'case-study': return 'from-blue-500 to-cyan-500';\n      case 'technical': return 'from-purple-500 to-pink-500';\n      case 'policy': return 'from-orange-500 to-red-500';\n      case 'finance': return 'from-green-500 to-emerald-500';\n      case 'sustainability': return 'from-teal-500 to-blue-500';\n      case 'youth': return 'from-indigo-500 to-purple-500';\n      case 'technology': return 'from-cyan-500 to-blue-500';\n      default: return 'from-gray-500 to-gray-700';\n    }\n  };\n\n  return (\n    <section className=\"py-20 bg-gradient-to-br from-amber-50 to-orange-50 dark:from-amber-900/20 dark:to-orange-900/20 relative overflow-hidden\">\n      {/* Background decorations */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        <div className=\"absolute top-20 left-20 w-40 h-40 bg-amber-400/10 rounded-full blur-3xl\" />\n        <div className=\"absolute bottom-20 right-20 w-52 h-52 bg-orange-400/10 rounded-full blur-3xl\" />\n        <div className=\"absolute top-40 right-40 w-32 h-32 bg-yellow-400/10 rounded-full blur-2xl\" />\n      </div>\n\n      <div className=\"container mx-auto px-6 relative z-10\">\n        <div className=\"text-center mb-16 animate-fade-in-up\">\n          <div className=\"inline-block px-4 py-2 bg-amber-500/10 rounded-full mb-4\">\n            <p className=\"text-amber-600 font-semibold text-sm\">LEARNING RESOURCES</p>\n          </div>\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-6 bg-gradient-to-r from-amber-600 via-orange-600 to-red-600 bg-clip-text text-transparent\">\n            Reading Materials\n          </h2>\n          <p className=\"text-xl text-gray-600 dark:text-gray-400 max-w-4xl mx-auto leading-relaxed\">\n            Comprehensive collection of research papers, guides, and educational materials to deepen your understanding of \n            <span className=\"font-semibold text-amber-600\"> sustainable agricultural mechanization</span>\n          </p>\n        </div>\n\n        {/* Category Filter */}\n        <div className=\"flex flex-wrap justify-center gap-3 mb-12\">\n          {categories.map((category) => (\n            <Button\n              key={category.key}\n              onClick={() => setSelectedCategory(category.key)}\n              variant={selectedCategory === category.key ? \"default\" : \"outline\"}\n              className={`px-4 py-2 rounded-full font-medium transition-all duration-300 hover:scale-105 ${\n                selectedCategory === category.key\n                  ? \"bg-gradient-to-r from-amber-500 to-orange-500 text-white shadow-lg\"\n                  : \"hover:bg-amber-50 hover:border-amber-300\"\n              }`}\n            >\n              {category.label}\n              <Badge variant=\"secondary\" className=\"ml-2 text-xs\">\n                {category.count}\n              </Badge>\n            </Button>\n          ))}\n        </div>\n\n        {/* Materials Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\">\n          {filteredMaterials.map((material, index) => (\n            <Card \n              key={material.id}\n              className=\"group relative overflow-hidden transition-all duration-500 hover:shadow-2xl hover:-translate-y-3 hover:rotate-1 bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm border-0 animate-fade-in-up\"\n              style={{ animationDelay: `${index * 0.05}s` }}\n            >\n              {/* Cover Image */}\n              <div className=\"relative h-48 overflow-hidden\">\n                <img \n                  src={material.coverImage} \n                  alt={material.title}\n                  className=\"w-full h-full object-cover group-hover:scale-110 transition-transform duration-500\"\n                />\n                <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 to-transparent\" />\n                \n                {/* Difficulty Badge */}\n                <div className=\"absolute top-3 left-3\">\n                  <Badge className={`${getDifficultyColor(material.difficulty)} text-white text-xs shadow-lg`}>\n                    {material.difficulty}\n                  </Badge>\n                </div>\n\n                {/* Rating */}\n                <div className=\"absolute top-3 right-3 bg-black/50 backdrop-blur-sm rounded-full px-2 py-1\">\n                  <div className=\"flex items-center text-yellow-400 text-xs\">\n                    <Star className=\"w-3 h-3 mr-1 fill-current\" />\n                    {material.rating}\n                  </div>\n                </div>\n\n                {/* Category gradient */}\n                <div className={`absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r ${getCategoryColor(material.category)}`} />\n              </div>\n              \n              <CardContent className=\"p-4 relative z-10\">\n                <h3 className=\"text-lg font-bold mb-2 text-gray-800 dark:text-white line-clamp-2 group-hover:text-amber-600 transition-colors duration-300\">\n                  {material.title}\n                </h3>\n                \n                <p className=\"text-gray-600 dark:text-gray-400 mb-3 line-clamp-3 text-sm leading-relaxed\">\n                  {material.description}\n                </p>\n\n                <div className=\"flex items-center justify-between mb-3 text-xs text-gray-500 dark:text-gray-400\">\n                  <div className=\"flex items-center\">\n                    <User className=\"mr-1 w-3 h-3\" />\n                    <span className=\"truncate\">{material.author}</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <Clock className=\"mr-1 w-3 h-3\" />\n                    <span>{material.readTime}</span>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"flex items-center text-xs text-gray-500 dark:text-gray-400\">\n                    <Download className=\"mr-1 w-3 h-3\" />\n                    <span>{material.downloadCount.toLocaleString()}</span>\n                  </div>\n                  <div className=\"flex items-center text-xs text-gray-500 dark:text-gray-400\">\n                    <Eye className=\"mr-1 w-3 h-3\" />\n                    <span>Popular</span>\n                  </div>\n                </div>\n\n                {/* Tags */}\n                <div className=\"flex flex-wrap gap-1 mb-4\">\n                  {material.tags.slice(0, 3).map((tag, i) => (\n                    <Badge key={i} variant=\"outline\" className=\"text-xs px-2 py-1\">\n                      {tag}\n                    </Badge>\n                  ))}\n                </div>\n                \n                <Button\n                  className={`w-full bg-gradient-to-r ${getCategoryColor(material.category)} hover:opacity-90 text-white font-medium transition-all duration-300 hover:scale-105 shadow-md`}\n                >\n                  <BookOpen className=\"mr-2 w-4 h-4\" />\n                  Read Now\n                  <ArrowRight className=\"ml-2 w-4 h-4 group-hover:translate-x-1 transition-transform duration-300\" />\n                </Button>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Reading Statistics */}\n        <div className=\"mt-16 bg-white/60 dark:bg-gray-800/60 backdrop-blur-sm rounded-2xl p-8 shadow-xl\">\n          <h3 className=\"text-2xl font-bold text-center mb-8 text-gray-800 dark:text-white\">\n            Reading Impact\n          </h3>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-amber-600 mb-2\">\n                {readingMaterials.reduce((sum, m) => sum + m.downloadCount, 0).toLocaleString()}\n              </div>\n              <p className=\"text-gray-600 dark:text-gray-400\">Total Downloads</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-orange-600 mb-2\">\n                {readingMaterials.length}\n              </div>\n              <p className=\"text-gray-600 dark:text-gray-400\">Reading Materials</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-red-600 mb-2\">\n                {categories.length - 1}\n              </div>\n              <p className=\"text-gray-600 dark:text-gray-400\">Subject Areas</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-yellow-600 mb-2\">\n                4.7\n              </div>\n              <p className=\"text-gray-600 dark:text-gray-400\">Average Rating</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};","size_bytes":16308},"client/src/components/ResourceLibrary.jsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useApp } from \"../contexts/AppContext\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Download, FileText, Video, Play, Search, Filter, BookOpen, FileCheck, Calendar } from \"lucide-react\";\n\nexport const ResourceLibrary = () => {\n  const { resourceFilter, setResourceFilter } = useApp();\n  const [downloadingId, setDownloadingId] = useState(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: resources, isLoading } = useQuery({\n    queryKey: [\"/api/resources\", resourceFilter === \"all\" ? undefined : resourceFilter],\n    enabled: true,\n  });\n\n  // Default resources if API doesn't return data\n  const defaultResources = [\n    {\n      id: 1,\n      title: \"Sustainable Agricultural Mechanization - A Framework for Africa\",\n      description: \"The framework presents a menu of priority elements to be considered for sustainable agricultural mechanization in Africa.\",\n      category: \"research\",\n      language: \"en\",\n      section: \"F-SAMA Framework\",\n      downloadCount: 1250\n    },\n    {\n      id: 2,\n      title: \"La Mécanisation Agricole Durable\",\n      description: \"La mécanisation agricole durable peut sauver l'Afrique. Cadre Stratégique pour l'Afrique.\",\n      category: \"research\",\n      language: \"fr\",\n      section: \"F-SAMA Framework\",\n      downloadCount: 890\n    },\n    {\n      id: 3,\n      title: \"AfricaMechanize Newsletter - Issue 02 (2024)\",\n      description: \"This is the second quarterly newsletter of the AfricaMechanize Platform, featuring latest developments and insights.\",\n      category: \"newsletter\",\n      language: \"en\",\n      section: \"Quarterly Publication\",\n      downloadCount: 2100\n    },\n    {\n      id: 4,\n      title: \"Webinar 12: Revamping Manufacturing of Agricultural Machinery\",\n      description: \"WEBINAR No. 12: Revamping Manufacturing of Agricultural Machinery in Africa\",\n      category: \"webinar\",\n      language: \"en\",\n      section: \"Monthly Webinars\",\n      downloadCount: 750\n    },\n    {\n      id: 5,\n      title: \"Webinaire 12: Relancer la fabrication des machines agricoles\",\n      description: \"L'objectif du webinaire 12 est d'initier une collaboration entre les pays africains.\",\n      category: \"webinar\",\n      language: \"fr\",\n      section: \"Monthly Webinars\",\n      downloadCount: 650\n    },\n    {\n      id: 6,\n      title: \"Concept Note: AfricaMechanize Webinar No12\",\n      description: \"The Objective of Webinar 12 is to initiate collaboration between African countries in agricultural machinery manufacturing.\",\n      category: \"research\",\n      language: \"en\",\n      section: \"Technical Papers\",\n      downloadCount: 430\n    },\n    {\n      id: 7,\n      title: \"Webinar 11: Advancing Agricultural Mechanization in Africa\",\n      description: \"Join industry experts discussing the latest trends and innovations in agricultural mechanization across African nations.\",\n      category: \"webinar\",\n      language: \"en\",\n      section: \"Monthly Webinars\",\n      downloadCount: 920\n    },\n    {\n      id: 8,\n      title: \"Women in Agricultural Mechanization: Breaking Barriers\",\n      description: \"A comprehensive study on the role of women in agricultural mechanization and pathways to greater participation.\",\n      category: \"research\",\n      language: \"en\",\n      section: \"Gender Studies\",\n      downloadCount: 1100\n    },\n    {\n      id: 9,\n      title: \"AfricaMechanize Newsletter - Issue 01 (2024)\",\n      description: \"The inaugural newsletter featuring insights from the F-SAMA framework and regional success stories.\",\n      category: \"newsletter\",\n      language: \"en\",\n      section: \"Quarterly Publication\",\n      downloadCount: 1850\n    },\n    {\n      id: 10,\n      title: \"Youth Engagement in Agricultural Technology\",\n      description: \"Exploring innovative approaches to engage young people in agricultural mechanization and technology adoption.\",\n      category: \"research\",\n      language: \"en\",\n      section: \"Youth Initiatives\",\n      downloadCount: 780\n    },\n    {\n      id: 11,\n      title: \"Webinar 10: Sustainable Financing for Agricultural Machinery\",\n      description: \"Discussion on innovative financing mechanisms for smallholder farmers to access agricultural machinery.\",\n      category: \"webinar\",\n      language: \"en\",\n      section: \"Monthly Webinars\",\n      downloadCount: 890\n    },\n    {\n      id: 12,\n      title: \"Regional Agricultural Mechanization Policies\",\n      description: \"A comparative analysis of agricultural mechanization policies across West, East, and Southern Africa.\",\n      category: \"research\",\n      language: \"en\",\n      section: \"Policy Analysis\",\n      downloadCount: 1320\n    },\n    {\n      id: 13,\n      title: \"Webinar 9: Digital Agriculture and Smart Farming\",\n      description: \"Exploring the intersection of digital technology and agricultural mechanization for enhanced productivity.\",\n      category: \"webinar\",\n      language: \"en\",\n      section: \"Monthly Webinars\",\n      downloadCount: 1100\n    },\n    {\n      id: 14,\n      title: \"Climate-Smart Agricultural Mechanization\",\n      description: \"Strategies for implementing climate-resilient agricultural mechanization practices in Africa.\",\n      category: \"research\",\n      language: \"en\",\n      section: \"Climate Adaptation\",\n      downloadCount: 960\n    },\n    {\n      id: 15,\n      title: \"Participant Guide: Best Practices in Agricultural Mechanization\",\n      description: \"A comprehensive guide for farmers, policymakers, and stakeholders on implementing best practices in agricultural mechanization.\",\n      category: \"guide\",\n      language: \"en\",\n      section: \"Training Materials\",\n      downloadCount: 1540\n    },\n    {\n      id: 16,\n      title: \"Value Chain Development for Agricultural Machinery\",\n      description: \"Analyzing the agricultural machinery value chain and opportunities for local manufacturing and distribution.\",\n      category: \"research\",\n      language: \"en\",\n      section: \"Value Chain Analysis\",\n      downloadCount: 870\n    },\n    {\n      id: 17,\n      title: \"Webinar 8: Post-Harvest Technologies and Equipment\",\n      description: \"Focus on post-harvest loss reduction through improved technologies and mechanization solutions.\",\n      category: \"webinar\",\n      language: \"en\",\n      section: \"Monthly Webinars\",\n      downloadCount: 740\n    },\n    {\n      id: 18,\n      title: \"Training Manual: Tractor Operation and Maintenance\",\n      description: \"Comprehensive training materials for tractor operators and maintenance technicians in rural communities.\",\n      category: \"guide\",\n      language: \"en\",\n      section: \"Training Materials\",\n      downloadCount: 1200\n    }\n  ];\n\n  const resourcesData = resources || defaultResources;\n  \n  // Filter resources based on search term and category\n  const filteredResources = resourcesData.filter(resource => {\n    const matchesSearch = resource.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         resource.description.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = resourceFilter === 'all' || resource.category === resourceFilter;\n    return matchesSearch && matchesCategory;\n  });\n\n  const handleDownload = async (resourceId) => {\n    setDownloadingId(resourceId);\n    try {\n      // Increment download count\n      await fetch(`/api/resources/${resourceId}/download`, {\n        method: 'POST',\n      });\n      \n      // Simulate download\n      setTimeout(() => {\n        setDownloadingId(null);\n      }, 2000);\n    } catch (error) {\n      console.error('Download failed:', error);\n      setDownloadingId(null);\n    }\n  };\n\n  const getLanguageColor = (language) => {\n    switch (language) {\n      case 'en': return 'bg-primary';\n      case 'fr': return 'bg-secondary';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getCategoryIcon = (category) => {\n    switch (category) {\n      case 'webinar': return Video;\n      case 'newsletter': return BookOpen;\n      case 'research': return FileCheck;\n      case 'guide': return FileText;\n      default: return FileText;\n    }\n  };\n\n  const getCategoryColor = (category) => {\n    switch (category) {\n      case 'webinar': return 'from-accent to-primary';\n      case 'newsletter': return 'from-secondary to-warning';\n      case 'research': return 'from-primary to-success';\n      case 'guide': return 'from-purple-500 to-indigo-600';\n      default: return 'from-gray-500 to-gray-700';\n    }\n  };\n\n  const filters = [\n    { key: 'all', label: 'All Resources', icon: FileText },\n    { key: 'webinar', label: 'Webinars', icon: Video },\n    { key: 'newsletter', label: 'Newsletter', icon: BookOpen },\n    { key: 'research', label: 'Research', icon: FileCheck },\n    { key: 'guide', label: 'Training Guides', icon: FileText },\n  ];\n\n  if (isLoading) {\n    return (\n      <section className=\"py-20 bg-white dark:bg-gray-800\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-5xl font-bold mb-6 bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n              Featured Resources\n            </h2>\n            <p className=\"text-xl text-gray-600 dark:text-gray-400 max-w-3xl mx-auto\">\n              Access comprehensive resources, research papers, and educational materials\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {Array.from({ length: 6 }).map((_, i) => (\n              <Card key={i} className=\"p-6 animate-pulse\">\n                <div className=\"w-20 h-6 bg-gray-200 rounded mb-4\"></div>\n                <div className=\"w-full h-6 bg-gray-200 rounded mb-3\"></div>\n                <div className=\"w-full h-16 bg-gray-200 rounded mb-4\"></div>\n                <div className=\"w-24 h-8 bg-gray-200 rounded\"></div>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section id=\"resources\" className=\"py-20 bg-gradient-to-br from-white to-gray-50 dark:from-gray-800 dark:to-gray-900 relative overflow-hidden\">\n      {/* Background decorations */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        <div className=\"absolute top-20 left-20 w-40 h-40 bg-primary/5 rounded-full blur-3xl\" />\n        <div className=\"absolute bottom-20 right-20 w-52 h-52 bg-secondary/5 rounded-full blur-3xl\" />\n        <div className=\"absolute top-40 right-40 w-32 h-32 bg-accent/5 rounded-full blur-2xl\" />\n      </div>\n\n      <div className=\"container mx-auto px-6 relative z-10\">\n        <div className=\"text-center mb-16 animate-fade-in-up\">\n          <div className=\"inline-block px-4 py-2 bg-primary/10 rounded-full mb-4\">\n            <p className=\"text-primary font-semibold text-sm\">KNOWLEDGE BASE</p>\n          </div>\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-6 bg-gradient-to-r from-primary via-secondary to-accent bg-clip-text text-transparent\">\n            Resource Library\n          </h2>\n          <p className=\"text-xl text-gray-600 dark:text-gray-400 max-w-4xl mx-auto leading-relaxed\">\n            Access comprehensive resources, research papers, webinars, and educational materials to advance \n            <span className=\"font-semibold text-primary\"> sustainable agricultural mechanization</span>\n          </p>\n        </div>\n\n        {/* Search Bar */}\n        <div className=\"max-w-2xl mx-auto mb-12\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400\" size={20} />\n            <input\n              type=\"text\"\n              placeholder=\"Search resources, papers, and webinars...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-full pl-12 pr-4 py-4 rounded-full border-2 border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 focus:border-primary focus:outline-none transition-all duration-300 text-gray-900 dark:text-white placeholder-gray-500\"\n            />\n          </div>\n        </div>\n\n        {/* Resource Filters */}\n        <div className=\"flex flex-wrap justify-center gap-4 mb-12\">\n          {filters.map((filter) => {\n            const FilterIcon = filter.icon;\n            return (\n              <Button\n                key={filter.key}\n                onClick={() => setResourceFilter(filter.key)}\n                variant={resourceFilter === filter.key ? \"default\" : \"outline\"}\n                className={`px-6 py-3 rounded-full font-semibold transition-all duration-300 hover:scale-105 ${\n                  resourceFilter === filter.key\n                    ? \"bg-gradient-to-r from-primary to-secondary text-white shadow-lg\"\n                    : \"hover:bg-primary/10 hover:border-primary\"\n                }`}\n              >\n                <FilterIcon className=\"mr-2 w-4 h-4\" />\n                {filter.label}\n              </Button>\n            );\n          })}\n        </div>\n\n        {/* Results Count */}\n        <div className=\"text-center mb-8\">\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Showing <span className=\"font-semibold text-primary\">{filteredResources.length}</span> resources\n            {searchTerm && (\n              <span> for \"<span className=\"font-semibold\">{searchTerm}</span>\"</span>\n            )}\n          </p>\n        </div>\n\n        {/* Resource Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {filteredResources.map((resource, index) => {\n            const IconComponent = getCategoryIcon(resource.category);\n            const isDownloading = downloadingId === resource.id;\n            \n            return (\n              <Card \n                key={resource.id}\n                className=\"group relative overflow-hidden transition-all duration-500 hover:shadow-2xl hover:-translate-y-3 hover:rotate-1 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-0 animate-fade-in-up\"\n                style={{ animationDelay: `${index * 0.1}s` }}\n              >\n                {/* Glow effect */}\n                <div className=\"absolute inset-0 bg-gradient-to-br from-primary/10 to-secondary/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500\" />\n                \n                {/* Category header */}\n                <div className={`h-2 bg-gradient-to-r ${getCategoryColor(resource.category)}`} />\n                \n                <CardContent className=\"p-6 relative z-10\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <Badge className={`${getLanguageColor(resource.language)} text-white shadow-md`}>\n                      {resource.language.toUpperCase()}\n                    </Badge>\n                    <div className={`w-10 h-10 bg-gradient-to-r ${getCategoryColor(resource.category)} rounded-full flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300`}>\n                      <IconComponent className=\"text-white\" size={18} />\n                    </div>\n                  </div>\n                  \n                  <h3 className=\"text-xl font-bold mb-3 text-gray-800 dark:text-white line-clamp-2 group-hover:text-primary transition-colors duration-300\">\n                    {resource.title}\n                  </h3>\n                  \n                  <p className=\"text-gray-600 dark:text-gray-400 mb-4 line-clamp-3 leading-relaxed\">\n                    {resource.description}\n                  </p>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                      <div className=\"flex items-center mb-1\">\n                        <Calendar className=\"mr-1 w-3 h-3\" />\n                        <p className=\"text-xs\">{resource.section}</p>\n                      </div>\n                      <p className=\"text-xs flex items-center\">\n                        <Download className=\"mr-1 w-3 h-3\" />\n                        {(resource.downloadCount || 0).toLocaleString()} downloads\n                      </p>\n                    </div>\n                    \n                    <Button\n                      onClick={() => handleDownload(resource.id)}\n                      disabled={isDownloading}\n                      className=\"bg-gradient-to-r from-primary to-secondary hover:from-primary/90 hover:to-secondary/90 text-white font-semibold transition-all duration-300 hover:scale-105 shadow-lg\"\n                    >\n                      {isDownloading ? (\n                        <>\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2\"></div>\n                          Loading...\n                        </>\n                      ) : resource.category === 'webinar' ? (\n                        <>\n                          <Play className=\"mr-2\" size={16} />\n                          Register\n                        </>\n                      ) : (\n                        <>\n                          <Download className=\"mr-2\" size={16} />\n                          Download\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Empty State */}\n        {filteredResources.length === 0 && (\n          <div className=\"text-center py-12\">\n            <div className=\"w-24 h-24 bg-gray-100 dark:bg-gray-700 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Search className=\"w-12 h-12 text-gray-400\" />\n            </div>\n            <h3 className=\"text-xl font-semibold mb-2 text-gray-800 dark:text-white\">\n              No resources found\n            </h3>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              Try adjusting your search terms or filter selection\n            </p>\n          </div>\n        )}\n      </div>\n    </section>\n  );\n};\n","size_bytes":18291},"client/src/components/StatsCounter.jsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { TrendingUp, Globe, Video, Users, Award } from \"lucide-react\";\n\nexport const StatsCounter = () => {\n  const [animatedStats, setAnimatedStats] = useState({\n    network: 0,\n    countries: 0,\n    webinars: 0,\n    speakers: 0,\n    participants: 0,\n  });\n  const [isVisible, setIsVisible] = useState(false);\n  const sectionRef = useRef(null);\n\n  const { data: stats, isLoading } = useQuery({\n    queryKey: [\"/api/statistics\"],\n    enabled: true,\n  });\n\n  // Default values if stats are not available\n  const defaultStats = {\n    network: 150,\n    countries: 35,\n    webinars: 12,\n    speakers: 85,\n    participants: 8500,\n  };\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          setIsVisible(true);\n        }\n      },\n      { threshold: 0.1 }\n    );\n\n    if (sectionRef.current) {\n      observer.observe(sectionRef.current);\n    }\n\n    return () => observer.disconnect();\n  }, []);\n\n  useEffect(() => {\n    if (isVisible) {\n      const duration = 2000; // 2 seconds\n      const steps = 60; // 60 steps for smooth animation\n      const stepDelay = duration / steps;\n\n      const animateCounter = (key, target) => {\n        let current = 0;\n        const increment = target / steps;\n        \n        const timer = setInterval(() => {\n          current += increment;\n          if (current >= target) {\n            current = target;\n            clearInterval(timer);\n          }\n          setAnimatedStats(prev => ({\n            ...prev,\n            [key]: Math.floor(current)\n          }));\n        }, stepDelay);\n      };\n\n      // Use stats if available, otherwise use defaults\n      const dataToUse = stats || defaultStats;\n      \n      // Start animations with slight delays\n      setTimeout(() => animateCounter('network', dataToUse.network), 500);\n      setTimeout(() => animateCounter('countries', dataToUse.countries), 700);\n      setTimeout(() => animateCounter('webinars', dataToUse.webinars), 900);\n      setTimeout(() => animateCounter('speakers', dataToUse.speakers), 1100);\n      setTimeout(() => animateCounter('participants', dataToUse.participants), 1300);\n    }\n  }, [isVisible, stats, defaultStats]);\n\n  if (isLoading) {\n    return (\n      <section ref={sectionRef} className=\"py-20 bg-gradient-to-br from-white to-gray-50 dark:from-gray-800 dark:to-gray-900\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"grid grid-cols-2 md:grid-cols-5 gap-8\">\n            {Array.from({ length: 5 }).map((_, i) => (\n              <div key={i} className=\"text-center\">\n                <div className=\"w-16 h-16 bg-gray-200 dark:bg-gray-700 rounded-full mx-auto mb-4 animate-pulse\"></div>\n                <div className=\"text-4xl md:text-5xl font-bold text-gray-300 mb-2\">\n                  ---\n                </div>\n                <div className=\"w-24 h-4 bg-gray-200 dark:bg-gray-700 rounded mx-auto\"></div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  const currentStats = stats || defaultStats;\n  const displayStats = isVisible ? animatedStats : { network: 0, countries: 0, webinars: 0, speakers: 0, participants: 0 };\n\n  const statsData = [\n    {\n      value: displayStats.network || 0,\n      label: \"Network Partners\",\n      color: \"text-primary\",\n      bgColor: \"bg-primary/10\",\n      icon: TrendingUp,\n    },\n    {\n      value: displayStats.countries || 0,\n      label: \"Countries\",\n      color: \"text-secondary\",\n      bgColor: \"bg-secondary/10\",\n      icon: Globe,\n    },\n    {\n      value: displayStats.webinars || 0,\n      label: \"Webinars\",\n      color: \"text-accent\",\n      bgColor: \"bg-accent/10\",\n      icon: Video,\n    },\n    {\n      value: displayStats.speakers || 0,\n      label: \"Conference Speakers\",\n      color: \"text-success\",\n      bgColor: \"bg-success/10\",\n      icon: Users,\n    },\n    {\n      value: displayStats.participants || 0,\n      label: \"Participants\",\n      color: \"text-warning\",\n      bgColor: \"bg-warning/10\",\n      icon: Award,\n    },\n  ];\n\n  return (\n    <section ref={sectionRef} className=\"py-20 bg-gradient-to-br from-white to-gray-50 dark:from-gray-800 dark:to-gray-900 relative overflow-hidden\">\n      {/* Background decorations */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        <div className=\"absolute top-10 left-10 w-32 h-32 bg-primary/5 rounded-full blur-3xl\" />\n        <div className=\"absolute bottom-10 right-10 w-40 h-40 bg-secondary/5 rounded-full blur-3xl\" />\n      </div>\n\n      <div className=\"container mx-auto px-6 relative z-10\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4 bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n            Our Impact at a Glance\n          </h2>\n          <p className=\"text-gray-600 dark:text-gray-400 max-w-2xl mx-auto\">\n            Building a sustainable agricultural future across Africa through collaboration and innovation\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-2 md:grid-cols-5 gap-8\">\n          {statsData.map((stat, index) => {\n            const IconComponent = stat.icon;\n            return (\n              <div \n                key={index} \n                className={`text-center group hover:scale-105 transition-all duration-300 ${\n                  isVisible ? 'animate-fade-in-up' : 'opacity-0'\n                }`}\n                style={{ animationDelay: `${index * 0.2}s` }}\n              >\n                <div className={`w-16 h-16 ${stat.bgColor} rounded-full flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-300`}>\n                  <IconComponent className={`w-8 h-8 ${stat.color}`} />\n                </div>\n                <div className={`text-4xl md:text-5xl font-bold ${stat.color} mb-2 tabular-nums group-hover:scale-110 transition-transform duration-300`}>\n                  {stat.value.toLocaleString()}\n                </div>\n                <p className=\"text-gray-600 dark:text-gray-400 font-medium text-sm md:text-base\">\n                  {stat.label}\n                </p>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n};","size_bytes":6359},"client/src/components/ThemeToggle.jsx":{"content":"import { useApp } from \"../contexts/AppContext\";\nimport { Sun, Moon } from \"lucide-react\";\n\nexport const ThemeToggle = () => {\n  const { darkMode, setDarkMode } = useApp();\n\n  return (\n    <button\n      onClick={() => setDarkMode(!darkMode)}\n      className=\"p-2 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors\"\n    >\n      {darkMode ? (\n        <Sun size={20} className=\"text-yellow-500\" />\n      ) : (\n        <Moon size={20} className=\"text-gray-600\" />\n      )}\n    </button>\n  );\n};\n","size_bytes":510},"client/src/components/WebinarParticipation.jsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Video, Users, Calendar, Clock, Globe, Play, ExternalLink } from \"lucide-react\";\n\nexport const WebinarParticipation = () => {\n  const [selectedWebinar, setSelectedWebinar] = useState(null);\n\n  const { data: webinars, isLoading } = useQuery({\n    queryKey: [\"/api/webinars\"],\n    enabled: true,\n  });\n\n  // Default webinars if API doesn't return data\n  const defaultWebinars = [\n    {\n      id: 1,\n      title: \"Webinar 13: Future of Agricultural Mechanization in Africa\",\n      description: \"Join industry leaders discussing emerging trends, technologies, and opportunities in agricultural mechanization across Africa\",\n      date: \"2024-04-15\",\n      time: \"14:00 UTC\",\n      duration: \"90 minutes\",\n      presenter: \"Dr. Sarah Johnson, FAO Agricultural Engineer\",\n      participants: 0,\n      maxParticipants: 500,\n      status: \"upcoming\",\n      language: \"English\",\n      registrationUrl: \"#\",\n      topics: [\"Smart Agriculture\", \"Precision Farming\", \"Digital Tools\", \"Sustainability\"]\n    },\n    {\n      id: 2,\n      title: \"Webinar 12: Revamping Manufacturing of Agricultural Machinery\",\n      description: \"Interactive session on strategies for revitalizing agricultural machinery manufacturing in Africa\",\n      date: \"2024-03-15\",\n      time: \"13:00 UTC\",\n      duration: \"120 minutes\",\n      presenter: \"Prof. Michael Okonkwo, Agricultural Engineering\",\n      participants: 680,\n      maxParticipants: 500,\n      status: \"completed\",\n      language: \"English/French\",\n      registrationUrl: \"#\",\n      topics: [\"Manufacturing\", \"Local Production\", \"Quality Control\", \"Market Access\"]\n    },\n    {\n      id: 3,\n      title: \"Webinar 11: Sustainable Financing for Agricultural Machinery\",\n      description: \"Exploring innovative financing mechanisms for smallholder farmers to access agricultural equipment\",\n      date: \"2024-02-20\",\n      time: \"15:00 UTC\",\n      duration: \"90 minutes\",\n      presenter: \"Dr. Amina Hassan, Rural Finance Expert\",\n      participants: 890,\n      maxParticipants: 500,\n      status: \"completed\",\n      language: \"English\",\n      registrationUrl: \"#\",\n      topics: [\"Microfinance\", \"Leasing Models\", \"Digital Payments\", \"Risk Management\"]\n    },\n    {\n      id: 4,\n      title: \"Webinar 10: Women in Agricultural Mechanization\",\n      description: \"Empowering women entrepreneurs in agricultural mechanization with success stories and capacity building\",\n      date: \"2024-01-18\",\n      time: \"14:30 UTC\",\n      duration: \"105 minutes\",\n      presenter: \"Mrs. Grace Nakamura, Women's Cooperative Leader\",\n      participants: 540,\n      maxParticipants: 400,\n      status: \"completed\",\n      language: \"English/Swahili\",\n      registrationUrl: \"#\",\n      topics: [\"Gender Equality\", \"Entrepreneurship\", \"Capacity Building\", \"Success Stories\"]\n    },\n    {\n      id: 5,\n      title: \"Webinar 9: Digital Agriculture and Smart Farming\",\n      description: \"Exploring the intersection of digital technology and agricultural mechanization for enhanced productivity\",\n      date: \"2023-12-10\",\n      time: \"13:30 UTC\",\n      duration: \"110 minutes\",\n      presenter: \"Dr. James Chen, AgTech Innovation Specialist\",\n      participants: 1100,\n      maxParticipants: 600,\n      status: \"completed\",\n      language: \"English\",\n      registrationUrl: \"#\",\n      topics: [\"IoT\", \"AI in Agriculture\", \"Data Analytics\", \"Precision Agriculture\"]\n    }\n  ];\n\n  const webinarsData = webinars || defaultWebinars;\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'upcoming': return 'bg-blue-500';\n      case 'completed': return 'bg-green-500';\n      case 'live': return 'bg-red-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getStatusGradient = (status) => {\n    switch (status) {\n      case 'upcoming': return 'from-blue-500 to-cyan-500';\n      case 'completed': return 'from-green-500 to-emerald-500';\n      case 'live': return 'from-red-500 to-pink-500';\n      default: return 'from-gray-500 to-gray-700';\n    }\n  };\n\n  const formatDate = (dateString) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <section className=\"py-20 bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-5xl font-bold mb-6 bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent\">\n              Webinar Participation\n            </h2>\n            <p className=\"text-xl text-gray-600 dark:text-gray-400 max-w-3xl mx-auto\">\n              Join our interactive webinars and learn from industry experts\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {Array.from({ length: 6 }).map((_, i) => (\n              <Card key={i} className=\"p-6 animate-pulse\">\n                <div className=\"w-20 h-6 bg-gray-200 rounded mb-4\"></div>\n                <div className=\"w-full h-6 bg-gray-200 rounded mb-3\"></div>\n                <div className=\"w-full h-16 bg-gray-200 rounded mb-4\"></div>\n                <div className=\"w-24 h-8 bg-gray-200 rounded\"></div>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"py-20 bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 relative overflow-hidden\">\n      {/* Background decorations */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        <div className=\"absolute top-20 left-20 w-40 h-40 bg-blue-400/10 rounded-full blur-3xl\" />\n        <div className=\"absolute bottom-20 right-20 w-52 h-52 bg-indigo-400/10 rounded-full blur-3xl\" />\n        <div className=\"absolute top-40 right-40 w-32 h-32 bg-cyan-400/10 rounded-full blur-2xl\" />\n      </div>\n\n      <div className=\"container mx-auto px-6 relative z-10\">\n        <div className=\"text-center mb-16 animate-fade-in-up\">\n          <div className=\"inline-block px-4 py-2 bg-blue-500/10 rounded-full mb-4\">\n            <p className=\"text-blue-600 font-semibold text-sm\">INTERACTIVE LEARNING</p>\n          </div>\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-6 bg-gradient-to-r from-blue-600 via-indigo-600 to-purple-600 bg-clip-text text-transparent\">\n            Webinar Participation\n          </h2>\n          <p className=\"text-xl text-gray-600 dark:text-gray-400 max-w-4xl mx-auto leading-relaxed\">\n            Join our interactive webinars and learn from industry experts about the latest trends and innovations in \n            <span className=\"font-semibold text-blue-600\"> agricultural mechanization</span>\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12\">\n          {webinarsData.map((webinar, index) => (\n            <Card \n              key={webinar.id}\n              className=\"group relative overflow-hidden transition-all duration-500 hover:shadow-2xl hover:-translate-y-3 hover:rotate-1 bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm border-0 animate-fade-in-up\"\n              style={{ animationDelay: `${index * 0.1}s` }}\n            >\n              {/* Status header */}\n              <div className={`h-2 bg-gradient-to-r ${getStatusGradient(webinar.status)}`} />\n              \n              <CardContent className=\"p-6 relative z-10\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <Badge className={`${getStatusColor(webinar.status)} text-white shadow-md capitalize`}>\n                    {webinar.status}\n                  </Badge>\n                  <div className={`w-10 h-10 bg-gradient-to-r ${getStatusGradient(webinar.status)} rounded-full flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300`}>\n                    <Video className=\"text-white\" size={18} />\n                  </div>\n                </div>\n                \n                <h3 className=\"text-xl font-bold mb-3 text-gray-800 dark:text-white line-clamp-2 group-hover:text-blue-600 transition-colors duration-300\">\n                  {webinar.title}\n                </h3>\n                \n                <p className=\"text-gray-600 dark:text-gray-400 mb-4 line-clamp-3 leading-relaxed\">\n                  {webinar.description}\n                </p>\n\n                <div className=\"space-y-2 mb-4 text-sm text-gray-500 dark:text-gray-400\">\n                  <div className=\"flex items-center\">\n                    <Calendar className=\"mr-2 w-4 h-4\" />\n                    <span>{formatDate(webinar.date)}</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <Clock className=\"mr-2 w-4 h-4\" />\n                    <span>{webinar.time} ({webinar.duration})</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <Users className=\"mr-2 w-4 h-4\" />\n                    <span>{webinar.participants} / {webinar.maxParticipants} participants</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <Globe className=\"mr-2 w-4 h-4\" />\n                    <span>{webinar.language}</span>\n                  </div>\n                </div>\n\n                <div className=\"flex flex-wrap gap-1 mb-4\">\n                  {webinar.topics.slice(0, 3).map((topic, i) => (\n                    <Badge key={i} variant=\"outline\" className=\"text-xs\">\n                      {topic}\n                    </Badge>\n                  ))}\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                    {webinar.presenter}\n                  </p>\n                  \n                  <Button\n                    onClick={() => setSelectedWebinar(webinar)}\n                    className={`bg-gradient-to-r ${getStatusGradient(webinar.status)} hover:opacity-90 text-white font-semibold transition-all duration-300 hover:scale-105 shadow-lg`}\n                  >\n                    {webinar.status === 'upcoming' ? (\n                      <>\n                        <ExternalLink className=\"mr-2\" size={16} />\n                        Register\n                      </>\n                    ) : webinar.status === 'live' ? (\n                      <>\n                        <Play className=\"mr-2\" size={16} />\n                        Join Live\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"mr-2\" size={16} />\n                        View Recording\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Participation Statistics */}\n        <div className=\"bg-white/60 dark:bg-gray-800/60 backdrop-blur-sm rounded-2xl p-8 shadow-xl\">\n          <h3 className=\"text-2xl font-bold text-center mb-8 text-gray-800 dark:text-white\">\n            Webinar Participation Impact\n          </h3>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-blue-600 mb-2\">\n                {webinarsData.reduce((sum, w) => sum + w.participants, 0).toLocaleString()}\n              </div>\n              <p className=\"text-gray-600 dark:text-gray-400\">Total Participants</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-indigo-600 mb-2\">\n                {webinarsData.length}\n              </div>\n              <p className=\"text-gray-600 dark:text-gray-400\">Webinars Conducted</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-purple-600 mb-2\">\n                35\n              </div>\n              <p className=\"text-gray-600 dark:text-gray-400\">Countries Represented</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-cyan-600 mb-2\">\n                95%\n              </div>\n              <p className=\"text-gray-600 dark:text-gray-400\">Satisfaction Rate</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};","size_bytes":12833},"client/src/contexts/AppContext.jsx":{"content":"import { createContext, useContext, useState, useEffect } from \"react\";\n\nconst AppContext = createContext();\n\nexport const useApp = () => {\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error(\"useApp must be used within an AppProvider\");\n  }\n  return context;\n};\n\nexport const AppProvider = ({ children }) => {\n  const [language, setLanguage] = useState(\"en\");\n  const [darkMode, setDarkMode] = useState(false);\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [activeFrameworkCard, setActiveFrameworkCard] = useState(null);\n  const [resourceFilter, setResourceFilter] = useState(\"all\");\n  const [scrollProgress, setScrollProgress] = useState(0);\n\n  // Load theme from localStorage on mount\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"theme\");\n    if (savedTheme === \"dark\") {\n      setDarkMode(true);\n    }\n  }, []);\n\n  // Update theme in localStorage and document class\n  useEffect(() => {\n    if (darkMode) {\n      document.documentElement.classList.add(\"dark\");\n      localStorage.setItem(\"theme\", \"dark\");\n    } else {\n      document.documentElement.classList.remove(\"dark\");\n      localStorage.setItem(\"theme\", \"light\");\n    }\n  }, [darkMode]);\n\n  // Update scroll progress\n  useEffect(() => {\n    const handleScroll = () => {\n      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n      const scrollHeight = document.documentElement.scrollHeight - window.innerHeight;\n      const progress = (scrollTop / scrollHeight) * 100;\n      setScrollProgress(progress);\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  const value = {\n    language,\n    setLanguage,\n    darkMode,\n    setDarkMode,\n    mobileMenuOpen,\n    setMobileMenuOpen,\n    activeFrameworkCard,\n    setActiveFrameworkCard,\n    resourceFilter,\n    setResourceFilter,\n    scrollProgress,\n  };\n\n  return (\n    <AppContext.Provider value={value}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n","size_bytes":2054},"client/src/hooks/use-mobile.jsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.js":{"content":"import * as React from \"react\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n}\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\nconst toastTimeouts = new Map()\n\nconst addToRemoveQueue = (toastId) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners = []\n\nlet memoryState = { toasts: [] }\n\nfunction dispatch(action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\nfunction toast({ ...props }) {\n  const id = genId()\n\n  const update = (props) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }","size_bytes":3041},"client/src/lib/queryClient.js":{"content":"import { QueryClient } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(method, url, data) {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\nexport const getQueryFn = ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\"), {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});","size_bytes":1157},"client/src/lib/utils.js":{"content":"import { clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs) {\n  return twMerge(clsx(inputs))\n}","size_bytes":134},"client/src/pages/About.jsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Target, \n  Globe, \n  Users, \n  Lightbulb, \n  Handshake, \n  Award, \n  ArrowRight,\n  CheckCircle,\n  MapPin,\n  Calendar,\n  ExternalLink\n} from \"lucide-react\";\n\nexport default function About() {\n  const objectives = [\n    {\n      icon: <Target className=\"w-6 h-6\" />,\n      title: \"Enhance Food Security\",\n      description: \"Improve agricultural productivity through sustainable mechanization to achieve food security and nutrition goals across Africa.\"\n    },\n    {\n      icon: <Users className=\"w-6 h-6\" />,\n      title: \"Empower Farmers\",\n      description: \"Enable farmers of all scales to access appropriate mechanization technologies and services that reduce drudgery and increase efficiency.\"\n    },\n    {\n      icon: <Globe className=\"w-6 h-6\" />,\n      title: \"Promote Sustainability\",\n      description: \"Ensure mechanization development follows environmentally sustainable practices and contributes to climate resilience.\"\n    },\n    {\n      icon: <Lightbulb className=\"w-6 h-6\" />,\n      title: \"Foster Innovation\",\n      description: \"Encourage research, development, and innovation in agricultural mechanization technologies appropriate for African conditions.\"\n    }\n  ];\n\n  const keyFeatures = [\n    {\n      title: \"Framework for Sustainable Agricultural Mechanization in Africa (F-SAMA)\",\n      description: \"A comprehensive 10-element framework providing strategic guidance for sustainable mechanization development.\",\n      icon: <Award className=\"w-5 h-5\" />\n    },\n    {\n      title: \"Knowledge Sharing Platform\",\n      description: \"Regular webinars, conferences, and resource sharing to facilitate learning and best practice exchange.\",\n      icon: <Users className=\"w-5 h-5\" />\n    },\n    {\n      title: \"Multi-stakeholder Network\",\n      description: \"Bringing together governments, private sector, development partners, and research institutions.\",\n      icon: <Handshake className=\"w-5 h-5\" />\n    },\n    {\n      title: \"Policy and Strategy Support\",\n      description: \"Assisting African countries in developing appropriate mechanization policies and strategies.\",\n      icon: <Lightbulb className=\"w-5 h-5\" />\n    }\n  ];\n\n  const partners = [\n    {\n      name: \"Food and Agriculture Organization (FAO)\",\n      role: \"Lead Technical Partner\",\n      description: \"Providing technical expertise and global mechanization knowledge\"\n    },\n    {\n      name: \"African Union Commission (AUC)\",\n      role: \"Strategic Partner\",\n      description: \"Ensuring alignment with continental agricultural development priorities\"\n    },\n    {\n      name: \"Regional Economic Communities\",\n      role: \"Implementation Partners\",\n      description: \"Facilitating regional cooperation and implementation\"\n    },\n    {\n      name: \"National Governments\",\n      role: \"Policy Partners\",\n      description: \"Developing and implementing national mechanization strategies\"\n    }\n  ];\n\n  const timeline = [\n    {\n      year: \"2016\",\n      event: \"Consultative Meeting on Mechanization Strategy\",\n      description: \"Initial consultative meeting on new models for sustainable agricultural mechanization in sub-Saharan Africa\"\n    },\n    {\n      year: \"2018\",\n      event: \"F-SAMA Framework Launch\",\n      description: \"Official launch of the Framework for Sustainable Agricultural Mechanization in Africa\"\n    },\n    {\n      year: \"2019\",\n      event: \"Platform Establishment\",\n      description: \"AfricaMechanize platform officially established to support framework implementation\"\n    },\n    {\n      year: \"2020-2024\",\n      event: \"Webinar Series & Knowledge Sharing\",\n      description: \"Regular webinar series and knowledge sharing activities across the continent\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-gray-50 to-white dark:from-gray-900 dark:to-gray-800 pt-24\">\n      {/* Hero Section */}\n      <section className=\"py-16 bg-gradient-to-r from-primary/10 to-secondary/10\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-4xl md:text-5xl font-bold mb-6 bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n              About AfricaMechanize\n            </h1>\n            <p className=\"text-xl text-gray-600 dark:text-gray-300 mb-8 leading-relaxed\">\n              AfricaMechanize is a continental platform dedicated to promoting sustainable agricultural \n              mechanization across Africa. We bring together stakeholders to share knowledge, develop \n              strategies, and accelerate the adoption of appropriate mechanization technologies that \n              enhance productivity while preserving environmental sustainability.\n            </p>\n            <div className=\"flex justify-center gap-4\">\n              <Button asChild size=\"lg\">\n                <a href=\"/framework\">\n                  Explore F-SAMA Framework\n                  <ArrowRight className=\"w-5 h-5 ml-2\" />\n                </a>\n              </Button>\n              <Button variant=\"outline\" size=\"lg\" asChild>\n                <a href=\"/webinars\">\n                  Join Our Webinars\n                  <ExternalLink className=\"w-5 h-5 ml-2\" />\n                </a>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Mission & Vision */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n            <Card className=\"p-8 bg-gradient-to-br from-primary/5 to-secondary/5 border-2 border-primary/20\">\n              <CardHeader className=\"p-0 mb-6\">\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <Target className=\"w-8 h-8 text-primary\" />\n                  <CardTitle className=\"text-2xl\">Our Mission</CardTitle>\n                </div>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <p className=\"text-lg leading-relaxed text-gray-700 dark:text-gray-300\">\n                  To accelerate sustainable agricultural mechanization across Africa by providing \n                  a collaborative platform for knowledge sharing, capacity building, and strategic \n                  guidance that enables all farmers to access appropriate mechanization technologies \n                  and services.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"p-8 bg-gradient-to-br from-secondary/5 to-primary/5 border-2 border-secondary/20\">\n              <CardHeader className=\"p-0 mb-6\">\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <Globe className=\"w-8 h-8 text-secondary\" />\n                  <CardTitle className=\"text-2xl\">Our Vision</CardTitle>\n                </div>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <p className=\"text-lg leading-relaxed text-gray-700 dark:text-gray-300\">\n                  An Africa where sustainable agricultural mechanization drives food security, \n                  rural prosperity, and economic transformation while preserving environmental \n                  sustainability and promoting social equity across all farming systems.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Key Objectives */}\n      <section className=\"py-16 bg-gray-50 dark:bg-gray-900\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold mb-4\">Our Objectives</h2>\n            <p className=\"text-xl text-gray-600 dark:text-gray-300\">\n              Core objectives driving our work in sustainable agricultural mechanization\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {objectives.map((objective, index) => (\n              <Card key={index} className=\"text-center p-6 hover:shadow-lg transition-all duration-300 border-2 border-primary/20\">\n                <CardContent className=\"p-0\">\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-primary to-secondary rounded-lg flex items-center justify-center text-white mx-auto mb-4\">\n                    {objective.icon}\n                  </div>\n                  <h4 className=\"font-semibold mb-3\">{objective.title}</h4>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-300 leading-relaxed\">\n                    {objective.description}\n                  </p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Key Features */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold mb-4\">Key Features</h2>\n            <p className=\"text-xl text-gray-600 dark:text-gray-300\">\n              What makes AfricaMechanize unique in supporting agricultural mechanization\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            {keyFeatures.map((feature, index) => (\n              <Card key={index} className=\"group hover:shadow-lg transition-all duration-300\">\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-start gap-4\">\n                    <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-secondary rounded-lg flex items-center justify-center text-white flex-shrink-0\">\n                      {feature.icon}\n                    </div>\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-xl group-hover:text-primary transition-colors mb-2\">\n                        {feature.title}\n                      </CardTitle>\n                      <CardDescription className=\"text-base leading-relaxed\">\n                        {feature.description}\n                      </CardDescription>\n                    </div>\n                  </div>\n                </CardHeader>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Partners */}\n      <section className=\"py-16 bg-gray-50 dark:bg-gray-900\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold mb-4\">Our Partners</h2>\n            <p className=\"text-xl text-gray-600 dark:text-gray-300\">\n              Collaborating with key stakeholders across Africa and globally\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            {partners.map((partner, index) => (\n              <Card key={index} className=\"p-6 hover:shadow-lg transition-all duration-300\">\n                <CardHeader className=\"p-0 mb-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-lg\">{partner.name}</CardTitle>\n                    <Badge variant=\"outline\">{partner.role}</Badge>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"p-0\">\n                  <p className=\"text-gray-600 dark:text-gray-300\">\n                    {partner.description}\n                  </p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Timeline */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold mb-4\">Our Journey</h2>\n            <p className=\"text-xl text-gray-600 dark:text-gray-300\">\n              Key milestones in the development of AfricaMechanize\n            </p>\n          </div>\n\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"space-y-8\">\n              {timeline.map((item, index) => (\n                <div key={index} className=\"flex gap-6\">\n                  <div className=\"flex-shrink-0\">\n                    <div className=\"w-12 h-12 bg-gradient-to-br from-primary to-secondary rounded-full flex items-center justify-center text-white font-bold\">\n                      {item.year}\n                    </div>\n                  </div>\n                  <Card className=\"flex-1 p-6 hover:shadow-lg transition-all duration-300\">\n                    <CardHeader className=\"p-0 mb-3\">\n                      <CardTitle className=\"text-lg\">{item.event}</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"p-0\">\n                      <p className=\"text-gray-600 dark:text-gray-300\">\n                        {item.description}\n                      </p>\n                    </CardContent>\n                  </Card>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Call to Action */}\n      <section className=\"py-16 bg-gradient-to-r from-primary/5 to-secondary/5\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h2 className=\"text-3xl font-bold mb-6\">Join the Movement</h2>\n            <p className=\"text-xl text-gray-600 dark:text-gray-300 mb-8\">\n              Be part of Africa's agricultural transformation through sustainable mechanization. \n              Connect with us, participate in our programs, and contribute to building a more \n              food-secure and prosperous continent.\n            </p>\n            <div className=\"flex justify-center gap-4\">\n              <Button size=\"lg\" asChild>\n                <a href=\"/contact\">\n                  Get Involved\n                  <ArrowRight className=\"w-5 h-5 ml-2\" />\n                </a>\n              </Button>\n              <Button variant=\"outline\" size=\"lg\" asChild>\n                <a href=\"/news\">\n                  Latest Updates\n                  <ExternalLink className=\"w-5 h-5 ml-2\" />\n                </a>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":14449},"client/src/pages/Admin.jsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Plus, \n  Edit, \n  Trash2, \n  FileText, \n  Calendar, \n  Video, \n  BookOpen, \n  Users,\n  Settings,\n  Eye,\n  Save,\n  X\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Component for managing admin functions\n\nexport default function Admin() {\n  const [activeTab, setActiveTab] = useState(\"resources\");\n  const [editingItem, setEditingItem] = useState(null);\n  const [showForm, setShowForm] = useState(false);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Fetch all content types\n  const { data: resources = [] } = useQuery({ queryKey: [\"/api/resources\"] });\n  const { data: events = [] } = useQuery({ queryKey: [\"/api/events\"] });\n  const { data: webinars = [] } = useQuery({ queryKey: [\"/api/webinars\"] });\n  const { data: materials = [] } = useQuery({ queryKey: [\"/api/materials\"] });\n\n  // CRUD Operations\n  const createMutation = useMutation({\n    mutationFn: async ({ type, data }) => {\n      return await apiRequest(\"POST\", `/api/${type}`, data);\n    },\n    onSuccess: (_, { type }) => {\n      queryClient.invalidateQueries({ queryKey: [`/api/${type}`] });\n      toast({ title: \"Success\", description: \"Item created successfully\" });\n      setShowForm(false);\n      setEditingItem(null);\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create item\", variant: \"destructive\" });\n    }\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ type, id, data }) => {\n      return await apiRequest(\"PATCH\", `/api/${type}/${id}`, data);\n    },\n    onSuccess: (_, { type }) => {\n      queryClient.invalidateQueries({ queryKey: [`/api/${type}`] });\n      toast({ title: \"Success\", description: \"Item updated successfully\" });\n      setEditingItem(null);\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update item\", variant: \"destructive\" });\n    }\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async ({ type, id }) => {\n      return await apiRequest(\"DELETE\", `/api/${type}/${id}`);\n    },\n    onSuccess: (_, { type }) => {\n      queryClient.invalidateQueries({ queryKey: [`/api/${type}`] });\n      toast({ title: \"Success\", description: \"Item deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete item\", variant: \"destructive\" });\n    }\n  });\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n            Admin Dashboard\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Manage content, users, and platform settings\n          </p>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"resources\" className=\"flex items-center gap-2\">\n              <FileText className=\"w-4 h-4\" />\n              Resources\n            </TabsTrigger>\n            <TabsTrigger value=\"events\" className=\"flex items-center gap-2\">\n              <Calendar className=\"w-4 h-4\" />\n              Events\n            </TabsTrigger>\n            <TabsTrigger value=\"webinars\" className=\"flex items-center gap-2\">\n              <Video className=\"w-4 h-4\" />\n              Webinars\n            </TabsTrigger>\n            <TabsTrigger value=\"materials\" className=\"flex items-center gap-2\">\n              <BookOpen className=\"w-4 h-4\" />\n              Materials\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"resources\" className=\"space-y-6\">\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <h3 className=\"text-xl font-semibold\">Resources Management</h3>\n                <Button onClick={() => { setShowForm(true); setActiveTab(\"resources\"); }}>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Resource\n                </Button>\n              </div>\n              \n              <div className=\"grid gap-4\">\n                {resources?.map((resource) => (\n                  <Card key={resource.id} className=\"p-4\">\n                    <div className=\"flex justify-between items-start\">\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-semibold text-lg mb-2\">{resource.title}</h4>\n                        <p className=\"text-gray-600 mb-2 line-clamp-2\">{resource.description}</p>\n                        <div className=\"flex gap-2 mb-2\">\n                          <Badge>{resource.category}</Badge>\n                          <Badge variant=\"outline\">{resource.language}</Badge>\n                          <Badge variant=\"secondary\">{resource.downloadCount} downloads</Badge>\n                        </div>\n                        <p className=\"text-sm text-gray-500\">Section: {resource.section}</p>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\"\n                          onClick={() => setEditingItem({ ...resource, type: 'resources' })}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button \n                          size=\"sm\" \n                          variant=\"destructive\"\n                          onClick={() => deleteMutation.mutate({ type: 'resources', id: resource.id })}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"events\" className=\"space-y-6\">\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <h3 className=\"text-xl font-semibold\">Events Management</h3>\n                <Button onClick={() => { setShowForm(true); setActiveTab(\"events\"); }}>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Event\n                </Button>\n              </div>\n              \n              <div className=\"grid gap-4\">\n                {events?.map((event) => (\n                  <Card key={event.id} className=\"p-4\">\n                    <div className=\"flex justify-between items-start\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-3 mb-2\">\n                          <img \n                            src={event.imageUrl} \n                            alt={event.title}\n                            className=\"w-16 h-12 object-cover rounded\"\n                          />\n                          <div>\n                            <h4 className=\"font-semibold text-lg\">{event.title}</h4>\n                            <p className=\"text-sm text-gray-500\">{new Date(event.date).toLocaleDateString()}</p>\n                          </div>\n                        </div>\n                        <p className=\"text-gray-600 mb-2 line-clamp-2\">{event.description}</p>\n                        <div className=\"flex gap-2\">\n                          <Badge>{event.type}</Badge>\n                          <Badge variant=\"secondary\">{event.participants || 0} participants</Badge>\n                        </div>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\"\n                          onClick={() => setEditingItem({ ...event, type: 'events' })}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button \n                          size=\"sm\" \n                          variant=\"destructive\"\n                          onClick={() => deleteMutation.mutate({ type: 'events', id: event.id })}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"webinars\" className=\"space-y-6\">\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <h3 className=\"text-xl font-semibold\">Webinars Management</h3>\n                <Button onClick={() => { setShowForm(true); setActiveTab(\"webinars\"); }}>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Webinar\n                </Button>\n              </div>\n              \n              <div className=\"grid gap-4\">\n                {webinars?.map((webinar) => (\n                  <Card key={webinar.id} className=\"p-4\">\n                    <div className=\"flex justify-between items-start\">\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-semibold text-lg mb-2\">{webinar.title}</h4>\n                        <p className=\"text-gray-600 mb-2 line-clamp-2\">{webinar.description}</p>\n                        <div className=\"flex gap-2 mb-2\">\n                          <Badge>{webinar.status}</Badge>\n                          <Badge variant=\"outline\">{webinar.language}</Badge>\n                          <Badge variant=\"secondary\">{webinar.participants} / {webinar.maxParticipants}</Badge>\n                        </div>\n                        <div className=\"text-sm text-gray-500 space-y-1\">\n                          <p>Date: {new Date(webinar.date).toLocaleDateString()}</p>\n                          <p>Time: {webinar.time} ({webinar.duration})</p>\n                          <p>Presenter: {webinar.presenter}</p>\n                        </div>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\"\n                          onClick={() => setEditingItem({ ...webinar, type: 'webinars' })}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button \n                          size=\"sm\" \n                          variant=\"destructive\"\n                          onClick={() => deleteMutation.mutate({ type: 'webinars', id: webinar.id })}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"materials\" className=\"space-y-6\">\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <h3 className=\"text-xl font-semibold\">Reading Materials Management</h3>\n                <Button onClick={() => { setShowForm(true); setActiveTab(\"materials\"); }}>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Material\n                </Button>\n              </div>\n              \n              <div className=\"grid gap-4\">\n                {materials?.map((material) => (\n                  <Card key={material.id} className=\"p-4\">\n                    <div className=\"flex justify-between items-start\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-3 mb-2\">\n                          <img \n                            src={material.coverImage} \n                            alt={material.title}\n                            className=\"w-16 h-12 object-cover rounded\"\n                          />\n                          <div>\n                            <h4 className=\"font-semibold text-lg\">{material.title}</h4>\n                            <p className=\"text-sm text-gray-500\">{material.author}</p>\n                          </div>\n                        </div>\n                        <p className=\"text-gray-600 mb-2 line-clamp-2\">{material.description}</p>\n                        <div className=\"flex gap-2 mb-2\">\n                          <Badge>{material.category}</Badge>\n                          <Badge variant=\"outline\">{material.difficulty}</Badge>\n                          <Badge variant=\"secondary\">{material.readTime}</Badge>\n                        </div>\n                        <p className=\"text-sm text-gray-500\">Downloads: {material.downloadCount} | Rating: {material.rating}</p>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\"\n                          onClick={() => setEditingItem({ ...material, type: 'materials' })}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button \n                          size=\"sm\" \n                          variant=\"destructive\"\n                          onClick={() => deleteMutation.mutate({ type: 'materials', id: material.id })}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":14234},"client/src/pages/Contact.jsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Mail, \n  Phone, \n  MapPin, \n  Globe, \n  Send, \n  Clock,\n  Users,\n  MessageSquare,\n  ExternalLink\n} from \"lucide-react\";\n\nexport default function Contact() {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    organization: \"\",\n    country: \"\",\n    subject: \"\",\n    category: \"\",\n    message: \"\"\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const contactMutation = useMutation({\n    mutationFn: async (data) => {\n      return apiRequest(\"/api/contacts\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Message Sent\",\n        description: \"Thank you for your message. We'll get back to you soon!\",\n      });\n      setFormData({\n        name: \"\",\n        email: \"\",\n        organization: \"\",\n        country: \"\",\n        subject: \"\",\n        category: \"\",\n        message: \"\"\n      });\n      queryClient.invalidateQueries([\"/api/contacts\"]);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!formData.name || !formData.email || !formData.subject || !formData.message) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    contactMutation.mutate(formData);\n  };\n\n  const handleInputChange = (field, value) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const contactInfo = [\n    {\n      icon: <Mail className=\"w-6 h-6\" />,\n      title: \"Email Us\",\n      details: \"info@africamechanize.org\",\n      description: \"General inquiries and information\",\n      action: \"mailto:info@africamechanize.org\"\n    },\n    {\n      icon: <Globe className=\"w-6 h-6\" />,\n      title: \"Visit Our Website\",\n      details: \"africamechanize.org\",\n      description: \"Access resources and latest updates\",\n      action: \"https://africamechanize.org\"\n    },\n    {\n      icon: <Users className=\"w-6 h-6\" />,\n      title: \"Join Our Network\",\n      details: \"Connect with stakeholders\",\n      description: \"Participate in webinars and events\",\n      action: \"/webinars\"\n    },\n    {\n      icon: <MessageSquare className=\"w-6 h-6\" />,\n      title: \"Follow Us\",\n      details: \"Social Media\",\n      description: \"Stay updated on social platforms\",\n      action: \"#\"\n    }\n  ];\n\n  const inquiryTypes = [\n    \"General Information\",\n    \"Partnership Opportunities\",\n    \"Webinar Participation\",\n    \"Framework Implementation\",\n    \"Technical Support\",\n    \"Policy Development\",\n    \"Research Collaboration\",\n    \"Media Inquiries\"\n  ];\n\n  const faqItems = [\n    {\n      question: \"How can I participate in AfricaMechanize webinars?\",\n      answer: \"You can register for upcoming webinars through our webinars page. All webinars are free and open to anyone interested in agricultural mechanization.\"\n    },\n    {\n      question: \"Is the F-SAMA framework available for download?\",\n      answer: \"Yes, the complete F-SAMA framework is available in our Resources section in both English and French versions.\"\n    },\n    {\n      question: \"How can our organization become a partner?\",\n      answer: \"Please contact us through this form selecting 'Partnership Opportunities' as your inquiry type, and we'll provide information about partnership possibilities.\"\n    },\n    {\n      question: \"Do you provide technical assistance for mechanization projects?\",\n      answer: \"We can provide guidance and connect you with relevant experts. Please describe your specific needs in your message.\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-gray-50 to-white dark:from-gray-900 dark:to-gray-800 pt-24\">\n      {/* Header */}\n      <section className=\"py-16 bg-gradient-to-r from-primary/10 to-secondary/10\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-4xl md:text-5xl font-bold mb-6 bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n              Contact Us\n            </h1>\n            <p className=\"text-xl text-gray-600 dark:text-gray-300 mb-8\">\n              Get in touch with the AfricaMechanize team. We're here to support your journey \n              in sustainable agricultural mechanization, answer your questions, and explore \n              partnership opportunities.\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Information */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold mb-4\">Get In Touch</h2>\n            <p className=\"text-xl text-gray-600 dark:text-gray-300\">\n              Multiple ways to connect with us\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-16\">\n            {contactInfo.map((info, index) => (\n              <Card key={index} className=\"text-center p-6 hover:shadow-lg transition-all duration-300 group cursor-pointer\"\n                    onClick={() => {\n                      if (info.action.startsWith('http') || info.action.startsWith('mailto:')) {\n                        window.open(info.action, '_blank');\n                      } else {\n                        window.location.href = info.action;\n                      }\n                    }}>\n                <CardContent className=\"p-0\">\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-primary to-secondary rounded-lg flex items-center justify-center text-white mx-auto mb-4 group-hover:scale-110 transition-transform\">\n                    {info.icon}\n                  </div>\n                  <h4 className=\"font-semibold mb-2 group-hover:text-primary transition-colors\">{info.title}</h4>\n                  <p className=\"text-sm font-medium mb-1\">{info.details}</p>\n                  <p className=\"text-xs text-gray-600 dark:text-gray-300\">{info.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Form */}\n      <section className=\"py-16 bg-gray-50 dark:bg-gray-900\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-3xl font-bold mb-4\">Send Us a Message</h2>\n              <p className=\"text-xl text-gray-600 dark:text-gray-300\">\n                We'd love to hear from you. Fill out the form below and we'll get back to you as soon as possible.\n              </p>\n            </div>\n\n            <Card className=\"p-8\">\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"name\">Full Name *</Label>\n                    <Input\n                      id=\"name\"\n                      value={formData.name}\n                      onChange={(e) => handleInputChange(\"name\", e.target.value)}\n                      placeholder=\"Your full name\"\n                      required\n                      data-testid=\"input-name\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email Address *</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                      placeholder=\"your.email@example.com\"\n                      required\n                      data-testid=\"input-email\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"organization\">Organization</Label>\n                    <Input\n                      id=\"organization\"\n                      value={formData.organization}\n                      onChange={(e) => handleInputChange(\"organization\", e.target.value)}\n                      placeholder=\"Your organization\"\n                      data-testid=\"input-organization\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"country\">Country</Label>\n                    <Input\n                      id=\"country\"\n                      value={formData.country}\n                      onChange={(e) => handleInputChange(\"country\", e.target.value)}\n                      placeholder=\"Your country\"\n                      data-testid=\"input-country\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"subject\">Subject *</Label>\n                    <Input\n                      id=\"subject\"\n                      value={formData.subject}\n                      onChange={(e) => handleInputChange(\"subject\", e.target.value)}\n                      placeholder=\"Message subject\"\n                      required\n                      data-testid=\"input-subject\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"category\">Inquiry Type</Label>\n                    <Select value={formData.category} onValueChange={(value) => handleInputChange(\"category\", value)}>\n                      <SelectTrigger data-testid=\"select-category\">\n                        <SelectValue placeholder=\"Select inquiry type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {inquiryTypes.map((type) => (\n                          <SelectItem key={type} value={type}>{type}</SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"message\">Message *</Label>\n                  <Textarea\n                    id=\"message\"\n                    value={formData.message}\n                    onChange={(e) => handleInputChange(\"message\", e.target.value)}\n                    placeholder=\"Please describe your inquiry or message in detail...\"\n                    rows={6}\n                    required\n                    data-testid=\"textarea-message\"\n                  />\n                </div>\n\n                <div className=\"flex justify-center\">\n                  <Button \n                    type=\"submit\" \n                    size=\"lg\" \n                    disabled={contactMutation.isPending}\n                    data-testid=\"button-submit-contact\"\n                  >\n                    {contactMutation.isPending ? (\n                      \"Sending...\"\n                    ) : (\n                      <>\n                        <Send className=\"w-5 h-5 mr-2\" />\n                        Send Message\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </form>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* FAQ Section */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-3xl font-bold mb-4\">Frequently Asked Questions</h2>\n              <p className=\"text-xl text-gray-600 dark:text-gray-300\">\n                Find quick answers to common questions\n              </p>\n            </div>\n\n            <div className=\"space-y-6\">\n              {faqItems.map((faq, index) => (\n                <Card key={index} className=\"p-6 hover:shadow-lg transition-all duration-300\">\n                  <CardHeader className=\"p-0 mb-4\">\n                    <CardTitle className=\"text-lg text-primary\">{faq.question}</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"p-0\">\n                    <p className=\"text-gray-600 dark:text-gray-300 leading-relaxed\">\n                      {faq.answer}\n                    </p>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Response Time */}\n      <section className=\"py-16 bg-gradient-to-r from-primary/5 to-secondary/5\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-2xl mx-auto text-center\">\n            <Clock className=\"w-12 h-12 mx-auto mb-4 text-primary\" />\n            <h3 className=\"text-2xl font-bold mb-4\">Response Time</h3>\n            <p className=\"text-lg text-gray-600 dark:text-gray-300 mb-6\">\n              We typically respond to all inquiries within 2-3 business days. For urgent matters \n              related to ongoing webinars or events, please mention this in your message subject line.\n            </p>\n            <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n              Business hours: Monday - Friday, 9:00 AM - 5:00 PM (various time zones across Africa)\n            </p>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":14348},"client/src/pages/Events.jsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Calendar, Clock, MapPin, Users, ExternalLink, Video, ChevronRight } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nexport default function Events() {\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n\n  // Mock events data - replace with actual API call\n  const events = [\n    {\n      id: 1,\n      title: \"International Conference on Sustainable Agricultural Mechanization\",\n      description: \"Join experts from across Africa and the globe to discuss the future of sustainable agricultural mechanization.\",\n      date: new Date(\"2025-03-15\"),\n      endDate: new Date(\"2025-03-17\"),\n      time: \"09:00 AM\",\n      location: \"Nairobi, Kenya\",\n      venue: \"Kenyatta International Convention Centre\",\n      category: \"conference\",\n      type: \"In-Person\",\n      capacity: 500,\n      registered: 324,\n      price: \"Free\",\n      status: \"upcoming\",\n      organizer: \"African Union Commission\",\n      image: \"/api/placeholder/400/250\",\n      tags: [\"Mechanization\", \"Sustainability\", \"Innovation\"]\n    },\n    {\n      id: 2,\n      title: \"F-SAMA Framework Implementation Workshop\",\n      description: \"Hands-on workshop on implementing the Framework for Sustainable Agricultural Mechanization in Africa.\",\n      date: new Date(\"2025-02-28\"),\n      endDate: new Date(\"2025-02-28\"),\n      time: \"02:00 PM\",\n      location: \"Online\",\n      venue: \"Virtual Event\",\n      category: \"workshop\",\n      type: \"Virtual\",\n      capacity: 200,\n      registered: 156,\n      price: \"Free\",\n      status: \"upcoming\",\n      organizer: \"Africa Mechanize\",\n      image: \"/api/placeholder/400/250\",\n      tags: [\"F-SAMA\", \"Workshop\", \"Implementation\"]\n    },\n    {\n      id: 3,\n      title: \"Agricultural Technology Innovation Webinar Series\",\n      description: \"Monthly webinar series featuring the latest innovations in agricultural technology and mechanization.\",\n      date: new Date(\"2025-02-20\"),\n      endDate: new Date(\"2025-02-20\"),\n      time: \"11:00 AM\",\n      location: \"Online\",\n      venue: \"Zoom Platform\",\n      category: \"webinar\",\n      type: \"Virtual\",\n      capacity: 1000,\n      registered: 743,\n      price: \"Free\",\n      status: \"upcoming\",\n      organizer: \"Tech Innovation Hub\",\n      image: \"/api/placeholder/400/250\",\n      tags: [\"Technology\", \"Innovation\", \"Monthly Series\"]\n    },\n    {\n      id: 4,\n      title: \"Youth in Agriculture Mechanization Summit\",\n      description: \"Empowering the next generation of agricultural leaders through mechanization and technology.\",\n      date: new Date(\"2025-04-10\"),\n      endDate: new Date(\"2025-04-12\"),\n      time: \"10:00 AM\",\n      location: \"Accra, Ghana\",\n      venue: \"National Theatre of Ghana\",\n      category: \"summit\",\n      type: \"In-Person\",\n      capacity: 300,\n      registered: 187,\n      price: \"$50\",\n      status: \"upcoming\",\n      organizer: \"Youth Agriculture Network\",\n      image: \"/api/placeholder/400/250\",\n      tags: [\"Youth\", \"Leadership\", \"Future\"]\n    }\n  ];\n\n  const categories = [\n    { id: \"all\", label: \"All Events\", count: events.length },\n    { id: \"conference\", label: \"Conferences\", count: events.filter(e => e.category === \"conference\").length },\n    { id: \"workshop\", label: \"Workshops\", count: events.filter(e => e.category === \"workshop\").length },\n    { id: \"webinar\", label: \"Webinars\", count: events.filter(e => e.category === \"webinar\").length },\n    { id: \"summit\", label: \"Summits\", count: events.filter(e => e.category === \"summit\").length }\n  ];\n\n  const filteredEvents = selectedCategory === \"all\" \n    ? events \n    : events.filter(event => event.category === selectedCategory);\n\n  const upcomingEvents = filteredEvents.filter(event => event.status === \"upcoming\");\n  const pastEvents = filteredEvents.filter(event => event.status === \"past\");\n\n  const EventCard = ({ event }) => (\n    <Card className=\"group hover:shadow-lg transition-all duration-300 border-0 shadow-md overflow-hidden\">\n      <div className=\"aspect-video bg-gradient-to-br from-green-100 to-blue-100 dark:from-green-900 dark:to-blue-900 relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 to-transparent\" />\n        <div className=\"absolute top-4 left-4 flex gap-2\">\n          <Badge className=\"bg-white/90 text-green-700 hover:bg-white\">\n            {event.category}\n          </Badge>\n          <Badge variant={event.type === \"Virtual\" ? \"secondary\" : \"default\"}>\n            {event.type}\n          </Badge>\n        </div>\n        <div className=\"absolute top-4 right-4\">\n          <Badge variant=\"outline\" className=\"bg-white/90 text-gray-700\">\n            {event.price}\n          </Badge>\n        </div>\n      </div>\n      \n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"line-clamp-2 group-hover:text-green-600 transition-colors\">\n          {event.title}\n        </CardTitle>\n        <div className=\"flex flex-wrap gap-4 text-sm text-gray-500 dark:text-gray-400\">\n          <div className=\"flex items-center gap-1\">\n            <Calendar size={14} />\n            <span>\n              {format(event.date, \"MMM dd, yyyy\")}\n              {event.endDate && event.endDate !== event.date && \n                ` - ${format(event.endDate, \"MMM dd, yyyy\")}`\n              }\n            </span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Clock size={14} />\n            <span>{event.time}</span>\n          </div>\n        </div>\n        <div className=\"flex items-center gap-1 text-sm text-gray-500 dark:text-gray-400\">\n          <MapPin size={14} />\n          <span>{event.location}</span>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"pt-0\">\n        <p className=\"text-gray-600 dark:text-gray-300 line-clamp-3 mb-4\">\n          {event.description}\n        </p>\n        \n        <div className=\"flex items-center justify-between mb-4 text-sm\">\n          <div className=\"flex items-center gap-1 text-gray-500\">\n            <Users size={14} />\n            <span>{event.registered}/{event.capacity} registered</span>\n          </div>\n          <span className=\"text-gray-500\">by {event.organizer}</span>\n        </div>\n        \n        <div className=\"flex flex-wrap gap-2 mb-4\">\n          {event.tags.map((tag) => (\n            <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n              {tag}\n            </Badge>\n          ))}\n        </div>\n        \n        <div className=\"flex gap-2\">\n          <Button className=\"flex-1 group-hover:bg-green-600 transition-colors\">\n            {event.category === \"webinar\" ? (\n              <>\n                <Video className=\"w-4 h-4 mr-2\" />\n                Join Webinar\n              </>\n            ) : (\n              <>\n                Register Now\n                <ChevronRight className=\"w-4 h-4 ml-2\" />\n              </>\n            )}\n          </Button>\n          <Button variant=\"outline\" size=\"icon\">\n            <ExternalLink className=\"w-4 h-4\" />\n          </Button>\n        </div>\n        \n        {/* Progress bar for registration */}\n        <div className=\"mt-4\">\n          <div className=\"flex justify-between text-xs text-gray-500 mb-1\">\n            <span>Registration Progress</span>\n            <span>{Math.round((event.registered / event.capacity) * 100)}%</span>\n          </div>\n          <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n            <div \n              className=\"bg-gradient-to-r from-green-500 to-blue-500 h-2 rounded-full transition-all duration-300\"\n              style={{ width: `${(event.registered / event.capacity) * 100}%` }}\n            />\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"min-h-screen py-20 bg-gradient-to-br from-gray-50 to-green-50 dark:from-gray-900 dark:to-gray-800\">\n      <div className=\"container mx-auto px-6\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-4xl md:text-5xl font-bold mb-6 bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent\">\n            Events & Learning Opportunities\n          </h1>\n          <p className=\"text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto\">\n            Join our community of agricultural mechanization experts through conferences, \n            workshops, webinars, and summits designed to advance sustainable farming practices across Africa.\n          </p>\n        </div>\n\n        {/* Category Filter */}\n        <div className=\"flex flex-wrap justify-center gap-4 mb-12\">\n          {categories.map((category) => (\n            <Button\n              key={category.id}\n              variant={selectedCategory === category.id ? \"default\" : \"outline\"}\n              onClick={() => setSelectedCategory(category.id)}\n              className=\"capitalize\"\n            >\n              {category.label} ({category.count})\n            </Button>\n          ))}\n        </div>\n\n        {/* Events Tabs */}\n        <Tabs defaultValue=\"upcoming\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2 max-w-md mx-auto mb-12\">\n            <TabsTrigger value=\"upcoming\">Upcoming Events</TabsTrigger>\n            <TabsTrigger value=\"past\">Past Events</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"upcoming\">\n            {upcomingEvents.length > 0 ? (\n              <div className=\"grid gap-8 md:grid-cols-2 lg:grid-cols-3 max-w-7xl mx-auto\">\n                {upcomingEvents.map((event) => (\n                  <EventCard key={event.id} event={event} />\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-16\">\n                <Calendar className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold text-gray-600 dark:text-gray-300 mb-2\">\n                  No upcoming events\n                </h3>\n                <p className=\"text-gray-500 dark:text-gray-400\">\n                  Check back soon for new events and opportunities.\n                </p>\n              </div>\n            )}\n          </TabsContent>\n          \n          <TabsContent value=\"past\">\n            {pastEvents.length > 0 ? (\n              <div className=\"grid gap-8 md:grid-cols-2 lg:grid-cols-3 max-w-7xl mx-auto\">\n                {pastEvents.map((event) => (\n                  <EventCard key={event.id} event={event} />\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-16\">\n                <Calendar className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold text-gray-600 dark:text-gray-300 mb-2\">\n                  No past events\n                </h3>\n                <p className=\"text-gray-500 dark:text-gray-400\">\n                  Past events will appear here once they're completed.\n                </p>\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n\n        {/* Call to Action */}\n        <div className=\"mt-20 text-center\">\n          <div className=\"bg-gradient-to-r from-green-600 to-blue-600 rounded-2xl p-12 text-white\">\n            <h2 className=\"text-3xl font-bold mb-4\">\n              Host Your Own Event\n            </h2>\n            <p className=\"text-xl mb-8 opacity-90 max-w-2xl mx-auto\">\n              Interested in organizing an event for the agricultural mechanization community? \n              We'd love to help you reach our global network of experts and practitioners.\n            </p>\n            <Button size=\"lg\" variant=\"secondary\" className=\"px-8 py-3 text-lg font-semibold\">\n              Submit Event Proposal\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12055},"client/src/pages/Framework.jsx":{"content":"import { FrameworkGrid } from \"../components/FrameworkGrid\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Sprout, Target, Users, Cog, BookOpen, TrendingUp } from \"lucide-react\";\n\nexport default function Framework() {\n  const frameworkPrinciples = [\n    {\n      icon: <Target className=\"w-8 h-8\" />,\n      title: \"Strategic Alignment\",\n      description: \"Aligning mechanization initiatives with national agricultural development strategies and food security goals.\"\n    },\n    {\n      icon: <Users className=\"w-8 h-8\" />,\n      title: \"Inclusive Approach\",\n      description: \"Ensuring smallholder farmers, women, and youth have equal access to mechanization opportunities and benefits.\"\n    },\n    {\n      icon: <Sprout className=\"w-8 h-8\" />,\n      title: \"Environmental Sustainability\",\n      description: \"Promoting climate-smart mechanization that preserves soil health and reduces environmental impact.\"\n    },\n    {\n      icon: <Cog className=\"w-8 h-8\" />,\n      title: \"Appropriate Technology\",\n      description: \"Selecting and adapting mechanization technologies that fit local conditions, crops, and farming systems.\"\n    }\n  ];\n\n  const implementationSteps = [\n    {\n      step: \"01\",\n      title: \"Assessment & Planning\",\n      description: \"Comprehensive analysis of current mechanization status, needs assessment, and strategic planning.\"\n    },\n    {\n      step: \"02\", \n      title: \"Stakeholder Engagement\",\n      description: \"Building partnerships with farmers, private sector, government, and development organizations.\"\n    },\n    {\n      step: \"03\",\n      title: \"Capacity Building\",\n      description: \"Training programs for farmers, technicians, and service providers on equipment operation and maintenance.\"\n    },\n    {\n      step: \"04\",\n      title: \"Technology Deployment\",\n      description: \"Gradual introduction of appropriate mechanization technologies with proper support systems.\"\n    },\n    {\n      step: \"05\",\n      title: \"Monitoring & Evaluation\",\n      description: \"Continuous assessment of impacts, outcomes, and adaptive management for sustainable results.\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen py-20 bg-gradient-to-br from-gray-50 to-green-50 dark:from-gray-900 dark:to-gray-800\">\n      {/* Hero Section */}\n      <div className=\"container mx-auto px-6 text-center mb-20\">\n        <Badge className=\"mb-4 px-4 py-2 bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">\n          F-SAMA Framework\n        </Badge>\n        <h1 className=\"text-4xl md:text-6xl font-bold mb-6 bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent\">\n          Framework for Sustainable Agricultural Mechanization in Africa\n        </h1>\n        <p className=\"text-xl text-gray-600 dark:text-gray-300 max-w-4xl mx-auto leading-relaxed\">\n          A comprehensive approach to transforming African agriculture through sustainable, \n          inclusive, and climate-smart mechanization strategies that empower farmers and \n          strengthen food systems across the continent.\n        </p>\n      </div>\n\n      {/* Framework Principles */}\n      <div className=\"container mx-auto px-6 mb-20\">\n        <h2 className=\"text-3xl font-bold text-center mb-12 text-gray-800 dark:text-gray-200\">\n          Core Principles\n        </h2>\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n          {frameworkPrinciples.map((principle, index) => (\n            <Card key={index} className=\"text-center border-0 shadow-lg hover:shadow-xl transition-shadow duration-300\">\n              <CardHeader className=\"pb-4\">\n                <div className=\"w-16 h-16 mx-auto mb-4 bg-gradient-to-br from-green-500 to-blue-500 rounded-full flex items-center justify-center text-white\">\n                  {principle.icon}\n                </div>\n                <CardTitle className=\"text-lg text-gray-800 dark:text-gray-200\">\n                  {principle.title}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600 dark:text-gray-300 leading-relaxed\">\n                  {principle.description}\n                </p>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n\n      {/* Framework Grid */}\n      <div className=\"mb-20\">\n        <FrameworkGrid />\n      </div>\n\n      {/* Implementation Process */}\n      <div className=\"container mx-auto px-6 mb-20\">\n        <h2 className=\"text-3xl font-bold text-center mb-12 text-gray-800 dark:text-gray-200\">\n          Implementation Process\n        </h2>\n        <div className=\"max-w-4xl mx-auto\">\n          {implementationSteps.map((step, index) => (\n            <div key={index} className=\"flex items-start mb-8 last:mb-0\">\n              <div className=\"flex-shrink-0 w-16 h-16 bg-gradient-to-br from-green-500 to-blue-500 rounded-full flex items-center justify-center text-white font-bold text-lg mr-6\">\n                {step.step}\n              </div>\n              <div className=\"flex-1\">\n                <h3 className=\"text-xl font-semibold mb-2 text-gray-800 dark:text-gray-200\">\n                  {step.title}\n                </h3>\n                <p className=\"text-gray-600 dark:text-gray-300 leading-relaxed\">\n                  {step.description}\n                </p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Impact Metrics */}\n      <div className=\"container mx-auto px-6 mb-20\">\n        <div className=\"bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-8 border-0\">\n          <h2 className=\"text-3xl font-bold text-center mb-12 text-gray-800 dark:text-gray-200\">\n            Expected Impact\n          </h2>\n          <div className=\"grid md:grid-cols-3 gap-8 text-center\">\n            <div className=\"p-6\">\n              <div className=\"w-16 h-16 mx-auto mb-4 bg-gradient-to-br from-green-500 to-blue-500 rounded-full flex items-center justify-center text-white\">\n                <TrendingUp className=\"w-8 h-8\" />\n              </div>\n              <h3 className=\"text-2xl font-bold text-green-600 mb-2\">40%</h3>\n              <p className=\"text-gray-600 dark:text-gray-300\">Increase in Agricultural Productivity</p>\n            </div>\n            <div className=\"p-6\">\n              <div className=\"w-16 h-16 mx-auto mb-4 bg-gradient-to-br from-green-500 to-blue-500 rounded-full flex items-center justify-center text-white\">\n                <Users className=\"w-8 h-8\" />\n              </div>\n              <h3 className=\"text-2xl font-bold text-blue-600 mb-2\">2M+</h3>\n              <p className=\"text-gray-600 dark:text-gray-300\">Farmers Empowered</p>\n            </div>\n            <div className=\"p-6\">\n              <div className=\"w-16 h-16 mx-auto mb-4 bg-gradient-to-br from-green-500 to-blue-500 rounded-full flex items-center justify-center text-white\">\n                <Sprout className=\"w-8 h-8\" />\n              </div>\n              <h3 className=\"text-2xl font-bold text-green-600 mb-2\">30%</h3>\n              <p className=\"text-gray-600 dark:text-gray-300\">Reduction in Environmental Impact</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Call to Action */}\n      <div className=\"container mx-auto px-6 text-center\">\n        <div className=\"bg-gradient-to-r from-green-600 to-blue-600 rounded-2xl p-12 text-white\">\n          <h2 className=\"text-3xl font-bold mb-4\">\n            Join the Agricultural Transformation\n          </h2>\n          <p className=\"text-xl mb-8 opacity-90 max-w-2xl mx-auto\">\n            Be part of the movement to revolutionize African agriculture through \n            sustainable mechanization practices and innovative solutions.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button size=\"lg\" variant=\"secondary\" className=\"px-8 py-3 text-lg font-semibold\">\n              <BookOpen className=\"w-5 h-5 mr-2\" />\n              Download Framework Guide\n            </Button>\n            <Button size=\"lg\" variant=\"outline\" className=\"px-8 py-3 text-lg font-semibold bg-white/10 border-white/30 text-white hover:bg-white/20\">\n              Get Involved\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8390},"client/src/pages/Home.jsx":{"content":"\nimport { Hero } from \"../components/Hero\";\nimport { StatsCounter } from \"../components/StatsCounter\";\nimport { FrameworkGrid } from \"../components/FrameworkGrid\";\nimport { WebinarSection } from \"../components/WebinarSection\";\nimport { NewsEvents } from \"../components/NewsEvents\";\nimport { ResourceLibrary } from \"../components/ResourceLibrary\";\nimport { ReadingMaterials } from \"../components/ReadingMaterials\";\nimport { NewsletterSignup } from \"../components/NewsletterSignup\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen\">\n      <Hero />\n      \n      <StatsCounter />\n      \n      <FrameworkGrid />\n      \n      {/* Featured Content Section */}\n      <section className=\"py-20 bg-white dark:bg-gray-800\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            {/* Content */}\n            <div className=\"space-y-6\">\n              <h2 className=\"text-4xl font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n                Consultative Meeting on Mechanization Strategy\n              </h2>\n              <p className=\"text-xl text-gray-600 dark:text-gray-400\">\n                New models for sustainable agricultural mechanization in sub-Saharan Africa\n              </p>\n              <p className=\"text-gray-600 dark:text-gray-400 leading-relaxed\">\n                Discover innovative approaches to agricultural mechanization that can transform \n                farming practices across Africa. Our comprehensive strategy focuses on sustainable \n                solutions that empower farmers and strengthen food security.\n              </p>\n              <Button \n                size=\"lg\"\n                className=\"bg-primary hover:bg-primary/90 text-white px-8 py-4 rounded-full font-semibold transition-all duration-300 transform hover:scale-105 shadow-lg\"\n              >\n                Read More\n              </Button>\n            </div>\n            \n            {/* Image */}\n            <div>\n              <img \n                src=\"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\" \n                alt=\"Agricultural mechanization conference\" \n                className=\"rounded-2xl shadow-2xl w-full h-auto\"\n              />\n            </div>\n          </div>\n        </div>\n      </section>\n      \n      <NewsEvents />\n      \n      <WebinarSection />\n      \n      <ResourceLibrary />\n      \n      <ReadingMaterials />\n      \n      <NewsletterSignup />\n    </div>\n  );\n}","size_bytes":2760},"client/src/pages/Resources.jsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Download, \n  FileText, \n  BookOpen, \n  Video, \n  ExternalLink, \n  Search, \n  Calendar,\n  Globe,\n  ArrowRight\n} from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport default function Resources() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedLanguage, setSelectedLanguage] = useState(\"all\");\n  const [selectedType, setSelectedType] = useState(\"all\");\n\n  const { data: webinars } = useQuery({\n    queryKey: [\"/api/webinars\"],\n  });\n\n  // Sample resources based on actual africamechanize.org content\n  const resources = [\n    {\n      id: 1,\n      title: \"Sustainable Agricultural Mechanization - A Framework for Africa\",\n      description: \"The framework presents a menu of priority elements to be considered by African countries to develop sustainable agricultural mechanization programs.\",\n      type: \"Framework Document\",\n      language: \"English\",\n      category: \"Webinar 1\",\n      downloadUrl: \"https://africamechanize.org/resource/sustainable-agricultural-mechanization-a-framework-for-africa\",\n      icon: <FileText className=\"w-5 h-5\" />\n    },\n    {\n      id: 2,\n      title: \"La Mécanisation Agricole Durable. Cadre Stratégique pour l'Afrique\",\n      description: \"La mécanisation agricole durable peut sauver l'Afrique de la faim et de la pauvreté rurale.\",\n      type: \"Framework Document\",\n      language: \"French\",\n      category: \"Webinar 1\",\n      downloadUrl: \"https://africamechanize.org/resource/la-mecanisation-agricole-durable-cadre-strategique-pour-lafrique\",\n      icon: <FileText className=\"w-5 h-5\" />\n    },\n    {\n      id: 3,\n      title: \"AfricaMechanize Newsletter - Issue 02 (2024)\",\n      description: \"This is the second quarterly newsletter of the AfricaMechanize Platform, with updates on activities, events, and developments in agricultural mechanization.\",\n      type: \"Newsletter\",\n      language: \"English\",\n      category: \"Magazine\",\n      downloadUrl: \"https://africamechanize.org/resource/africamechanize-newsletter-issue-02\",\n      icon: <BookOpen className=\"w-5 h-5\" />\n    },\n    {\n      id: 4,\n      title: \"Concept Note: AfricaMechanize Webinar No12\",\n      description: \"The Objective of Webinar 12 is to initiate collaboration between African countries for revamping manufacturing of agricultural machinery in Africa.\",\n      type: \"Concept Note\",\n      language: \"English\",\n      category: \"Upcoming Webinars\",\n      downloadUrl: \"https://africamechanize.org/resource/concept-note-africamechanize-webinar-no12\",\n      icon: <FileText className=\"w-5 h-5\" />\n    },\n    {\n      id: 5,\n      title: \"Note conceptuelle: AfricaMechanize Webinaire 12\",\n      description: \"L'objectif du webinaire 12 est d'initier une collaboration entre les pays africains pour relancer la fabrication des machines agricoles en Afrique.\",\n      type: \"Concept Note\",\n      language: \"French\",\n      category: \"Upcoming Webinars\",\n      downloadUrl: \"https://africamechanize.org/resource/note-conceptuelle-africamechanize-webinaire-12\",\n      icon: <FileText className=\"w-5 h-5\" />\n    },\n    {\n      id: 6,\n      title: \"Webinar 12: Revamping Manufacturing of Agricultural Machinery in Africa\",\n      description: \"WEBINAR No. 12: Revamping Manufacturing of Agricultural Machinery in Africa\",\n      type: \"Webinar Announcement\",\n      language: \"English\",\n      category: \"Upcoming Webinars\",\n      downloadUrl: \"https://africamechanize.org/resource/webinar-12-announcement\",\n      icon: <Video className=\"w-5 h-5\" />\n    }\n  ];\n\n  // Additional resource categories\n  const resourceCategories = [\n    {\n      name: \"Framework Documents\",\n      count: resources.filter(r => r.type === \"Framework Document\").length,\n      description: \"Core documents outlining the F-SAMA framework and strategic guidelines\"\n    },\n    {\n      name: \"Webinar Materials\",\n      count: resources.filter(r => r.type.includes(\"Webinar\")).length,\n      description: \"Presentations, recordings, and materials from AfricaMechanize webinars\"\n    },\n    {\n      name: \"Publications\",\n      count: resources.filter(r => r.type === \"Newsletter\").length,\n      description: \"Newsletters, reports, and research publications\"\n    },\n    {\n      name: \"Policy Documents\",\n      count: resources.filter(r => r.type === \"Concept Note\").length,\n      description: \"Policy briefs, concept notes, and strategic documents\"\n    }\n  ];\n\n  const filteredResources = resources.filter(resource => {\n    const matchesSearch = searchTerm === \"\" || \n      resource.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      resource.description.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesLanguage = selectedLanguage === \"all\" || resource.language === selectedLanguage;\n    const matchesType = selectedType === \"all\" || resource.type === selectedType;\n    \n    return matchesSearch && matchesLanguage && matchesType;\n  });\n\n  const languages = [...new Set(resources.map(r => r.language))];\n  const types = [...new Set(resources.map(r => r.type))];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-gray-50 to-white dark:from-gray-900 dark:to-gray-800 pt-24\">\n      {/* Header */}\n      <section className=\"py-16 bg-gradient-to-r from-primary/10 to-secondary/10\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-4xl md:text-5xl font-bold mb-6 bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n              Resources\n            </h1>\n            <p className=\"text-xl text-gray-600 dark:text-gray-300 mb-8\">\n              Access comprehensive resources on sustainable agricultural mechanization including \n              framework documents, webinar presentations, research publications, and policy materials. \n              All resources are available in multiple languages to support the Pan-African community.\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Resource Categories Overview */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold mb-4\">Resource Categories</h2>\n            <p className=\"text-xl text-gray-600 dark:text-gray-300\">\n              Explore our comprehensive collection of mechanization resources\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12\">\n            {resourceCategories.map((category, index) => (\n              <Card key={index} className=\"text-center p-6 hover:shadow-lg transition-all duration-300 border-2 border-primary/20\">\n                <CardContent className=\"p-0\">\n                  <div className=\"text-3xl font-bold text-primary mb-2\">{category.count}</div>\n                  <h4 className=\"font-semibold mb-2\">{category.name}</h4>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                    {category.description}\n                  </p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Filters */}\n      <section className=\"py-8 border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"flex flex-col lg:flex-row gap-4 items-center\">\n            <div className=\"relative flex-1 max-w-md\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n              <Input\n                placeholder=\"Search resources...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-resources\"\n              />\n            </div>\n            \n            <div className=\"flex gap-4\">\n              <Select value={selectedLanguage} onValueChange={setSelectedLanguage}>\n                <SelectTrigger className=\"w-48\" data-testid=\"select-language\">\n                  <SelectValue placeholder=\"All Languages\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Languages</SelectItem>\n                  {languages.map(language => (\n                    <SelectItem key={language} value={language}>{language}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Select value={selectedType} onValueChange={setSelectedType}>\n                <SelectTrigger className=\"w-48\" data-testid=\"select-type\">\n                  <SelectValue placeholder=\"All Types\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  {types.map(type => (\n                    <SelectItem key={type} value={type}>{type}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Resources Grid */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-6\">\n          <Tabs defaultValue=\"all\" className=\"w-full\">\n            <div className=\"flex justify-center mb-8\">\n              <TabsList className=\"grid w-full max-w-md grid-cols-2\">\n                <TabsTrigger value=\"all\" data-testid=\"tab-all-resources\">\n                  All Resources ({filteredResources.length})\n                </TabsTrigger>\n                <TabsTrigger value=\"featured\" data-testid=\"tab-featured-resources\">\n                  Featured Downloads\n                </TabsTrigger>\n              </TabsList>\n            </div>\n\n            <TabsContent value=\"all\" className=\"space-y-8\">\n              {filteredResources.length > 0 ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                  {filteredResources.map((resource) => (\n                    <Card key={resource.id} className=\"group hover:shadow-lg transition-all duration-300\">\n                      <CardHeader className=\"pb-4\">\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {resource.type}\n                          </Badge>\n                          <div className=\"flex items-center gap-2\">\n                            <Globe className=\"w-4 h-4 text-gray-400\" />\n                            <span className=\"text-sm text-gray-500\">{resource.language}</span>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-start gap-3\">\n                          <div className=\"text-primary flex-shrink-0 mt-1\">\n                            {resource.icon}\n                          </div>\n                          <div className=\"flex-1\">\n                            <CardTitle className=\"text-lg line-clamp-2 group-hover:text-primary transition-colors\">\n                              {resource.title}\n                            </CardTitle>\n                          </div>\n                        </div>\n                        \n                        <CardDescription className=\"line-clamp-3 mt-3\">\n                          {resource.description}\n                        </CardDescription>\n                      </CardHeader>\n\n                      <CardContent className=\"pt-0\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-gray-500\">\n                            Section: {resource.category}\n                          </span>\n                          <Button \n                            size=\"sm\"\n                            onClick={() => window.open(resource.downloadUrl, '_blank')}\n                            data-testid={`button-download-${resource.id}`}\n                          >\n                            <Download className=\"w-4 h-4 mr-2\" />\n                            Access\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-16\">\n                  <FileText className=\"w-16 h-16 mx-auto mb-4 text-gray-400\" />\n                  <h3 className=\"text-xl font-semibold mb-2\">No Resources Found</h3>\n                  <p className=\"text-gray-600 dark:text-gray-300 mb-6\">\n                    {searchTerm || selectedLanguage !== \"all\" || selectedType !== \"all\" \n                      ? \"Try adjusting your search or filter criteria.\" \n                      : \"No resources are currently available.\"\n                    }\n                  </p>\n                  {(searchTerm || selectedLanguage !== \"all\" || selectedType !== \"all\") && (\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => {\n                        setSearchTerm(\"\");\n                        setSelectedLanguage(\"all\");\n                        setSelectedType(\"all\");\n                      }}\n                    >\n                      Clear Filters\n                    </Button>\n                  )}\n                </div>\n              )}\n            </TabsContent>\n\n            <TabsContent value=\"featured\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                <Card className=\"p-8 bg-gradient-to-br from-primary/5 to-secondary/5 border-2 border-primary/20\">\n                  <CardHeader className=\"p-0 mb-6\">\n                    <div className=\"flex items-center gap-3 mb-4\">\n                      <FileText className=\"w-8 h-8 text-primary\" />\n                      <CardTitle className=\"text-2xl\">F-SAMA Framework</CardTitle>\n                    </div>\n                    <CardDescription className=\"text-base\">\n                      The complete Framework for Sustainable Agricultural Mechanization in Africa. \n                      Available in English and French.\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"p-0\">\n                    <div className=\"flex gap-4\">\n                      <Button \n                        onClick={() => window.open(\"https://africamechanize.org/resource/sustainable-agricultural-mechanization-a-framework-for-africa\", '_blank')}\n                        className=\"flex-1\"\n                      >\n                        <ExternalLink className=\"w-4 h-4 mr-2\" />\n                        English\n                      </Button>\n                      <Button \n                        variant=\"outline\"\n                        onClick={() => window.open(\"https://africamechanize.org/resource/la-mecanisation-agricole-durable-cadre-strategique-pour-lafrique\", '_blank')}\n                        className=\"flex-1\"\n                      >\n                        <ExternalLink className=\"w-4 h-4 mr-2\" />\n                        Français\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"p-8 bg-gradient-to-br from-secondary/5 to-primary/5 border-2 border-secondary/20\">\n                  <CardHeader className=\"p-0 mb-6\">\n                    <div className=\"flex items-center gap-3 mb-4\">\n                      <BookOpen className=\"w-8 h-8 text-secondary\" />\n                      <CardTitle className=\"text-2xl\">Latest Newsletter</CardTitle>\n                    </div>\n                    <CardDescription className=\"text-base\">\n                      Stay updated with the latest developments in agricultural mechanization \n                      across Africa through our quarterly newsletter.\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"p-0\">\n                    <Button \n                      onClick={() => window.open(\"https://africamechanize.org/resource/africamechanize-newsletter-issue-02\", '_blank')}\n                      className=\"w-full bg-secondary hover:bg-secondary/90\"\n                    >\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Download Issue 02 (2024)\n                    </Button>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </section>\n\n      {/* Related Webinars */}\n      {webinars && webinars.length > 0 && (\n        <section className=\"py-16 bg-gray-50 dark:bg-gray-900\">\n          <div className=\"container mx-auto px-6\">\n            <div className=\"text-center mb-12\">\n              <h3 className=\"text-3xl font-bold mb-4\">Related Webinars</h3>\n              <p className=\"text-xl text-gray-600 dark:text-gray-300\">\n                Access webinar recordings and presentations\n              </p>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {webinars.slice(0, 3).map((webinar) => (\n                <Card key={webinar.id} className=\"group hover:shadow-lg transition-all duration-300\">\n                  <CardHeader>\n                    <div className=\"flex items-center gap-2 mb-3\">\n                      <Calendar className=\"w-4 h-4 text-gray-500\" />\n                      <span className=\"text-sm text-gray-500\">\n                        {new Date(webinar.scheduledDate).toLocaleDateString()}\n                      </span>\n                      <Badge variant={webinar.status === 'completed' ? 'secondary' : 'default'} className=\"ml-auto\">\n                        {webinar.status}\n                      </Badge>\n                    </div>\n                    <CardTitle className=\"line-clamp-2 group-hover:text-primary transition-colors\">\n                      {webinar.title}\n                    </CardTitle>\n                    <CardDescription className=\"line-clamp-3\">\n                      {webinar.shortDescription || webinar.description}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <Button asChild className=\"w-full\">\n                      <a href={`/webinars/${webinar.slug}`}>\n                        View Resources\n                        <ArrowRight className=\"w-4 h-4 ml-2\" />\n                      </a>\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n            \n            <div className=\"text-center mt-8\">\n              <Button variant=\"outline\" asChild>\n                <a href=\"/webinars\">\n                  View All Webinars\n                  <ArrowRight className=\"w-4 h-4 ml-2\" />\n                </a>\n              </Button>\n            </div>\n          </div>\n        </section>\n      )}\n    </div>\n  );\n}","size_bytes":19433},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/auth/LoginForm.jsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { Eye, EyeOff, Mail, Lock, Loader2 } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { useLogin, useForgotPassword } from '@/hooks/useAuth';\nimport { loginSchema } from '@shared/schema';\nimport { Link } from 'wouter';\n\nexport function LoginForm({ onSuccess }) {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showForgotPassword, setShowForgotPassword] = useState(false);\n  \n  const loginMutation = useLogin();\n  const forgotPasswordMutation = useForgotPassword();\n\n  const form = useForm({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n    },\n  });\n\n  const forgotPasswordForm = useForm({\n    resolver: zodResolver(loginSchema.pick({ email: true })),\n    defaultValues: {\n      email: '',\n    },\n  });\n\n  const onSubmit = async (data) => {\n    try {\n      await loginMutation.mutateAsync(data);\n      onSuccess?.();\n    } catch (error) {\n      // Error is handled by the mutation's onError callback\n    }\n  };\n\n  const onForgotPassword = async (data) => {\n    try {\n      await forgotPasswordMutation.mutateAsync(data.email);\n      setShowForgotPassword(false);\n      forgotPasswordForm.reset();\n    } catch (error) {\n      // Error is handled by the mutation's onError callback\n    }\n  };\n\n  if (showForgotPassword) {\n    return (\n      <Card className=\"w-full max-w-md mx-auto\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold text-center\">Reset Password</CardTitle>\n          <CardDescription className=\"text-center\">\n            Enter your email address and we'll send you a reset link\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...forgotPasswordForm}>\n            <form onSubmit={forgotPasswordForm.handleSubmit(onForgotPassword)} className=\"space-y-4\">\n              <FormField\n                control={forgotPasswordForm.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email Address</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Mail className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                        <Input\n                          {...field}\n                          type=\"email\"\n                          placeholder=\"Enter your email\"\n                          className=\"pl-10\"\n                          data-testid=\"input-forgot-email\"\n                        />\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <div className=\"space-y-2\">\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={forgotPasswordMutation.isPending}\n                  data-testid=\"button-send-reset\"\n                >\n                  {forgotPasswordMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Sending Reset Link...\n                    </>\n                  ) : (\n                    'Send Reset Link'\n                  )}\n                </Button>\n                \n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  className=\"w-full\"\n                  onClick={() => setShowForgotPassword(false)}\n                  data-testid=\"button-back-to-login\"\n                >\n                  Back to Login\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader className=\"space-y-1\">\n        <CardTitle className=\"text-2xl font-bold text-center\">Welcome Back</CardTitle>\n        <CardDescription className=\"text-center\">\n          Sign in to your Africa Mechanize account\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email Address</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Mail className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        {...field}\n                        type=\"email\"\n                        placeholder=\"Enter your email\"\n                        className=\"pl-10\"\n                        data-testid=\"input-login-email\"\n                      />\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Password</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        {...field}\n                        type={showPassword ? 'text' : 'password'}\n                        placeholder=\"Enter your password\"\n                        className=\"pl-10 pr-10\"\n                        data-testid=\"input-login-password\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                        onClick={() => setShowPassword(!showPassword)}\n                        data-testid=\"button-toggle-password\"\n                      >\n                        {showPassword ? (\n                          <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                        ) : (\n                          <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                        )}\n                      </Button>\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end\">\n              <Button\n                type=\"button\"\n                variant=\"link\"\n                className=\"px-0 font-normal\"\n                onClick={() => setShowForgotPassword(true)}\n                data-testid=\"button-forgot-password\"\n              >\n                Forgot password?\n              </Button>\n            </div>\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={loginMutation.isPending}\n              data-testid=\"button-login\"\n            >\n              {loginMutation.isPending ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Signing In...\n                </>\n              ) : (\n                'Sign In'\n              )}\n            </Button>\n          </form>\n        </Form>\n\n        <div className=\"mt-4 text-center text-sm\">\n          <span className=\"text-muted-foreground\">Don't have an account? </span>\n          <Link href=\"/register\">\n            <Button variant=\"link\" className=\"px-0 font-semibold\" data-testid=\"link-register\">\n              Create Account\n            </Button>\n          </Link>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8275},"client/src/components/auth/RegisterForm.jsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { Eye, EyeOff, Mail, Lock, User, Building, Globe, Loader2, CheckCircle } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from '@/components/ui/form';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useRegister } from '@/hooks/useAuth';\nimport { registerSchema } from '@shared/schema';\nimport { Link } from 'wouter';\n\nconst countries = [\n  'Algeria', 'Angola', 'Benin', 'Botswana', 'Burkina Faso', 'Burundi', 'Cameroon', 'Cape Verde',\n  'Central African Republic', 'Chad', 'Comoros', 'Congo', 'Democratic Republic of Congo', 'Djibouti',\n  'Egypt', 'Equatorial Guinea', 'Eritrea', 'Eswatini', 'Ethiopia', 'Gabon', 'Gambia', 'Ghana',\n  'Guinea', 'Guinea-Bissau', 'Ivory Coast', 'Kenya', 'Lesotho', 'Liberia', 'Libya', 'Madagascar',\n  'Malawi', 'Mali', 'Mauritania', 'Mauritius', 'Morocco', 'Mozambique', 'Namibia', 'Niger',\n  'Nigeria', 'Rwanda', 'São Tomé and Príncipe', 'Senegal', 'Seychelles', 'Sierra Leone', 'Somalia',\n  'South Africa', 'South Sudan', 'Sudan', 'Tanzania', 'Togo', 'Tunisia', 'Uganda', 'Zambia', 'Zimbabwe',\n  'Other'\n];\n\nexport function RegisterForm({ onSuccess }) {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [registrationSuccess, setRegistrationSuccess] = useState(false);\n  \n  const registerMutation = useRegister();\n\n  const form = useForm({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n      confirmPassword: '',\n      firstName: '',\n      lastName: '',\n      organization: '',\n      country: '',\n    },\n  });\n\n  const onSubmit = async (data) => {\n    try {\n      await registerMutation.mutateAsync(data);\n      setRegistrationSuccess(true);\n      form.reset();\n    } catch (error) {\n      // Error is handled by the mutation's onError callback\n    }\n  };\n\n  if (registrationSuccess) {\n    return (\n      <Card className=\"w-full max-w-md mx-auto\">\n        <CardHeader className=\"text-center space-y-4\">\n          <div className=\"mx-auto w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n            <CheckCircle className=\"h-6 w-6 text-green-600\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">Registration Successful!</CardTitle>\n          <CardDescription>\n            Please check your email to verify your account before signing in.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"p-4 bg-green-50 rounded-lg border border-green-200\">\n              <p className=\"text-sm text-green-800\">\n                We've sent a verification email to your inbox. Please click the link in the email \n                to activate your account and access all features.\n              </p>\n            </div>\n            \n            <Button \n              className=\"w-full\" \n              onClick={() => setRegistrationSuccess(false)}\n              data-testid=\"button-register-another\"\n            >\n              Register Another Account\n            </Button>\n            \n            <div className=\"text-center\">\n              <span className=\"text-muted-foreground text-sm\">Already have an account? </span>\n              <Link href=\"/login\">\n                <Button variant=\"link\" className=\"px-0 font-semibold\" data-testid=\"link-login-from-success\">\n                  Sign In\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader className=\"space-y-1\">\n        <CardTitle className=\"text-2xl font-bold text-center\">Create Account</CardTitle>\n        <CardDescription className=\"text-center\">\n          Join the Africa Mechanize community\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"firstName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>First Name</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <User className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                        <Input\n                          {...field}\n                          placeholder=\"First name\"\n                          className=\"pl-10\"\n                          data-testid=\"input-first-name\"\n                        />\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"lastName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Last Name</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <User className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                        <Input\n                          {...field}\n                          placeholder=\"Last name\"\n                          className=\"pl-10\"\n                          data-testid=\"input-last-name\"\n                        />\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email Address</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Mail className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        {...field}\n                        type=\"email\"\n                        placeholder=\"Enter your email\"\n                        className=\"pl-10\"\n                        data-testid=\"input-register-email\"\n                      />\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"organization\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Organization (Optional)</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Building className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        {...field}\n                        placeholder=\"Your organization or company\"\n                        className=\"pl-10\"\n                        data-testid=\"input-organization\"\n                      />\n                    </div>\n                  </FormControl>\n                  <FormDescription>\n                    University, company, or organization you're affiliated with\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"country\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Country (Optional)</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-country\">\n                        <div className=\"flex items-center\">\n                          <Globe className=\"mr-2 h-4 w-4 text-muted-foreground\" />\n                          <SelectValue placeholder=\"Select your country\" />\n                        </div>\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {countries.map((country) => (\n                        <SelectItem key={country} value={country}>\n                          {country}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Password</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        {...field}\n                        type={showPassword ? 'text' : 'password'}\n                        placeholder=\"Create a password\"\n                        className=\"pl-10 pr-10\"\n                        data-testid=\"input-register-password\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                        onClick={() => setShowPassword(!showPassword)}\n                        data-testid=\"button-toggle-register-password\"\n                      >\n                        {showPassword ? (\n                          <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                        ) : (\n                          <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                        )}\n                      </Button>\n                    </div>\n                  </FormControl>\n                  <FormDescription>\n                    Minimum 6 characters\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"confirmPassword\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Confirm Password</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        {...field}\n                        type={showConfirmPassword ? 'text' : 'password'}\n                        placeholder=\"Confirm your password\"\n                        className=\"pl-10 pr-10\"\n                        data-testid=\"input-confirm-password\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                        data-testid=\"button-toggle-confirm-password\"\n                      >\n                        {showConfirmPassword ? (\n                          <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                        ) : (\n                          <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                        )}\n                      </Button>\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={registerMutation.isPending}\n              data-testid=\"button-register\"\n            >\n              {registerMutation.isPending ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Creating Account...\n                </>\n              ) : (\n                'Create Account'\n              )}\n            </Button>\n          </form>\n        </Form>\n\n        <div className=\"mt-4 text-center text-sm\">\n          <span className=\"text-muted-foreground\">Already have an account? </span>\n          <Link href=\"/login\">\n            <Button variant=\"link\" className=\"px-0 font-semibold\" data-testid=\"link-login\">\n              Sign In\n            </Button>\n          </Link>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":13191},"client/src/components/auth/UserMenu.jsx":{"content":"import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useAuth, useLogout } from \"@/hooks/useAuth\";\nimport { User, Settings, LogOut, Shield } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport const UserMenu = () => {\n  const { user } = useAuth();\n  const { logout } = useLogout();\n\n  if (!user) {\n    return null;\n  }\n\n  const userInitials = user.firstName && user.lastName \n    ? `${user.firstName[0]}${user.lastName[0]}`.toUpperCase()\n    : user.email ? user.email[0].toUpperCase()\n    : 'U';\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\">\n          <Avatar className=\"h-8 w-8\">\n            <AvatarImage src={user.profileImageUrl} alt={user.firstName || user.email} />\n            <AvatarFallback>{userInitials}</AvatarFallback>\n          </Avatar>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n        <DropdownMenuLabel className=\"font-normal\">\n          <div className=\"flex flex-col space-y-1\">\n            <p className=\"text-sm font-medium leading-none\">\n              {user.firstName && user.lastName \n                ? `${user.firstName} ${user.lastName}`\n                : user.email\n              }\n            </p>\n            <p className=\"text-xs leading-none text-muted-foreground\">\n              {user.email}\n            </p>\n          </div>\n        </DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem asChild>\n          <Link href=\"/profile\" className=\"flex items-center cursor-pointer\">\n            <User className=\"mr-2 h-4 w-4\" />\n            <span>Profile</span>\n          </Link>\n        </DropdownMenuItem>\n        <DropdownMenuItem asChild>\n          <Link href=\"/settings\" className=\"flex items-center cursor-pointer\">\n            <Settings className=\"mr-2 h-4 w-4\" />\n            <span>Settings</span>\n          </Link>\n        </DropdownMenuItem>\n        {user.isAdmin && (\n          <DropdownMenuItem asChild>\n            <Link href=\"/admin\" className=\"flex items-center cursor-pointer\">\n              <Shield className=\"mr-2 h-4 w-4\" />\n              <span>Admin Panel</span>\n            </Link>\n          </DropdownMenuItem>\n        )}\n        <DropdownMenuSeparator />\n        <DropdownMenuItem \n          onClick={logout} \n          className=\"flex items-center cursor-pointer text-red-600 focus:text-red-600\"\n        >\n          <LogOut className=\"mr-2 h-4 w-4\" />\n          <span>Log out</span>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n};","size_bytes":2875},"client/src/hooks/useAuth.jsx":{"content":"import { createContext, useContext, useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\nconst AuthContext = createContext();\n\nexport function AuthProvider({ children }) {\n  const [isInitialized, setIsInitialized] = useState(false);\n  const queryClient = useQueryClient();\n\n  const { data: user, isLoading, error } = useQuery({\n    queryKey: ['/api/auth/user'],\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  useEffect(() => {\n    if (!isLoading) {\n      setIsInitialized(true);\n    }\n  }, [isLoading]);\n\n  const value = {\n    user,\n    isLoading,\n    isAuthenticated: !!user && !error,\n    isInitialized,\n    error\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\nexport function useLogin() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async (loginData) => {\n      return await apiRequest('/api/auth/login', {\n        method: 'POST',\n        body: JSON.stringify(loginData),\n      });\n    },\n    onSuccess: (data) => {\n      queryClient.setQueryData(['/api/auth/user'], data.user);\n      toast({\n        title: \"Welcome back!\",\n        description: data.message,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\nexport function useRegister() {\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async (registerData) => {\n      return await apiRequest('/api/auth/register', {\n        method: 'POST',\n        body: JSON.stringify(registerData),\n      });\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Registration Successful!\",\n        description: data.message,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\nexport function useLogout() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async () => {\n      return await apiRequest('/api/auth/logout', {\n        method: 'POST',\n      });\n    },\n    onSuccess: () => {\n      queryClient.setQueryData(['/api/auth/user'], null);\n      queryClient.clear();\n      toast({\n        title: \"Logged out successfully\",\n        description: \"See you again soon!\",\n      });\n    },\n    onError: (error) => {\n      // Even if logout fails on server, clear client state\n      queryClient.setQueryData(['/api/auth/user'], null);\n      queryClient.clear();\n      toast({\n        title: \"Logged out\",\n        description: \"You have been logged out.\",\n      });\n    },\n  });\n}\n\nexport function useForgotPassword() {\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async (email) => {\n      return await apiRequest('/api/auth/forgot-password', {\n        method: 'POST',\n        body: JSON.stringify({ email }),\n      });\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Reset Link Sent\",\n        description: data.message,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\nexport function useResetPassword() {\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async (resetData) => {\n      return await apiRequest('/api/auth/reset-password', {\n        method: 'POST',\n        body: JSON.stringify(resetData),\n      });\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Password Reset Successful\",\n        description: data.message,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Reset Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\nexport function useUpdateProfile() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async (profileData) => {\n      return await apiRequest('/api/auth/profile', {\n        method: 'PUT',\n        body: JSON.stringify(profileData),\n      });\n    },\n    onSuccess: (data) => {\n      queryClient.setQueryData(['/api/auth/user'], data.user);\n      toast({\n        title: \"Profile Updated\",\n        description: data.message,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n}","size_bytes":4877},"client/src/pages/EmailVerification.jsx":{"content":"import { useEffect, useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { CheckCircle, XCircle, Loader2 } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { apiRequest } from '@/lib/queryClient';\n\nexport default function EmailVerification() {\n  const [, setLocation] = useLocation();\n  const [status, setStatus] = useState('verifying'); // 'verifying', 'success', 'error'\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const token = urlParams.get('token');\n\n    if (!token) {\n      setStatus('error');\n      setMessage('No verification token provided');\n      return;\n    }\n\n    const verifyEmail = async () => {\n      try {\n        const response = await apiRequest(`/api/auth/verify-email?token=${token}`);\n        setStatus('success');\n        setMessage(response.message);\n      } catch (error) {\n        setStatus('error');\n        setMessage(error.message || 'Verification failed');\n      }\n    };\n\n    verifyEmail();\n  }, []);\n\n  const handleContinue = () => {\n    if (status === 'success') {\n      setLocation('/login');\n    } else {\n      setLocation('/');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-100 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-green-800 mb-2\">Africa Mechanize</h1>\n          <p className=\"text-green-600\">Sustainable Agricultural Mechanization</p>\n        </div>\n        \n        <Card className=\"w-full\">\n          <CardHeader className=\"text-center space-y-4\">\n            <div className=\"mx-auto w-12 h-12 rounded-full flex items-center justify-center\">\n              {status === 'verifying' && (\n                <div className=\"bg-blue-100\">\n                  <Loader2 className=\"h-6 w-6 text-blue-600 animate-spin\" />\n                </div>\n              )}\n              {status === 'success' && (\n                <div className=\"bg-green-100\">\n                  <CheckCircle className=\"h-6 w-6 text-green-600\" />\n                </div>\n              )}\n              {status === 'error' && (\n                <div className=\"bg-red-100\">\n                  <XCircle className=\"h-6 w-6 text-red-600\" />\n                </div>\n              )}\n            </div>\n            \n            <CardTitle className=\"text-2xl font-bold\">\n              {status === 'verifying' && 'Verifying Email...'}\n              {status === 'success' && 'Email Verified!'}\n              {status === 'error' && 'Verification Failed'}\n            </CardTitle>\n            \n            <CardDescription>\n              {status === 'verifying' && 'Please wait while we verify your email address.'}\n              {message}\n            </CardDescription>\n          </CardHeader>\n          \n          <CardContent>\n            {status !== 'verifying' && (\n              <div className=\"space-y-4\">\n                {status === 'success' && (\n                  <div className=\"p-4 bg-green-50 rounded-lg border border-green-200\">\n                    <p className=\"text-sm text-green-800\">\n                      Your email has been successfully verified! You can now sign in to your account \n                      and access all features of Africa Mechanize.\n                    </p>\n                  </div>\n                )}\n                \n                {status === 'error' && (\n                  <div className=\"p-4 bg-red-50 rounded-lg border border-red-200\">\n                    <p className=\"text-sm text-red-800\">\n                      The verification link may be invalid or expired. Please try registering again \n                      or contact support if you continue to have issues.\n                    </p>\n                  </div>\n                )}\n                \n                <Button \n                  className=\"w-full\" \n                  onClick={handleContinue}\n                  data-testid=\"button-continue\"\n                >\n                  {status === 'success' ? 'Continue to Login' : 'Go to Homepage'}\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":4392},"client/src/pages/Login.jsx":{"content":"import { useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { LoginForm } from '@/components/auth/LoginForm';\nimport { useAuth } from '@/hooks/useAuth';\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { isAuthenticated } = useAuth();\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      setLocation('/');\n    }\n  }, [isAuthenticated, setLocation]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-100 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-green-800 mb-2\">Africa Mechanize</h1>\n          <p className=\"text-green-600\">Sustainable Agricultural Mechanization</p>\n        </div>\n        \n        <LoginForm onSuccess={() => setLocation('/')} />\n        \n        <div className=\"mt-8 text-center\">\n          <p className=\"text-sm text-gray-600\">\n            Join our mission to transform African agriculture through innovative mechanization solutions.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":1137},"client/src/pages/Register.jsx":{"content":"import { useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { RegisterForm } from '@/components/auth/RegisterForm';\nimport { useAuth } from '@/hooks/useAuth';\n\nexport default function Register() {\n  const [, setLocation] = useLocation();\n  const { isAuthenticated } = useAuth();\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      setLocation('/');\n    }\n  }, [isAuthenticated, setLocation]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-100 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-green-800 mb-2\">Africa Mechanize</h1>\n          <p className=\"text-green-600\">Sustainable Agricultural Mechanization</p>\n        </div>\n        \n        <RegisterForm onSuccess={() => setLocation('/login')} />\n        \n        <div className=\"mt-8 text-center\">\n          <p className=\"text-sm text-gray-600\">\n            Join our mission to transform African agriculture through innovative mechanization solutions.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":1154},"server/auth.js":{"content":"import passport from 'passport';\nimport { Strategy as LocalStrategy } from 'passport-local';\nimport bcrypt from 'bcryptjs';\nimport crypto from 'crypto';\nimport { users } from '../shared/schema.js';\nimport { db } from './db.js';\nimport { eq, and, gt } from 'drizzle-orm';\nimport { sendEmail } from './emailService.js';\n\n// Setup passport authentication\nexport const setupAuth = async () => {\n// Configure local strategy\npassport.use(new LocalStrategy({\n  usernameField: 'email',\n  passwordField: 'password'\n}, async (email, password, done) => {\n  try {\n    // Find user by email\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    \n    if (!user) {\n      return done(null, false, { message: 'Invalid email or password' });\n    }\n    \n    if (user.isActive === false) {\n      return done(null, false, { message: 'Account is deactivated' });\n    }\n    \n    // Check password\n    const isValidPassword = await bcrypt.compare(password, user.password);\n    if (!isValidPassword) {\n      return done(null, false, { message: 'Invalid email or password' });\n    }\n    \n    // Update last login\n    await db.update(users)\n      .set({ lastLoginAt: new Date() })\n      .where(eq(users.id, user.id));\n    \n    return done(null, user);\n  } catch (error) {\n    return done(error);\n  }\n}));\n\n// Serialize user for session\npassport.serializeUser((user, done) => {\n  done(null, user.id);\n});\n\n// Deserialize user from session\npassport.deserializeUser(async (id, done) => {\n  try {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    done(null, user);\n  } catch (error) {\n    done(error);\n  }\n});\n}; // End of setupAuth function\n\n// Authentication helper functions\nexport const authHelpers = {\n  async hashPassword(password) {\n    const saltRounds = 12;\n    return await bcrypt.hash(password, saltRounds);\n  },\n  \n  async comparePassword(password, hash) {\n    return await bcrypt.compare(password, hash);\n  },\n  \n  generateToken() {\n    return crypto.randomBytes(32).toString('hex');\n  },\n  \n  async createUser(userData) {\n    const hashedPassword = await this.hashPassword(userData.password);\n    const emailVerificationToken = this.generateToken();\n    const emailVerificationExpires = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours\n    \n    const [newUser] = await db.insert(users).values({\n      email: userData.email,\n      firstName: userData.firstName,\n      lastName: userData.lastName,\n      password: hashedPassword,\n      organization: userData.organization,\n      country: userData.country,\n      emailVerificationToken,\n      emailVerificationExpires,\n      isEmailVerified: false,\n      isActive: true,\n    }).returning();\n    \n    // Send verification email\n    if (process.env.NODE_ENV !== 'test') {\n      await this.sendVerificationEmail(newUser.email, emailVerificationToken);\n    }\n    \n    return newUser;\n  },\n  \n  async verifyEmail(token) {\n    const [user] = await db.select().from(users).where(\n      and(\n        eq(users.emailVerificationToken, token),\n        gt(users.emailVerificationExpires, new Date())\n      )\n    );\n    \n    if (!user) {\n      throw new Error('Invalid or expired verification token');\n    }\n    \n    await db.update(users)\n      .set({\n        isEmailVerified: true,\n        emailVerificationToken: null,\n        emailVerificationExpires: null,\n      })\n      .where(eq(users.id, user.id));\n    \n    return user;\n  },\n  \n  async sendPasswordReset(email) {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    \n    if (!user) {\n      throw new Error('User not found');\n    }\n    \n    const resetToken = this.generateToken();\n    const resetExpires = new Date(Date.now() + 60 * 60 * 1000); // 1 hour\n    \n    await db.update(users)\n      .set({\n        passwordResetToken: resetToken,\n        passwordResetExpires: resetExpires,\n      })\n      .where(eq(users.id, user.id));\n    \n    // Send password reset email\n    if (process.env.NODE_ENV !== 'test') {\n      await this.sendPasswordResetEmail(user.email, resetToken);\n    }\n    \n    return resetToken;\n  },\n  \n  async resetPassword(token, newPassword) {\n    const [user] = await db.select().from(users).where(\n      and(\n        eq(users.passwordResetToken, token),\n        gt(users.passwordResetExpires, new Date())\n      )\n    );\n    \n    if (!user) {\n      throw new Error('Invalid or expired reset token');\n    }\n    \n    const hashedPassword = await this.hashPassword(newPassword);\n    \n    await db.update(users)\n      .set({\n        password: hashedPassword,\n        passwordResetToken: null,\n        passwordResetExpires: null,\n      })\n      .where(eq(users.id, user.id));\n    \n    return user;\n  },\n  \n  async sendVerificationEmail(email, token) {\n    const verificationUrl = `${process.env.BASE_URL || 'http://localhost:5000'}/verify-email?token=${token}`;\n    \n    await sendEmail({\n      to: email,\n      subject: 'Verify Your Email - Africa Mechanize',\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <div style=\"background: linear-gradient(135deg, #22c55e, #16a34a); padding: 20px; text-align: center;\">\n            <h1 style=\"color: white; margin: 0;\">Africa Mechanize</h1>\n          </div>\n          <div style=\"padding: 30px 20px; background: white;\">\n            <h2 style=\"color: #333; margin-bottom: 20px;\">Welcome to Africa Mechanize!</h2>\n            <p style=\"color: #666; line-height: 1.6; margin-bottom: 25px;\">\n              Thank you for joining our mission to promote sustainable agricultural mechanization in Africa. \n              Please verify your email address to activate your account.\n            </p>\n            <div style=\"text-align: center; margin: 30px 0;\">\n              <a href=\"${verificationUrl}\" \n                 style=\"background: #22c55e; color: white; padding: 12px 24px; text-decoration: none; \n                        border-radius: 6px; font-weight: 600; display: inline-block;\">\n                Verify Email Address\n              </a>\n            </div>\n            <p style=\"color: #666; font-size: 14px; margin-top: 25px;\">\n              This verification link will expire in 24 hours. If you didn't create this account, \n              please ignore this email.\n            </p>\n          </div>\n          <div style=\"background: #f8f9fa; padding: 15px; text-align: center; font-size: 12px; color: #666;\">\n            © 2025 Africa Mechanize. All rights reserved.\n          </div>\n        </div>\n      `\n    });\n  },\n  \n  async sendPasswordResetEmail(email, token) {\n    const resetUrl = `${process.env.BASE_URL || 'http://localhost:5000'}/reset-password?token=${token}`;\n    \n    await sendEmail({\n      to: email,\n      subject: 'Reset Your Password - Africa Mechanize',\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <div style=\"background: linear-gradient(135deg, #22c55e, #16a34a); padding: 20px; text-align: center;\">\n            <h1 style=\"color: white; margin: 0;\">Africa Mechanize</h1>\n          </div>\n          <div style=\"padding: 30px 20px; background: white;\">\n            <h2 style=\"color: #333; margin-bottom: 20px;\">Password Reset Request</h2>\n            <p style=\"color: #666; line-height: 1.6; margin-bottom: 25px;\">\n              We received a request to reset your password. Click the button below to set a new password.\n            </p>\n            <div style=\"text-align: center; margin: 30px 0;\">\n              <a href=\"${resetUrl}\" \n                 style=\"background: #dc2626; color: white; padding: 12px 24px; text-decoration: none; \n                        border-radius: 6px; font-weight: 600; display: inline-block;\">\n                Reset Password\n              </a>\n            </div>\n            <p style=\"color: #666; font-size: 14px; margin-top: 25px;\">\n              This reset link will expire in 1 hour. If you didn't request this, please ignore this email.\n            </p>\n          </div>\n          <div style=\"background: #f8f9fa; padding: 15px; text-align: center; font-size: 12px; color: #666;\">\n            © 2025 Africa Mechanize. All rights reserved.\n          </div>\n        </div>\n      `\n    });\n  }\n};\n\n// Middleware functions\nexport const requireAuth = (req, res, next) => {\n  if (!req.isAuthenticated || !req.isAuthenticated()) {\n    return res.status(401).json({ message: 'Authentication required' });\n  }\n  next();\n};\n\nexport const requireEmailVerification = (req, res, next) => {\n  if (!req.user?.isEmailVerified) {\n    return res.status(403).json({ message: 'Email verification required' });\n  }\n  next();\n};\n\nexport const requireRole = (role) => {\n  return (req, res, next) => {\n    if (!req.user || req.user.role !== role) {\n      return res.status(403).json({ message: 'Insufficient permissions' });\n    }\n    next();\n  };\n};\n\nexport const requireAdmin = requireRole('admin');","size_bytes":8906},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/emailService.js":{"content":"import nodemailer from 'nodemailer';\n\n// Email configuration\nlet transporter;\n\nif (process.env.SMTP_HOST && process.env.SMTP_USER && process.env.SMTP_PASS) {\n  // Custom SMTP configuration\n  transporter = nodemailer.createTransport({\n    host: process.env.SMTP_HOST,\n    port: process.env.SMTP_PORT || 587,\n    secure: process.env.SMTP_SECURE === 'true',\n    auth: {\n      user: process.env.SMTP_USER,\n      pass: process.env.SMTP_PASS,\n    },\n  });\n  console.log('📧 Email service configured with custom SMTP');\n} else {\n  // No email configuration - disable email functionality\n  console.log('⚠️  No SMTP credentials configured. Email functionality disabled.');\n  transporter = null;\n}\n\nexport async function sendEmail({ to, subject, text, html }) {\n  try {\n    if (!transporter) {\n      console.log('📧 Email not sent - SMTP not configured:', { to, subject });\n      return false;\n    }\n    \n    const mailOptions = {\n      from: process.env.FROM_EMAIL || 'noreply@africamechanize.org',\n      to,\n      subject,\n      text: text || html?.replace(/<[^>]*>/g, ''), // Strip HTML for text version\n      html,\n    };\n    \n    const info = await transporter.sendMail(mailOptions);\n    \n    console.log('📧 Email sent successfully:', {\n      to,\n      subject,\n      messageId: info.messageId,\n    });\n    \n    return true;\n  } catch (error) {\n    console.error('📧 Email send error:', error.message);\n    return false;\n  }\n}\n\nexport async function sendWelcomeEmail(user) {\n  return await sendEmail({\n    to: user.email,\n    subject: 'Welcome to Africa Mechanize!',\n    html: `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <div style=\"background: linear-gradient(135deg, #22c55e, #16a34a); padding: 20px; text-align: center;\">\n          <h1 style=\"color: white; margin: 0;\">Welcome to Africa Mechanize!</h1>\n        </div>\n        <div style=\"padding: 30px 20px; background: white;\">\n          <h2 style=\"color: #333; margin-bottom: 20px;\">Hi ${user.firstName}!</h2>\n          <p style=\"color: #666; line-height: 1.6; margin-bottom: 25px;\">\n            Welcome to the Africa Mechanize platform! You're now part of a community dedicated to \n            promoting sustainable agricultural mechanization across Africa.\n          </p>\n          <div style=\"background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 25px 0;\">\n            <h3 style=\"color: #22c55e; margin-top: 0;\">What you can do now:</h3>\n            <ul style=\"color: #666; line-height: 1.8;\">\n              <li>Explore the F-SAMA Framework elements</li>\n              <li>Join upcoming webinars and conferences</li>\n              <li>Access our resource library</li>\n              <li>Connect with other professionals</li>\n              <li>Submit abstracts to conferences</li>\n            </ul>\n          </div>\n          <div style=\"text-align: center; margin: 30px 0;\">\n            <a href=\"${process.env.BASE_URL || 'http://localhost:5000'}\" \n               style=\"background: #22c55e; color: white; padding: 12px 24px; text-decoration: none; \n                      border-radius: 6px; font-weight: 600; display: inline-block;\">\n              Get Started\n            </a>\n          </div>\n        </div>\n        <div style=\"background: #f8f9fa; padding: 15px; text-align: center; font-size: 12px; color: #666;\">\n          © 2025 Africa Mechanize. All rights reserved.\n        </div>\n      </div>\n    `\n  });\n}","size_bytes":3443},"client/src/components/ui/label.jsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":538},"client/src/components/ui/form.jsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\nconst FormFieldContext = React.createContext({})\n\nconst FormField = ({ ...props }) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\nconst FormItemContext = React.createContext({})\n\nconst FormItem = React.forwardRef(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":3186},"client/src/pages/ResetPassword.jsx":{"content":"import { useEffect, useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { Eye, EyeOff, Lock, CheckCircle, XCircle, Loader2 } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { useResetPassword } from '@/hooks/useAuth';\nimport { resetPasswordSchema } from '@shared/schema';\nimport { Link } from 'wouter';\n\nexport default function ResetPassword() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [resetComplete, setResetComplete] = useState(false);\n  const [token, setToken] = useState('');\n  \n  const resetPasswordMutation = useResetPassword();\n\n  const form = useForm({\n    resolver: zodResolver(resetPasswordSchema),\n    defaultValues: {\n      password: '',\n      confirmPassword: '',\n      token: '',\n    },\n  });\n\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const resetToken = urlParams.get('token');\n    \n    if (resetToken) {\n      setToken(resetToken);\n      form.setValue('token', resetToken);\n    } else {\n      setLocation('/login');\n    }\n  }, [form, setLocation]);\n\n  const onSubmit = async (data) => {\n    try {\n      await resetPasswordMutation.mutateAsync(data);\n      setResetComplete(true);\n      form.reset();\n    } catch (error) {\n      // Error is handled by the mutation's onError callback\n    }\n  };\n\n  if (resetComplete) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-100 flex items-center justify-center p-4\">\n        <div className=\"w-full max-w-md\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl font-bold text-green-800 mb-2\">Africa Mechanize</h1>\n            <p className=\"text-green-600\">Sustainable Agricultural Mechanization</p>\n          </div>\n          \n          <Card className=\"w-full\">\n            <CardHeader className=\"text-center space-y-4\">\n              <div className=\"mx-auto w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                <CheckCircle className=\"h-6 w-6 text-green-600\" />\n              </div>\n              <CardTitle className=\"text-2xl font-bold\">Password Reset Complete!</CardTitle>\n              <CardDescription>\n                Your password has been successfully updated. You can now sign in with your new password.\n              </CardDescription>\n            </CardHeader>\n            \n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"p-4 bg-green-50 rounded-lg border border-green-200\">\n                  <p className=\"text-sm text-green-800\">\n                    Your account is now secure with your new password. \n                    Please keep it safe and don't share it with anyone.\n                  </p>\n                </div>\n                \n                <Button \n                  className=\"w-full\" \n                  onClick={() => setLocation('/login')}\n                  data-testid=\"button-sign-in\"\n                >\n                  Sign In Now\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  if (!token) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-100 flex items-center justify-center p-4\">\n        <div className=\"w-full max-w-md\">\n          <Card className=\"w-full\">\n            <CardHeader className=\"text-center space-y-4\">\n              <div className=\"mx-auto w-12 h-12 bg-red-100 rounded-full flex items-center justify-center\">\n                <XCircle className=\"h-6 w-6 text-red-600\" />\n              </div>\n              <CardTitle className=\"text-2xl font-bold\">Invalid Reset Link</CardTitle>\n              <CardDescription>\n                This password reset link is invalid or has expired.\n              </CardDescription>\n            </CardHeader>\n            \n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"p-4 bg-red-50 rounded-lg border border-red-200\">\n                  <p className=\"text-sm text-red-800\">\n                    Please request a new password reset link from the login page.\n                  </p>\n                </div>\n                \n                <Button \n                  className=\"w-full\" \n                  onClick={() => setLocation('/login')}\n                  data-testid=\"button-back-to-login\"\n                >\n                  Back to Login\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-100 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-green-800 mb-2\">Africa Mechanize</h1>\n          <p className=\"text-green-600\">Sustainable Agricultural Mechanization</p>\n        </div>\n        \n        <Card className=\"w-full max-w-md mx-auto\">\n          <CardHeader className=\"space-y-1\">\n            <CardTitle className=\"text-2xl font-bold text-center\">Reset Your Password</CardTitle>\n            <CardDescription className=\"text-center\">\n              Enter your new password below\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>New Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                          <Input\n                            {...field}\n                            type={showPassword ? 'text' : 'password'}\n                            placeholder=\"Enter new password\"\n                            className=\"pl-10 pr-10\"\n                            data-testid=\"input-new-password\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowPassword(!showPassword)}\n                            data-testid=\"button-toggle-password\"\n                          >\n                            {showPassword ? (\n                              <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                            )}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"confirmPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Confirm New Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                          <Input\n                            {...field}\n                            type={showConfirmPassword ? 'text' : 'password'}\n                            placeholder=\"Confirm new password\"\n                            className=\"pl-10 pr-10\"\n                            data-testid=\"input-confirm-password\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                            data-testid=\"button-toggle-confirm-password\"\n                          >\n                            {showConfirmPassword ? (\n                              <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                            )}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={resetPasswordMutation.isPending}\n                  data-testid=\"button-reset-password\"\n                >\n                  {resetPasswordMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Resetting Password...\n                    </>\n                  ) : (\n                    'Reset Password'\n                  )}\n                </Button>\n              </form>\n            </Form>\n\n            <div className=\"mt-4 text-center text-sm\">\n              <span className=\"text-muted-foreground\">Remember your password? </span>\n              <Link href=\"/login\">\n                <Button variant=\"link\" className=\"px-0 font-semibold\" data-testid=\"link-login\">\n                  Sign In\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":10375},"client/src/components/ui/avatar.jsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }","size_bytes":1066},"client/src/components/ui/dropdown-menu.jsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName = DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({ className, ...props }) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}","size_bytes":6099},"client/src/components/ui/select.jsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName = SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}","size_bytes":4767},"client/src/components/ui/textarea.jsx":{"content":"import { forwardRef } from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = forwardRef(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":626},"client/src/hooks/useAuth.js":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n\nexport function useLogin() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (credentials) => {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(credentials),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Login failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Login successful\",\n        description: \"Welcome back!\",\n      });\n      // Refresh user data\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      // Redirect after successful login\n      setTimeout(() => window.location.href = '/', 100);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\nexport function useRegister() {\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async (userData) => {\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(userData),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Registration failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Registration successful\",\n        description: \"Please check your email to verify your account.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message || \"Please try again\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\nexport function useForgotPassword() {\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async (email) => {\n      const response = await fetch('/api/auth/forgot-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email }),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to send reset link');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Reset link sent\",\n        description: \"Check your email for password reset instructions.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to send reset link\",\n        description: error.message || \"Please try again\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\nexport function useLogout() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/auth/logout', {\n        method: 'POST',\n      });\n      \n      if (!response.ok) {\n        throw new Error('Logout failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Logged out\",\n        description: \"You have been successfully logged out.\",\n      });\n      // Clear user data\n      queryClient.removeQueries({ queryKey: [\"/api/auth/user\"] });\n      // Redirect to home\n      window.location.href = '/';\n    },\n    onError: (error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message || \"Please try again\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\nexport function useResetPassword() {\n  const resetPassword = async (data) => {\n    try {\n      const response = await fetch('/api/auth/reset-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Password reset failed');\n      }\n      \n      const result = await response.json();\n      \n      // Redirect to login page on success\n      window.location.href = '/login';\n      \n      return result;\n    } catch (error) {\n      throw new Error(error.message || 'Password reset failed');\n    }\n  };\n\n  return { resetPassword };\n}","size_bytes":4827},"client/src/pages/NewsPage.jsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, Clock, User, Search, Filter } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nexport default function NewsPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n\n  // Mock news data - replace with actual API call\n  const newsItems = [\n    {\n      id: 1,\n      title: \"New Agricultural Mechanization Initiative Launched in Kenya\",\n      excerpt: \"A comprehensive program to modernize farming practices across East Africa has been officially launched with support from international partners.\",\n      content: \"The new initiative aims to transform agricultural practices through modern mechanization techniques, training programs, and technology transfer.\",\n      category: \"Initiative\",\n      author: \"Dr. Sarah Johnson\",\n      publishedAt: new Date(\"2025-01-10\"),\n      imageUrl: \"/api/placeholder/400/250\",\n      tags: [\"Kenya\", \"Mechanization\", \"Technology\"]\n    },\n    {\n      id: 2,\n      title: \"F-SAMA Framework Implementation Shows Promising Results\",\n      excerpt: \"Early results from pilot programs across three countries demonstrate significant improvements in agricultural productivity and sustainability.\",\n      content: \"The Framework for Sustainable Agricultural Mechanization in Africa (F-SAMA) continues to show positive impacts on farming communities.\",\n      category: \"Research\",\n      author: \"Prof. Michael Chen\",\n      publishedAt: new Date(\"2025-01-08\"),\n      imageUrl: \"/api/placeholder/400/250\",\n      tags: [\"F-SAMA\", \"Research\", \"Sustainability\"]\n    },\n    {\n      id: 3,\n      title: \"International Conference on Agricultural Mechanization Announced\",\n      excerpt: \"The 2025 African Agricultural Mechanization Conference will bring together experts from across the continent to share best practices.\",\n      content: \"This year's conference will focus on innovative solutions for smallholder farmers and sustainable mechanization practices.\",\n      category: \"Event\",\n      author: \"Conference Committee\",\n      publishedAt: new Date(\"2025-01-05\"),\n      imageUrl: \"/api/placeholder/400/250\",\n      tags: [\"Conference\", \"Networking\", \"Innovation\"]\n    }\n  ];\n\n  const categories = [\"all\", \"Initiative\", \"Research\", \"Event\", \"Technology\"];\n\n  const filteredNews = newsItems.filter(item => {\n    const matchesSearch = item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         item.excerpt.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = selectedCategory === \"all\" || item.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  return (\n    <div className=\"min-h-screen py-20 bg-gradient-to-br from-gray-50 to-green-50 dark:from-gray-900 dark:to-gray-800\">\n      <div className=\"container mx-auto px-6\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-4xl md:text-5xl font-bold mb-6 bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent\">\n            Latest News & Updates\n          </h1>\n          <p className=\"text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto\">\n            Stay informed about the latest developments in African agricultural mechanization, \n            research findings, and upcoming events in our community.\n          </p>\n        </div>\n\n        {/* Search and Filter */}\n        <div className=\"flex flex-col md:flex-row gap-4 mb-12 max-w-4xl mx-auto\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={20} />\n            <Input\n              type=\"text\"\n              placeholder=\"Search news articles...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10 py-3 text-lg\"\n            />\n          </div>\n          <div className=\"flex gap-2 flex-wrap\">\n            {categories.map((category) => (\n              <Button\n                key={category}\n                variant={selectedCategory === category ? \"default\" : \"outline\"}\n                onClick={() => setSelectedCategory(category)}\n                className=\"capitalize\"\n              >\n                {category}\n              </Button>\n            ))}\n          </div>\n        </div>\n\n        {/* News Grid */}\n        <div className=\"grid gap-8 md:grid-cols-2 lg:grid-cols-3 max-w-7xl mx-auto\">\n          {filteredNews.map((article) => (\n            <Card key={article.id} className=\"group hover:shadow-lg transition-all duration-300 border-0 shadow-md overflow-hidden\">\n              <div className=\"aspect-video bg-gradient-to-br from-green-100 to-blue-100 dark:from-green-900 dark:to-blue-900 relative overflow-hidden\">\n                <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 to-transparent\" />\n                <Badge className=\"absolute top-4 left-4 bg-white/90 text-green-700 hover:bg-white\">\n                  {article.category}\n                </Badge>\n              </div>\n              \n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"line-clamp-2 group-hover:text-green-600 transition-colors\">\n                  {article.title}\n                </CardTitle>\n                <div className=\"flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400\">\n                  <div className=\"flex items-center gap-1\">\n                    <User size={14} />\n                    <span>{article.author}</span>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Calendar size={14} />\n                    <span>{format(article.publishedAt, \"MMM dd, yyyy\")}</span>\n                  </div>\n                </div>\n              </CardHeader>\n              \n              <CardContent className=\"pt-0\">\n                <p className=\"text-gray-600 dark:text-gray-300 line-clamp-3 mb-4\">\n                  {article.excerpt}\n                </p>\n                \n                <div className=\"flex flex-wrap gap-2 mb-4\">\n                  {article.tags.map((tag) => (\n                    <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                      {tag}\n                    </Badge>\n                  ))}\n                </div>\n                \n                <Button variant=\"outline\" className=\"w-full group-hover:bg-green-50 group-hover:border-green-200 transition-colors\">\n                  Read More\n                </Button>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Load More */}\n        {filteredNews.length > 0 && (\n          <div className=\"text-center mt-12\">\n            <Button size=\"lg\" variant=\"outline\" className=\"px-8\">\n              Load More Articles\n            </Button>\n          </div>\n        )}\n\n        {/* No Results */}\n        {filteredNews.length === 0 && (\n          <div className=\"text-center py-16\">\n            <div className=\"text-gray-400 mb-4\">\n              <Search size={48} className=\"mx-auto\" />\n            </div>\n            <h3 className=\"text-xl font-semibold text-gray-600 dark:text-gray-300 mb-2\">\n              No articles found\n            </h3>\n            <p className=\"text-gray-500 dark:text-gray-400\">\n              Try adjusting your search terms or category filter.\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":7747},"client/src/components/ui/alert.jsx":{"content":"import { cva } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\nimport { forwardRef } from \"react\";\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = forwardRef(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = forwardRef(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }","size_bytes":1313},"client/src/components/ui/breadcrumb.jsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef((props, ref) => (\n  <nav ref={ref} aria-label=\"breadcrumb\" {...props} />\n));\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef((props, ref) => {\n  const { className, ...otherProps } = props;\n  return (\n    <ol\n      ref={ref}\n      className={cn(\n        \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n        className\n      )}\n      {...otherProps}\n    />\n  );\n});\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef((props, ref) => {\n  const { className, ...otherProps } = props;\n  return (\n    <li\n      ref={ref}\n      className={cn(\"inline-flex items-center gap-1.5\", className)}\n      {...otherProps}\n    />\n  );\n});\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef((props, ref) => {\n  const { asChild, className, ...otherProps } = props;\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...otherProps}\n    />\n  );\n});\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef((props, ref) => {\n  const { className, ...otherProps } = props;\n  return (\n    <span\n      ref={ref}\n      role=\"link\"\n      aria-disabled=\"true\"\n      aria-current=\"page\"\n      className={cn(\"font-normal text-foreground\", className)}\n      {...otherProps}\n    />\n  );\n});\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = (props) => {\n  const { children, className, ...otherProps } = props;\n  return (\n    <li\n      role=\"presentation\"\n      aria-hidden=\"true\"\n      className={cn(\"[&>svg]:size-3.5\", className)}\n      {...otherProps}\n    >\n      {children ?? <ChevronRight />}\n    </li>\n  );\n};\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = (props) => {\n  const { className, ...otherProps } = props;\n  return (\n    <span\n      role=\"presentation\"\n      aria-hidden=\"true\"\n      className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n      {...otherProps}\n    >\n      <MoreHorizontal className=\"h-4 w-4\" />\n      <span className=\"sr-only\">More</span>\n    </span>\n  );\n};\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}","size_bytes":2619},"client/src/components/ui/separator.jsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef((props, ref) => {\n  const { className, orientation = \"horizontal\", decorative = true, ...otherProps } = props;\n  return (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...otherProps}\n    />\n  );\n});\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":668},"client/src/components/ui/alert-dialog.jsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({ className, ...props }) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({ className, ...props }) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName = AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}","size_bytes":3553},"client/src/components/ui/dialog.jsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({ className, ...props }) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({ className, ...props }) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}","size_bytes":3279},"client/src/pages/admin/AdminDashboard.jsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Shield, Users, FileText, Calendar, Settings, BarChart3, \n  LogOut, Edit, Trash2, Plus, Eye, Download, Mail, Phone, \n  Globe, Activity, TrendingUp, UserCheck, MessageSquare,\n  Search, Filter, RefreshCw, ExternalLink\n} from \"lucide-react\";\n\n// Admin guard component\nconst AdminGuard = ({ children }) => {\n  const [isAuthorized, setIsAuthorized] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"adminToken\");\n    if (!token) {\n      window.location.href = \"/admin/login\";\n      return;\n    }\n\n    // Verify token with backend\n    fetch(\"/api/admin/verify\", {\n      headers: { Authorization: `Bearer ${token}` }\n    })\n    .then(res => {\n      if (res.ok) {\n        setIsAuthorized(true);\n      } else {\n        localStorage.removeItem(\"adminToken\");\n        window.location.href = \"/admin/login\";\n      }\n    })\n    .catch(() => {\n      localStorage.removeItem(\"adminToken\");\n      window.location.href = \"/admin/login\";\n    })\n    .finally(() => setIsLoading(false));\n  }, []);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Shield className=\"w-8 h-8 animate-spin mx-auto mb-4\" />\n          <p>Verifying access...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return isAuthorized ? children : null;\n};\n\nexport default function AdminDashboard() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [editingUser, setEditingUser] = useState(null);\n  const [editingWebinar, setEditingWebinar] = useState(null);\n  const [statsFormData, setStatsFormData] = useState({});\n  const [contactFilter, setContactFilter] = useState(\"all\");\n  const [userSearch, setUserSearch] = useState(\"\");\n  \n  // Content Management States\n  const [activeTab, setActiveTab] = useState(\"dashboard\");\n  const [isCreateNewsEventOpen, setIsCreateNewsEventOpen] = useState(false);\n  const [isEditNewsEventOpen, setIsEditNewsEventOpen] = useState(false);\n  const [editingNewsEvent, setEditingNewsEvent] = useState(null);\n  const [isCreateResourceOpen, setIsCreateResourceOpen] = useState(false);\n  const [isEditResourceOpen, setIsEditResourceOpen] = useState(false);\n  const [editingResource, setEditingResource] = useState(null);\n  const [isCreateWebinarResourceOpen, setIsCreateWebinarResourceOpen] = useState(false);\n  const [isEditWebinarResourceOpen, setIsEditWebinarResourceOpen] = useState(false);\n  const [editingWebinarResource, setEditingWebinarResource] = useState(null);\n  const [newWebinarData, setNewWebinarData] = useState({\n    title: \"\",\n    description: \"\",\n    date: \"\",\n    time: \"\",\n    speaker: \"\",\n    meetingLink: \"\"\n  });\n\n  const getAuthHeaders = () => {\n    const token = localStorage.getItem(\"adminToken\");\n    return {\n      Authorization: `Bearer ${token}`,\n    };\n  };\n\n  const { data: stats, refetch: refetchStats } = useQuery({\n    queryKey: [\"/api/admin/stats\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/stats\", {\n        headers: getAuthHeaders(),\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch stats\");\n      return response.json();\n    },\n  });\n\n  const { data: users, refetch: refetchUsers } = useQuery({\n    queryKey: [\"/api/admin/users\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/users\", {\n        headers: getAuthHeaders(),\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch users\");\n      return response.json();\n    },\n  });\n\n  const { data: webinars, refetch: refetchWebinars } = useQuery({\n    queryKey: [\"/api/admin/webinars\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/webinars\", {\n        headers: getAuthHeaders(),\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch webinars\");\n      return response.json();\n    },\n  });\n\n  // Legacy Data Integration Query\n  const { data: legacyData, refetch: refetchLegacyData } = useQuery({\n    queryKey: [\"/api/migration/status\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/migration/status\", {\n        headers: getAuthHeaders(),\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch legacy data\");\n      return response.json();\n    },\n  });\n\n  // Content Management Queries\n  const { data: newsEvents, refetch: refetchNewsEvents } = useQuery({\n    queryKey: [\"/api/admin/news\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/news\", {\n        headers: getAuthHeaders(),\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch news events\");\n      return response.json();\n    },\n  });\n\n  const { data: resources, refetch: refetchResources } = useQuery({\n    queryKey: [\"/api/admin/resources\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/resources\", {\n        headers: getAuthHeaders(),\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch resources\");\n      return response.json();\n    },\n  });\n\n  const { data: webinarResources, refetch: refetchWebinarResources } = useQuery({\n    queryKey: [\"/api/admin/webinar-resources\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/webinar-resources\", {\n        headers: getAuthHeaders(),\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch webinar resources\");\n      return response.json();\n    },\n  });\n\n  const { data: contacts, refetch: refetchContacts } = useQuery({\n    queryKey: [\"/api/admin/contacts\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/contacts\", {\n        headers: getAuthHeaders(),\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch contacts\");\n      return response.json();\n    },\n  });\n\n  const { data: siteStats } = useQuery({\n    queryKey: [\"/api/statistics\"],\n  });\n\n\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"adminToken\");\n    toast({\n      title: \"Logged out\",\n      description: \"You have been logged out successfully\",\n    });\n    window.location.href = \"/admin/login\";\n  };\n\n  // Mutations\n  const updateUserMutation = useMutation({\n    mutationFn: async ({ userId, userData }) => {\n      const response = await fetch(`/api/admin/users/${userId}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          ...getAuthHeaders(),\n        },\n        body: JSON.stringify(userData),\n      });\n      if (!response.ok) throw new Error(\"Failed to update user\");\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"User updated successfully\" });\n      refetchUsers();\n      setSelectedUser(null);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Update failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId) => {\n      const response = await fetch(`/api/admin/users/${userId}`, {\n        method: \"DELETE\",\n        headers: getAuthHeaders(),\n      });\n      if (!response.ok) throw new Error(\"Failed to delete user\");\n    },\n    onSuccess: () => {\n      toast({ title: \"User deleted successfully\" });\n      refetchUsers();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Delete failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateStatsFormMutation = useMutation({\n    mutationFn: async (statsData) => {\n      const response = await apiRequest(\"POST\", \"/api/statistics\", statsData);\n      return response;\n    },\n    onSuccess: () => {\n      toast({ title: \"Statistics updated successfully\" });\n      queryClient.invalidateQueries([\"/api/statistics\"]);\n      refetchStats();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Update failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const markContactReadMutation = useMutation({\n    mutationFn: async (contactId) => {\n      const response = await fetch(`/api/admin/contacts/${contactId}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          ...getAuthHeaders(),\n        },\n        body: JSON.stringify({ status: \"read\" }),\n      });\n      if (!response.ok) throw new Error(\"Failed to update contact\");\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Contact marked as read\" });\n      refetchContacts();\n      refetchStats();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Update failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Initialize stats form data\n  useEffect(() => {\n    if (siteStats) {\n      setStatsFormData({\n        network: siteStats.network || 0,\n        countries: siteStats.countries || 0,\n        webinars: siteStats.webinars || 0,\n        speakers: siteStats.speakers || 0,\n        participants: siteStats.participants || 0,\n      });\n    }\n  }, [siteStats]);\n\n  // Filter functions\n  const filteredUsers = users?.filter(user =>\n    user.firstName?.toLowerCase().includes(userSearch.toLowerCase()) ||\n    user.lastName?.toLowerCase().includes(userSearch.toLowerCase()) ||\n    user.email?.toLowerCase().includes(userSearch.toLowerCase())\n  ) || [];\n\n  const filteredContacts = contacts?.filter(contact => {\n    if (contactFilter === \"all\") return true;\n    return contact.status === contactFilter;\n  }) || [];\n\n  const statsCards = [\n    {\n      title: \"Total Users\",\n      value: stats?.totalUsers || 0,\n      description: \"Registered users\",\n      icon: Users,\n      color: \"text-blue-600\",\n      bgColor: \"bg-blue-50\",\n      trend: \"+12%\",\n      trendIcon: TrendingUp,\n    },\n    {\n      title: \"Active Webinars\",\n      value: stats?.activeWebinars || 0,\n      description: \"Currently scheduled\",\n      icon: Calendar,\n      color: \"text-green-600\",\n      bgColor: \"bg-green-50\",\n      trend: \"+5%\",\n      trendIcon: Activity,\n    },\n    {\n      title: \"Unread Messages\",\n      value: stats?.contactForms || 0,\n      description: \"Contact submissions\",\n      icon: MessageSquare,\n      color: \"text-orange-600\",\n      bgColor: \"bg-orange-50\",\n      trend: stats?.contactForms > 0 ? \"New\" : \"All Clear\",\n      trendIcon: Mail,\n    },\n    {\n      title: \"Newsletter Subs\",\n      value: stats?.newsletterSubs || 0,\n      description: \"Active subscribers\",\n      icon: BarChart3,\n      color: \"text-purple-600\",\n      bgColor: \"bg-purple-50\",\n      trend: \"+8%\",\n      trendIcon: UserCheck,\n    },\n  ];\n\n  return (\n    <AdminGuard>\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n        {/* Header */}\n        <header className=\"bg-white dark:bg-gray-800 shadow-sm border-b\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"flex items-center justify-between h-16\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-8 h-8 bg-gradient-to-br from-primary to-secondary rounded-lg flex items-center justify-center\">\n                  <Shield className=\"w-5 h-5 text-white\" />\n                </div>\n                <h1 className=\"text-xl font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n                  Admin Dashboard\n                </h1>\n              </div>\n              <Button \n                variant=\"outline\" \n                onClick={handleLogout}\n                data-testid=\"button-admin-logout\"\n              >\n                <LogOut className=\"w-4 h-4 mr-2\" />\n                Logout\n              </Button>\n            </div>\n          </div>\n        </header>\n\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          {/* Stats Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            {statsCards.map((stat, index) => {\n              const IconComponent = stat.icon;\n              const TrendIconComponent = stat.trendIcon;\n              return (\n                <Card key={index} className=\"hover:shadow-md transition-shadow border-l-4 border-l-primary\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm font-medium text-muted-foreground\">\n                          {stat.title}\n                        </p>\n                        <p className=\"text-3xl font-bold\">{stat.value}</p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {stat.description}\n                        </p>\n                        <div className=\"flex items-center mt-2\">\n                          <TrendIconComponent className=\"w-3 h-3 text-green-600 mr-1\" />\n                          <span className=\"text-xs text-green-600 font-medium\">{stat.trend}</span>\n                        </div>\n                      </div>\n                      <div className={`w-12 h-12 ${stat.bgColor} rounded-lg flex items-center justify-center`}>\n                        <IconComponent className={`w-6 h-6 ${stat.color}`} />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n\n          {/* Quick Actions */}\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Activity className=\"w-5 h-5 mr-2\" />\n                Quick Actions\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <Button \n                  onClick={() => refetchStats()} \n                  variant=\"outline\" \n                  className=\"h-20 flex-col space-y-2\"\n                  data-testid=\"button-refresh-stats\"\n                >\n                  <RefreshCw className=\"w-5 h-5\" />\n                  <span>Refresh Data</span>\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"h-20 flex-col space-y-2\"\n                  data-testid=\"button-export-data\"\n                >\n                  <Download className=\"w-5 h-5\" />\n                  <span>Export Data</span>\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"h-20 flex-col space-y-2\"\n                  onClick={() => window.open(\"/\", \"_blank\")}\n                  data-testid=\"button-view-site\"\n                >\n                  <ExternalLink className=\"w-5 h-5\" />\n                  <span>View Site</span>\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"h-20 flex-col space-y-2\"\n                  data-testid=\"button-site-settings\"\n                >\n                  <Settings className=\"w-5 h-5\" />\n                  <span>Site Settings</span>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Management Tabs */}\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-9\">\n              <TabsTrigger value=\"dashboard\">Dashboard</TabsTrigger>\n              <TabsTrigger value=\"users\">Users</TabsTrigger>\n              <TabsTrigger value=\"webinars\">Webinars</TabsTrigger>\n              <TabsTrigger value=\"contacts\">Contacts</TabsTrigger>\n              <TabsTrigger value=\"news-events\">News & Events</TabsTrigger>\n              <TabsTrigger value=\"resources\">Resources</TabsTrigger>\n              <TabsTrigger value=\"webinar-resources\">Webinar Files</TabsTrigger>\n              <TabsTrigger value=\"content\">Content</TabsTrigger>\n              <TabsTrigger value=\"legacy\">Legacy Data</TabsTrigger>\n            </TabsList>\n\n            {/* Users Management */}\n            <TabsContent value=\"users\" className=\"space-y-6\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between\">\n                  <div>\n                    <CardTitle>User Management</CardTitle>\n                    <CardDescription>\n                      Manage registered users and their permissions\n                    </CardDescription>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        placeholder=\"Search users...\"\n                        value={userSearch}\n                        onChange={(e) => setUserSearch(e.target.value)}\n                        className=\"pl-8 w-64\"\n                        data-testid=\"input-user-search\"\n                      />\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {filteredUsers.slice(0, 10).map((user) => (\n                      <div key={user.id} className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-4\">\n                            <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-secondary rounded-full flex items-center justify-center\">\n                              <span className=\"text-white font-medium\">\n                                {user.firstName?.[0] || 'U'}{user.lastName?.[0] || ''}\n                              </span>\n                            </div>\n                            <div>\n                              <p className=\"font-medium\">{user.firstName} {user.lastName}</p>\n                              <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n                              <div className=\"flex items-center space-x-2 mt-1\">\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  {user.isEmailVerified ? \"Verified\" : \"Unverified\"}\n                                </Badge>\n                                <span className=\"text-xs text-muted-foreground\">\n                                  Joined {new Date(user.createdAt).toLocaleDateString()}\n                                </span>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge variant={user.isActive ? \"default\" : \"secondary\"}>\n                            {user.isActive ? \"Active\" : \"Inactive\"}\n                          </Badge>\n                          <Dialog>\n                            <DialogTrigger asChild>\n                              <Button \n                                size=\"sm\" \n                                variant=\"outline\" \n                                onClick={() => setSelectedUser(user)}\n                                data-testid={`button-edit-user-${user.id}`}\n                              >\n                                <Edit className=\"w-3 h-3\" />\n                              </Button>\n                            </DialogTrigger>\n                            <DialogContent className=\"sm:max-w-md\">\n                              <DialogHeader>\n                                <DialogTitle>Edit User</DialogTitle>\n                                <DialogDescription>\n                                  Update user information and status\n                                </DialogDescription>\n                              </DialogHeader>\n                              {selectedUser && (\n                                <div className=\"space-y-4\">\n                                  <div className=\"grid grid-cols-2 gap-4\">\n                                    <div>\n                                      <Label>First Name</Label>\n                                      <Input\n                                        value={selectedUser.firstName || \"\"}\n                                        onChange={(e) => setSelectedUser({...selectedUser, firstName: e.target.value})}\n                                      />\n                                    </div>\n                                    <div>\n                                      <Label>Last Name</Label>\n                                      <Input\n                                        value={selectedUser.lastName || \"\"}\n                                        onChange={(e) => setSelectedUser({...selectedUser, lastName: e.target.value})}\n                                      />\n                                    </div>\n                                  </div>\n                                  <div>\n                                    <Label>Email</Label>\n                                    <Input\n                                      value={selectedUser.email || \"\"}\n                                      onChange={(e) => setSelectedUser({...selectedUser, email: e.target.value})}\n                                    />\n                                  </div>\n                                  <div>\n                                    <Label>Status</Label>\n                                    <Select\n                                      value={selectedUser.isActive ? \"active\" : \"inactive\"}\n                                      onValueChange={(value) => setSelectedUser({...selectedUser, isActive: value === \"active\"})}\n                                    >\n                                      <SelectTrigger>\n                                        <SelectValue />\n                                      </SelectTrigger>\n                                      <SelectContent>\n                                        <SelectItem value=\"active\">Active</SelectItem>\n                                        <SelectItem value=\"inactive\">Inactive</SelectItem>\n                                      </SelectContent>\n                                    </Select>\n                                  </div>\n                                  <div className=\"flex justify-between\">\n                                    <AlertDialog>\n                                      <AlertDialogTrigger asChild>\n                                        <Button variant=\"destructive\" size=\"sm\">\n                                          <Trash2 className=\"w-3 h-3 mr-1\" />\n                                          Delete User\n                                        </Button>\n                                      </AlertDialogTrigger>\n                                      <AlertDialogContent>\n                                        <AlertDialogHeader>\n                                          <AlertDialogTitle>Delete User</AlertDialogTitle>\n                                          <AlertDialogDescription>\n                                            Are you sure? This action cannot be undone.\n                                          </AlertDialogDescription>\n                                        </AlertDialogHeader>\n                                        <AlertDialogFooter>\n                                          <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                          <AlertDialogAction\n                                            onClick={() => deleteUserMutation.mutate(selectedUser.id)}\n                                            className=\"bg-destructive text-destructive-foreground\"\n                                          >\n                                            Delete\n                                          </AlertDialogAction>\n                                        </AlertDialogFooter>\n                                      </AlertDialogContent>\n                                    </AlertDialog>\n                                    <Button\n                                      onClick={() => updateUserMutation.mutate({\n                                        userId: selectedUser.id,\n                                        userData: {\n                                          firstName: selectedUser.firstName,\n                                          lastName: selectedUser.lastName,\n                                          email: selectedUser.email,\n                                          isActive: selectedUser.isActive,\n                                        }\n                                      })}\n                                      disabled={updateUserMutation.isPending}\n                                    >\n                                      {updateUserMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                                    </Button>\n                                  </div>\n                                </div>\n                              )}\n                            </DialogContent>\n                          </Dialog>\n                        </div>\n                      </div>\n                    ))}\n                    {filteredUsers.length === 0 && (\n                      <div className=\"text-center py-8 text-muted-foreground\">\n                        {userSearch ? \"No users found matching your search.\" : \"No users registered yet.\"}\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Webinars Management */}\n            <TabsContent value=\"webinars\" className=\"space-y-6\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between\">\n                  <div>\n                    <CardTitle>Webinar Management</CardTitle>\n                    <CardDescription>\n                      Create and manage webinars and events\n                    </CardDescription>\n                  </div>\n                  <Dialog>\n                    <DialogTrigger asChild>\n                      <Button data-testid=\"button-create-webinar\">\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        New Webinar\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"sm:max-w-lg\">\n                      <DialogHeader>\n                        <DialogTitle>Create New Webinar</DialogTitle>\n                        <DialogDescription>\n                          Add a new educational webinar to the platform\n                        </DialogDescription>\n                      </DialogHeader>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <Label>Title</Label>\n                          <Input \n                            placeholder=\"Webinar title\"\n                            value={newWebinarData.title}\n                            onChange={(e) => setNewWebinarData({...newWebinarData, title: e.target.value})}\n                          />\n                        </div>\n                        <div>\n                          <Label>Description</Label>\n                          <Textarea \n                            placeholder=\"Webinar description\"\n                            value={newWebinarData.description}\n                            onChange={(e) => setNewWebinarData({...newWebinarData, description: e.target.value})}\n                          />\n                        </div>\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <Label>Date</Label>\n                            <Input \n                              type=\"date\"\n                              value={newWebinarData.date}\n                              onChange={(e) => setNewWebinarData({...newWebinarData, date: e.target.value})}\n                            />\n                          </div>\n                          <div>\n                            <Label>Time</Label>\n                            <Input \n                              type=\"time\"\n                              value={newWebinarData.time}\n                              onChange={(e) => setNewWebinarData({...newWebinarData, time: e.target.value})}\n                            />\n                          </div>\n                        </div>\n                        <div>\n                          <Label>Speaker</Label>\n                          <Input \n                            placeholder=\"Speaker name\"\n                            value={newWebinarData.speaker}\n                            onChange={(e) => setNewWebinarData({...newWebinarData, speaker: e.target.value})}\n                          />\n                        </div>\n                        <div>\n                          <Label>Meeting Link</Label>\n                          <Input \n                            placeholder=\"https://zoom.us/...\"\n                            value={newWebinarData.meetingLink}\n                            onChange={(e) => setNewWebinarData({...newWebinarData, meetingLink: e.target.value})}\n                          />\n                        </div>\n                        <Button \n                          className=\"w-full\"\n                          onClick={async () => {\n                            try {\n                              const webinarData = {\n                                title: newWebinarData.title,\n                                description: newWebinarData.description,\n                                scheduledDate: `${newWebinarData.date} ${newWebinarData.time}`,\n                                speakerName: newWebinarData.speaker,\n                                meetingLink: newWebinarData.meetingLink,\n                                status: \"upcoming\"\n                              };\n                              \n                              const response = await fetch(\"/api/admin/webinars\", {\n                                method: \"POST\",\n                                headers: {\n                                  \"Content-Type\": \"application/json\",\n                                  ...getAuthHeaders(),\n                                },\n                                body: JSON.stringify(webinarData),\n                              });\n                              \n                              if (response.ok) {\n                                toast({ title: \"Webinar created successfully\" });\n                                refetchWebinars();\n                                refetchStats();\n                                setNewWebinarData({\n                                  title: \"\",\n                                  description: \"\",\n                                  date: \"\",\n                                  time: \"\",\n                                  speaker: \"\",\n                                  meetingLink: \"\"\n                                });\n                              } else {\n                                throw new Error(\"Failed to create webinar\");\n                              }\n                            } catch (error) {\n                              toast({\n                                title: \"Create failed\",\n                                description: error.message,\n                                variant: \"destructive\",\n                              });\n                            }\n                          }}\n                        >\n                          Create Webinar\n                        </Button>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {webinars?.slice(0, 5).map((webinar) => (\n                      <div key={webinar.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium\">{webinar.title}</h4>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {webinar.speakerName} • {new Date(webinar.scheduledDate).toLocaleDateString()}\n                          </p>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge variant={webinar.status === \"completed\" ? \"default\" : \"secondary\"}>\n                            {webinar.status}\n                          </Badge>\n                          <Button size=\"sm\" variant=\"outline\" data-testid={`button-view-webinar-${webinar.id}`}>\n                            <Eye className=\"w-3 h-3\" />\n                          </Button>\n                          <Dialog>\n                            <DialogTrigger asChild>\n                              <Button \n                                size=\"sm\" \n                                variant=\"outline\" \n                                onClick={() => setEditingWebinar(webinar)}\n                                data-testid={`button-edit-webinar-${webinar.id}`}\n                              >\n                                <Edit className=\"w-3 h-3\" />\n                              </Button>\n                            </DialogTrigger>\n                            <DialogContent className=\"sm:max-w-lg\">\n                              <DialogHeader>\n                                <DialogTitle>Edit Webinar</DialogTitle>\n                                <DialogDescription>\n                                  Update webinar information and settings\n                                </DialogDescription>\n                              </DialogHeader>\n                              {editingWebinar && (\n                                <div className=\"space-y-4\">\n                                  <div>\n                                    <Label>Title</Label>\n                                    <Input\n                                      value={editingWebinar.title || \"\"}\n                                      onChange={(e) => setEditingWebinar({...editingWebinar, title: e.target.value})}\n                                    />\n                                  </div>\n                                  <div>\n                                    <Label>Description</Label>\n                                    <Textarea\n                                      value={editingWebinar.description || \"\"}\n                                      onChange={(e) => setEditingWebinar({...editingWebinar, description: e.target.value})}\n                                    />\n                                  </div>\n                                  <div>\n                                    <Label>Status</Label>\n                                    <Select\n                                      value={editingWebinar.status}\n                                      onValueChange={(value) => setEditingWebinar({...editingWebinar, status: value})}\n                                    >\n                                      <SelectTrigger>\n                                        <SelectValue />\n                                      </SelectTrigger>\n                                      <SelectContent>\n                                        <SelectItem value=\"upcoming\">Upcoming</SelectItem>\n                                        <SelectItem value=\"completed\">Completed</SelectItem>\n                                        <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                                      </SelectContent>\n                                    </Select>\n                                  </div>\n                                  <div className=\"flex justify-between\">\n                                    <AlertDialog>\n                                      <AlertDialogTrigger asChild>\n                                        <Button variant=\"destructive\" size=\"sm\">\n                                          <Trash2 className=\"w-3 h-3 mr-1\" />\n                                          Delete\n                                        </Button>\n                                      </AlertDialogTrigger>\n                                      <AlertDialogContent>\n                                        <AlertDialogHeader>\n                                          <AlertDialogTitle>Delete Webinar</AlertDialogTitle>\n                                          <AlertDialogDescription>\n                                            Are you sure? This action cannot be undone.\n                                          </AlertDialogDescription>\n                                        </AlertDialogHeader>\n                                        <AlertDialogFooter>\n                                          <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                          <AlertDialogAction\n                                            onClick={async () => {\n                                              try {\n                                                await fetch(`/api/admin/webinars/${editingWebinar.id}`, {\n                                                  method: \"DELETE\",\n                                                  headers: getAuthHeaders(),\n                                                });\n                                                toast({ title: \"Webinar deleted successfully\" });\n                                                refetchWebinars();\n                                                setEditingWebinar(null);\n                                              } catch (error) {\n                                                toast({\n                                                  title: \"Delete failed\",\n                                                  description: error.message,\n                                                  variant: \"destructive\",\n                                                });\n                                              }\n                                            }}\n                                            className=\"bg-destructive text-destructive-foreground\"\n                                          >\n                                            Delete\n                                          </AlertDialogAction>\n                                        </AlertDialogFooter>\n                                      </AlertDialogContent>\n                                    </AlertDialog>\n                                    <Button\n                                      onClick={async () => {\n                                        try {\n                                          await fetch(`/api/admin/webinars/${editingWebinar.id}`, {\n                                            method: \"PUT\",\n                                            headers: {\n                                              \"Content-Type\": \"application/json\",\n                                              ...getAuthHeaders(),\n                                            },\n                                            body: JSON.stringify({\n                                              title: editingWebinar.title,\n                                              description: editingWebinar.description,\n                                              status: editingWebinar.status,\n                                            }),\n                                          });\n                                          toast({ title: \"Webinar updated successfully\" });\n                                          refetchWebinars();\n                                          setEditingWebinar(null);\n                                        } catch (error) {\n                                          toast({\n                                            title: \"Update failed\",\n                                            description: error.message,\n                                            variant: \"destructive\",\n                                          });\n                                        }\n                                      }}\n                                    >\n                                      Save Changes\n                                    </Button>\n                                  </div>\n                                </div>\n                              )}\n                            </DialogContent>\n                          </Dialog>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Contacts Management */}\n            <TabsContent value=\"contacts\" className=\"space-y-6\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between\">\n                  <div>\n                    <CardTitle>Contact Messages</CardTitle>\n                    <CardDescription>\n                      Review and respond to contact form submissions\n                    </CardDescription>\n                  </div>\n                  <Select value={contactFilter} onValueChange={setContactFilter}>\n                    <SelectTrigger className=\"w-32\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All</SelectItem>\n                      <SelectItem value=\"new\">New</SelectItem>\n                      <SelectItem value=\"read\">Read</SelectItem>\n                      <SelectItem value=\"responded\">Responded</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {filteredContacts.slice(0, 8).map((contact) => (\n                      <div key={contact.id} className=\"p-4 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-2 mb-2\">\n                              <h4 className=\"font-medium\">{contact.name}</h4>\n                              <Badge variant={contact.status === \"new\" ? \"destructive\" : \"default\"}>\n                                {contact.status}\n                              </Badge>\n                              {contact.status === \"new\" && (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => markContactReadMutation.mutate(contact.id)}\n                                  disabled={markContactReadMutation.isPending}\n                                >\n                                  <Eye className=\"w-3 h-3 mr-1\" />\n                                  Mark Read\n                                </Button>\n                              )}\n                            </div>\n                            <div className=\"flex items-center space-x-4 mb-2\">\n                              <div className=\"flex items-center\">\n                                <Mail className=\"w-3 h-3 mr-1 text-muted-foreground\" />\n                                <p className=\"text-sm text-muted-foreground\">{contact.email}</p>\n                              </div>\n                              {contact.phone && (\n                                <div className=\"flex items-center\">\n                                  <Phone className=\"w-3 h-3 mr-1 text-muted-foreground\" />\n                                  <p className=\"text-sm text-muted-foreground\">{contact.phone}</p>\n                                </div>\n                              )}\n                            </div>\n                            <p className=\"text-sm font-medium mb-2\">{contact.subject}</p>\n                            <p className=\"text-sm text-gray-600 line-clamp-3\">{contact.message}</p>\n                          </div>\n                          <div className=\"text-xs text-muted-foreground text-right\">\n                            <p>{new Date(contact.createdAt).toLocaleDateString()}</p>\n                            <p>{new Date(contact.createdAt).toLocaleTimeString()}</p>\n                          </div>\n                        </div>\n                        <div className=\"flex justify-end mt-3 space-x-2\">\n                          <Button size=\"sm\" variant=\"outline\">\n                            <Mail className=\"w-3 h-3 mr-1\" />\n                            Reply\n                          </Button>\n                          <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                              <Button size=\"sm\" variant=\"outline\">\n                                <Trash2 className=\"w-3 h-3\" />\n                              </Button>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent>\n                              <AlertDialogHeader>\n                                <AlertDialogTitle>Delete Contact</AlertDialogTitle>\n                                <AlertDialogDescription>\n                                  Are you sure you want to delete this contact message? This action cannot be undone.\n                                </AlertDialogDescription>\n                              </AlertDialogHeader>\n                              <AlertDialogFooter>\n                                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                <AlertDialogAction\n                                  onClick={async () => {\n                                    try {\n                                      await fetch(`/api/admin/contacts/${contact.id}`, {\n                                        method: \"DELETE\",\n                                        headers: getAuthHeaders(),\n                                      });\n                                      toast({ title: \"Contact deleted successfully\" });\n                                      refetchContacts();\n                                      refetchStats();\n                                    } catch (error) {\n                                      toast({\n                                        title: \"Delete failed\",\n                                        description: error.message,\n                                        variant: \"destructive\",\n                                      });\n                                    }\n                                  }}\n                                  className=\"bg-destructive text-destructive-foreground\"\n                                >\n                                  Delete\n                                </AlertDialogAction>\n                              </AlertDialogFooter>\n                            </AlertDialogContent>\n                          </AlertDialog>\n                        </div>\n                      </div>\n                    ))}\n                    {filteredContacts.length === 0 && (\n                      <div className=\"text-center py-8 text-muted-foreground\">\n                        {contactFilter === \"all\" ? \"No contact messages yet.\" : `No ${contactFilter} messages.`}\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Content Management */}\n            <TabsContent value=\"content\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Site Statistics</CardTitle>\n                    <CardDescription>Update homepage statistics display</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label>Network Partners</Label>\n                        <Input\n                          type=\"number\"\n                          value={statsFormData.network || 0}\n                          onChange={(e) => setStatsFormData({...statsFormData, network: parseInt(e.target.value) || 0})}\n                        />\n                      </div>\n                      <div>\n                        <Label>Countries</Label>\n                        <Input\n                          type=\"number\"\n                          value={statsFormData.countries || 0}\n                          onChange={(e) => setStatsFormData({...statsFormData, countries: parseInt(e.target.value) || 0})}\n                        />\n                      </div>\n                      <div>\n                        <Label>Webinars</Label>\n                        <Input\n                          type=\"number\"\n                          value={statsFormData.webinars || 0}\n                          onChange={(e) => setStatsFormData({...statsFormData, webinars: parseInt(e.target.value) || 0})}\n                        />\n                      </div>\n                      <div>\n                        <Label>Speakers</Label>\n                        <Input\n                          type=\"number\"\n                          value={statsFormData.speakers || 0}\n                          onChange={(e) => setStatsFormData({...statsFormData, speakers: parseInt(e.target.value) || 0})}\n                        />\n                      </div>\n                    </div>\n                    <div>\n                      <Label>Participants</Label>\n                      <Input\n                        type=\"number\"\n                        value={statsFormData.participants || 0}\n                        onChange={(e) => setStatsFormData({...statsFormData, participants: parseInt(e.target.value) || 0})}\n                      />\n                    </div>\n                    <Button\n                      onClick={() => updateStatsFormMutation.mutate(statsFormData)}\n                      disabled={updateStatsFormMutation.isPending}\n                      className=\"w-full\"\n                    >\n                      {updateStatsFormMutation.isPending ? \"Updating...\" : \"Update Statistics\"}\n                    </Button>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Content Overview</CardTitle>\n                    <CardDescription>Manage site content and pages</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between p-3 border rounded\">\n                        <span>Framework Elements</span>\n                        <Badge variant=\"outline\">10 Pages</Badge>\n                      </div>\n                      <div className=\"flex items-center justify-between p-3 border rounded\">\n                        <span>Active Webinars</span>\n                        <Badge variant=\"outline\">{stats?.activeWebinars || 0}</Badge>\n                      </div>\n                      <div className=\"flex items-center justify-between p-3 border rounded\">\n                        <span>Resource Downloads</span>\n                        <Badge variant=\"outline\">Available</Badge>\n                      </div>\n                    </div>\n                    <Button variant=\"outline\" className=\"w-full\">\n                      <Globe className=\"w-4 h-4 mr-2\" />\n                      Manage Content\n                    </Button>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            {/* News & Events Management */}\n            <TabsContent value=\"news-events\" className=\"space-y-6\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between\">\n                  <div>\n                    <CardTitle>News & Events Management</CardTitle>\n                    <CardDescription>Create and manage news articles and events</CardDescription>\n                  </div>\n                  <Dialog open={isCreateNewsEventOpen} onOpenChange={setIsCreateNewsEventOpen}>\n                    <DialogTrigger asChild>\n                      <Button data-testid=\"button-create-news-event\">\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Add News/Event\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                      <DialogHeader>\n                        <DialogTitle>Create News/Event</DialogTitle>\n                        <DialogDescription>Add new news article or event</DialogDescription>\n                      </DialogHeader>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <Label htmlFor=\"title\">Title</Label>\n                          <Input id=\"title\" placeholder=\"Enter title...\" data-testid=\"input-news-title\" />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"eventType\">Type</Label>\n                          <Select>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select type\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"news\">News</SelectItem>\n                              <SelectItem value=\"conference\">Conference</SelectItem>\n                              <SelectItem value=\"workshop\">Workshop</SelectItem>\n                              <SelectItem value=\"meeting\">Meeting</SelectItem>\n                              <SelectItem value=\"announcement\">Announcement</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        <div>\n                          <Label htmlFor=\"content\">Content</Label>\n                          <Textarea id=\"content\" rows={6} placeholder=\"Enter content...\" data-testid=\"textarea-news-content\" />\n                        </div>\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <Label htmlFor=\"eventDate\">Event Date</Label>\n                            <Input id=\"eventDate\" type=\"datetime-local\" data-testid=\"input-event-date\" />\n                          </div>\n                          <div>\n                            <Label htmlFor=\"location\">Location</Label>\n                            <Input id=\"location\" placeholder=\"Event location...\" data-testid=\"input-event-location\" />\n                          </div>\n                        </div>\n                        <Button data-testid=\"button-save-news-event\">\n                          Create News/Event\n                        </Button>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {newsEvents?.map((item) => (\n                      <div key={item.id} className=\"p-4 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-2 mb-2\">\n                              <h4 className=\"font-medium\">{item.title}</h4>\n                              <Badge variant=\"outline\">{item.eventType}</Badge>\n                              <Badge variant={item.status === \"published\" ? \"default\" : \"secondary\"}>\n                                {item.status}\n                              </Badge>\n                            </div>\n                            <p className=\"text-sm text-muted-foreground mb-2\">\n                              {item.excerpt || item.content?.substring(0, 150) + '...'}\n                            </p>\n                            {item.eventDate && (\n                              <p className=\"text-xs text-muted-foreground\">\n                                Event Date: {new Date(item.eventDate).toLocaleDateString()}\n                              </p>\n                            )}\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button size=\"sm\" variant=\"outline\" data-testid={`button-edit-news-${item.id}`}>\n                              <Edit className=\"w-3 h-3\" />\n                            </Button>\n                            <Button size=\"sm\" variant=\"outline\" data-testid={`button-delete-news-${item.id}`}>\n                              <Trash2 className=\"w-3 h-3\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Resources Management */}\n            <TabsContent value=\"resources\" className=\"space-y-6\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between\">\n                  <div>\n                    <CardTitle>Resources Management</CardTitle>\n                    <CardDescription>Manage documents, guides, and other resources</CardDescription>\n                  </div>\n                  <Dialog open={isCreateResourceOpen} onOpenChange={setIsCreateResourceOpen}>\n                    <DialogTrigger asChild>\n                      <Button data-testid=\"button-create-resource\">\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Add Resource\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                      <DialogHeader>\n                        <DialogTitle>Create Resource</DialogTitle>\n                        <DialogDescription>Add new resource or document</DialogDescription>\n                      </DialogHeader>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <Label htmlFor=\"resourceTitle\">Title</Label>\n                          <Input id=\"resourceTitle\" placeholder=\"Enter resource title...\" data-testid=\"input-resource-title\" />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"resourceType\">Type</Label>\n                          <Select>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select type\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"document\">Document</SelectItem>\n                              <SelectItem value=\"video\">Video</SelectItem>\n                              <SelectItem value=\"tool\">Tool</SelectItem>\n                              <SelectItem value=\"link\">Link</SelectItem>\n                              <SelectItem value=\"research\">Research</SelectItem>\n                              <SelectItem value=\"guide\">Guide</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        <div>\n                          <Label htmlFor=\"resourceDescription\">Description</Label>\n                          <Textarea id=\"resourceDescription\" rows={4} placeholder=\"Enter description...\" data-testid=\"textarea-resource-description\" />\n                        </div>\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <Label htmlFor=\"fileUrl\">File URL</Label>\n                            <Input id=\"fileUrl\" placeholder=\"https://...\" data-testid=\"input-resource-url\" />\n                          </div>\n                          <div>\n                            <Label htmlFor=\"category\">Category</Label>\n                            <Input id=\"category\" placeholder=\"Resource category...\" data-testid=\"input-resource-category\" />\n                          </div>\n                        </div>\n                        <Button data-testid=\"button-save-resource\">\n                          Create Resource\n                        </Button>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {resources?.map((resource) => (\n                      <div key={resource.id} className=\"p-4 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-2 mb-2\">\n                              <h4 className=\"font-medium\">{resource.title}</h4>\n                              <Badge variant=\"outline\">{resource.resourceType}</Badge>\n                              {resource.category && (\n                                <Badge variant=\"secondary\">{resource.category}</Badge>\n                              )}\n                            </div>\n                            <p className=\"text-sm text-muted-foreground mb-2\">\n                              {resource.description?.substring(0, 150) + '...'}\n                            </p>\n                            <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                              <span>Downloads: {resource.downloadCount || 0}</span>\n                              {resource.author && <span>By: {resource.author}</span>}\n                            </div>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button size=\"sm\" variant=\"outline\" data-testid={`button-edit-resource-${resource.id}`}>\n                              <Edit className=\"w-3 h-3\" />\n                            </Button>\n                            <Button size=\"sm\" variant=\"outline\" data-testid={`button-delete-resource-${resource.id}`}>\n                              <Trash2 className=\"w-3 h-3\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Webinar Resources Management */}\n            <TabsContent value=\"webinar-resources\" className=\"space-y-6\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between\">\n                  <div>\n                    <CardTitle>Webinar Presentations & Downloads</CardTitle>\n                    <CardDescription>Manage webinar presentations, slides, and downloadable materials</CardDescription>\n                  </div>\n                  <Dialog open={isCreateWebinarResourceOpen} onOpenChange={setIsCreateWebinarResourceOpen}>\n                    <DialogTrigger asChild>\n                      <Button data-testid=\"button-create-webinar-resource\">\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Add Webinar Resource\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                      <DialogHeader>\n                        <DialogTitle>Create Webinar Resource</DialogTitle>\n                        <DialogDescription>Add presentation or downloadable material for a webinar</DialogDescription>\n                      </DialogHeader>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <Label htmlFor=\"webinarSelect\">Webinar</Label>\n                          <Select>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select webinar\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {webinars?.map((webinar) => (\n                                <SelectItem key={webinar.id} value={webinar.id.toString()}>\n                                  {webinar.title}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        <div>\n                          <Label htmlFor=\"resourceTitle\">Resource Title</Label>\n                          <Input id=\"resourceTitle\" placeholder=\"Enter resource title...\" data-testid=\"input-webinar-resource-title\" />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"webinarResourceType\">Type</Label>\n                          <Select>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select type\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"presentation\">Presentation</SelectItem>\n                              <SelectItem value=\"download\">Download</SelectItem>\n                              <SelectItem value=\"link\">Link</SelectItem>\n                              <SelectItem value=\"video\">Video</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        <div>\n                          <Label htmlFor=\"webinarResourceUrl\">File URL</Label>\n                          <Input id=\"webinarResourceUrl\" placeholder=\"https://...\" data-testid=\"input-webinar-resource-url\" />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"webinarResourceDescription\">Description</Label>\n                          <Textarea id=\"webinarResourceDescription\" rows={3} placeholder=\"Enter description...\" data-testid=\"textarea-webinar-resource-description\" />\n                        </div>\n                        <Button data-testid=\"button-save-webinar-resource\">\n                          Create Webinar Resource\n                        </Button>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {webinarResources?.map((resource) => (\n                      <div key={resource.id} className=\"p-4 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-2 mb-2\">\n                              <h4 className=\"font-medium\">{resource.title}</h4>\n                              <Badge variant=\"outline\">{resource.resourceType}</Badge>\n                            </div>\n                            <p className=\"text-sm text-muted-foreground mb-2\">\n                              {resource.description}\n                            </p>\n                            <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                              <span>Downloads: {resource.downloadCount || 0}</span>\n                              <span>Webinar ID: {resource.webinarId}</span>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button size=\"sm\" variant=\"outline\" data-testid={`button-edit-webinar-resource-${resource.id}`}>\n                              <Edit className=\"w-3 h-3\" />\n                            </Button>\n                            <Button size=\"sm\" variant=\"outline\" data-testid={`button-delete-webinar-resource-${resource.id}`}>\n                              <Trash2 className=\"w-3 h-3\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Settings */}\n            <TabsContent value=\"settings\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Site Statistics</CardTitle>\n                    <CardDescription>Update site-wide statistics</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <Button className=\"w-full\" data-testid=\"button-update-stats\">\n                      <Settings className=\"w-4 h-4 mr-2\" />\n                      Update Statistics\n                    </Button>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Data Export</CardTitle>\n                    <CardDescription>Export data for backup or analysis</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-2\">\n                    <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-export-users\">\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Export Users\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-export-contacts\">\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Export Contacts\n                    </Button>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            {/* Legacy Data Integration Management */}\n            <TabsContent value=\"legacy\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-gradient-to-br from-green-500 to-emerald-600 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white font-bold text-lg\">🏛️</span>\n                    </div>\n                    <div>\n                      <CardTitle>Legacy Database Integration</CardTitle>\n                      <CardDescription>\n                        Management interface for imported legacy data from original africamechanize.org database\n                      </CardDescription>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {/* Migration Status Overview */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n                    <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h3 className=\"font-semibold text-green-800\">Migration Status</h3>\n                          <p className=\"text-2xl font-bold text-green-600 mt-1\">✅ Complete</p>\n                        </div>\n                        <div className=\"text-green-500\">\n                          <Activity className=\"w-8 h-8\" />\n                        </div>\n                      </div>\n                      <p className=\"text-sm text-green-700 mt-2\">\n                        Successfully imported 30,447 lines of legacy MySQL data\n                      </p>\n                    </div>\n\n                    <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h3 className=\"font-semibold text-blue-800\">Legacy Admins</h3>\n                          <p className=\"text-2xl font-bold text-blue-600 mt-1\">\n                            {legacyData?.legacyAccountsCount || 0}\n                          </p>\n                        </div>\n                        <div className=\"text-blue-500\">\n                          <Users className=\"w-8 h-8\" />\n                        </div>\n                      </div>\n                      <p className=\"text-sm text-blue-700 mt-2\">\n                        Original admin accounts preserved\n                      </p>\n                    </div>\n\n                    <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h3 className=\"font-semibold text-purple-800\">Data Tables</h3>\n                          <p className=\"text-2xl font-bold text-purple-600 mt-1\">12+</p>\n                        </div>\n                        <div className=\"text-purple-500\">\n                          <FileText className=\"w-8 h-8\" />\n                        </div>\n                      </div>\n                      <p className=\"text-sm text-purple-700 mt-2\">\n                        Legacy data tables migrated\n                      </p>\n                    </div>\n                  </div>\n\n                  {/* Legacy Admin Accounts */}\n                  <div className=\"space-y-6\">\n                    <div>\n                      <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n                        <Shield className=\"w-5 h-5 mr-2 text-primary\" />\n                        Legacy Admin Accounts\n                      </h3>\n                      \n                      {legacyData?.accounts && legacyData.accounts.length > 0 ? (\n                        <div className=\"grid gap-4\">\n                          {legacyData.accounts.map((account, index) => (\n                            <div key={account.username} className=\"border rounded-lg p-4 hover:bg-gray-50 dark:hover:bg-gray-800\">\n                              <div className=\"flex items-center justify-between\">\n                                <div className=\"flex items-center space-x-4\">\n                                  <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-secondary rounded-full flex items-center justify-center\">\n                                    <span className=\"text-white font-medium\">\n                                      {account.username?.charAt(0)?.toUpperCase() || 'A'}\n                                    </span>\n                                  </div>\n                                  <div>\n                                    <h4 className=\"font-medium\">{account.fullName || account.username}</h4>\n                                    <p className=\"text-sm text-muted-foreground\">{account.email}</p>\n                                    <div className=\"flex items-center space-x-2 mt-1\">\n                                      <Badge variant=\"outline\" className=\"text-xs\">\n                                        Legacy Admin\n                                      </Badge>\n                                      <Badge \n                                        variant={account.isActive ? \"default\" : \"secondary\"} \n                                        className=\"text-xs\"\n                                      >\n                                        {account.isActive ? \"Active\" : \"Inactive\"}\n                                      </Badge>\n                                    </div>\n                                  </div>\n                                </div>\n                                <div className=\"text-right text-sm text-muted-foreground\">\n                                  <p>Username: {account.username}</p>\n                                  <p className=\"text-xs\">Original admin from africamechanize.org</p>\n                                </div>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      ) : (\n                        <div className=\"text-center py-8 text-muted-foreground\">\n                          <Users className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                          <p>Loading legacy admin accounts...</p>\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Migration Actions */}\n                    <div className=\"border-t pt-6\">\n                      <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n                        <Settings className=\"w-5 h-5 mr-2 text-primary\" />\n                        Migration Management\n                      </h3>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <Card>\n                          <CardHeader className=\"pb-3\">\n                            <CardTitle className=\"text-base\">Migration Status</CardTitle>\n                            <CardDescription>Check current migration status and data integrity</CardDescription>\n                          </CardHeader>\n                          <CardContent>\n                            <Button \n                              variant=\"outline\" \n                              className=\"w-full\" \n                              onClick={() => refetchLegacyData()}\n                              data-testid=\"button-check-migration-status\"\n                            >\n                              <RefreshCw className=\"w-4 h-4 mr-2\" />\n                              Refresh Status\n                            </Button>\n                          </CardContent>\n                        </Card>\n\n                        <Card>\n                          <CardHeader className=\"pb-3\">\n                            <CardTitle className=\"text-base\">Legacy Documentation</CardTitle>\n                            <CardDescription>View technical documentation of the migration process</CardDescription>\n                          </CardHeader>\n                          <CardContent>\n                            <Button \n                              variant=\"outline\" \n                              className=\"w-full\"\n                              onClick={() => window.open('/LEGACY_INTEGRATION.md', '_blank')}\n                              data-testid=\"button-view-legacy-docs\"\n                            >\n                              <ExternalLink className=\"w-4 h-4 mr-2\" />\n                              View Documentation\n                            </Button>\n                          </CardContent>\n                        </Card>\n                      </div>\n\n                      {/* Migration Achievement Banner */}\n                      <div className=\"mt-6 bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200 rounded-lg p-6\">\n                        <div className=\"flex items-start space-x-4\">\n                          <div className=\"flex-shrink-0\">\n                            <div className=\"w-12 h-12 bg-green-500 rounded-full flex items-center justify-center\">\n                              <span className=\"text-white font-bold\">✅</span>\n                            </div>\n                          </div>\n                          <div className=\"flex-1\">\n                            <h4 className=\"text-lg font-semibold text-green-800 mb-2\">\n                              Migration Successfully Completed\n                            </h4>\n                            <p className=\"text-green-700 mb-4\">\n                              The complete database export from the original africamechanize.org website has been successfully \n                              integrated into this modern platform. All historical data, admin accounts, and content structure \n                              have been preserved while enabling enhanced functionality through the new system architecture.\n                            </p>\n                            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                              <div className=\"text-center\">\n                                <div className=\"font-bold text-green-800\">30,447</div>\n                                <div className=\"text-green-600\">Lines of Data</div>\n                              </div>\n                              <div className=\"text-center\">\n                                <div className=\"font-bold text-green-800\">3</div>\n                                <div className=\"text-green-600\">Legacy Admins</div>\n                              </div>\n                              <div className=\"text-center\">\n                                <div className=\"font-bold text-green-800\">12+</div>\n                                <div className=\"text-green-600\">Data Tables</div>\n                              </div>\n                              <div className=\"text-center\">\n                                <div className=\"font-bold text-green-800\">100%</div>\n                                <div className=\"text-green-600\">Data Integrity</div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n    </AdminGuard>\n  );\n}","size_bytes":83016},"client/src/pages/admin/AdminLogin.jsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Shield, Lock } from \"lucide-react\";\n\nconst adminLoginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport default function AdminLogin() {\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm({\n    resolver: zodResolver(adminLoginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials) => {\n      const response = await apiRequest(\"POST\", \"/api/admin/login\", credentials);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      localStorage.setItem(\"adminToken\", data.token);\n      toast({\n        title: \"Login successful\",\n        description: \"Welcome to the admin panel\",\n      });\n      window.location.href = \"/admin/dashboard\";\n    },\n    onError: (error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    },\n    onSettled: () => {\n      setIsLoading(false);\n    },\n  });\n\n  const onSubmit = (data) => {\n    setIsLoading(true);\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800\">\n      <div className=\"w-full max-w-md p-6\">\n        <Card className=\"shadow-xl border-0 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm\">\n          <CardHeader className=\"text-center space-y-4\">\n            <div className=\"mx-auto w-12 h-12 bg-gradient-to-br from-primary to-secondary rounded-lg flex items-center justify-center\">\n              <Shield className=\"w-6 h-6 text-white\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n              Admin Access\n            </CardTitle>\n            <CardDescription>\n              Enter your credentials to access the administration panel\n            </CardDescription>\n          </CardHeader>\n          \n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Username</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"text\"\n                          placeholder=\"Enter admin username\"\n                          disabled={isLoading}\n                          data-testid=\"input-admin-username\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"password\"\n                          placeholder=\"Enter admin password\"\n                          disabled={isLoading}\n                          data-testid=\"input-admin-password\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-gradient-to-r from-primary to-secondary hover:from-primary/90 hover:to-secondary/90\"\n                  disabled={isLoading}\n                  data-testid=\"button-admin-login\"\n                >\n                  <Lock className=\"w-4 h-4 mr-2\" />\n                  {isLoading ? \"Signing in...\" : \"Sign In\"}\n                </Button>\n              </form>\n            </Form>\n\n            <div className=\"mt-6 text-center\">\n              <Button\n                variant=\"link\"\n                className=\"text-sm text-muted-foreground\"\n                onClick={() => window.location.href = \"/admin/reset-password\"}\n                data-testid=\"link-admin-reset-password\"\n              >\n                Forgot your password?\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":5271},"client/src/pages/admin/AdminResetPassword.jsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Shield, ArrowLeft, Mail } from \"lucide-react\";\n\nconst resetPasswordSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n});\n\nexport default function AdminResetPassword() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [emailSent, setEmailSent] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm({\n    resolver: zodResolver(resetPasswordSchema),\n    defaultValues: {\n      email: \"\",\n    },\n  });\n\n  const resetMutation = useMutation({\n    mutationFn: async (data) => {\n      const response = await apiRequest(\"POST\", \"/api/admin/reset-password\", data);\n      return await response.json();\n    },\n    onSuccess: () => {\n      setEmailSent(true);\n      toast({\n        title: \"Reset email sent\",\n        description: \"Check your email for password reset instructions\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Reset failed\",\n        description: error.message || \"Unable to send reset email\",\n        variant: \"destructive\",\n      });\n    },\n    onSettled: () => {\n      setIsLoading(false);\n    },\n  });\n\n  const onSubmit = (data) => {\n    setIsLoading(true);\n    resetMutation.mutate(data);\n  };\n\n  if (emailSent) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800\">\n        <div className=\"w-full max-w-md p-6\">\n          <Card className=\"shadow-xl border-0 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm\">\n            <CardHeader className=\"text-center space-y-4\">\n              <div className=\"mx-auto w-12 h-12 bg-gradient-to-br from-green-500 to-green-600 rounded-lg flex items-center justify-center\">\n                <Mail className=\"w-6 h-6 text-white\" />\n              </div>\n              <CardTitle className=\"text-2xl font-bold text-green-600\">\n                Email Sent\n              </CardTitle>\n              <CardDescription>\n                We've sent password reset instructions to your email address. Please check your inbox and follow the link to reset your password.\n              </CardDescription>\n            </CardHeader>\n            \n            <CardContent>\n              <Button\n                onClick={() => window.location.href = \"/admin/login\"}\n                className=\"w-full\"\n                variant=\"outline\"\n                data-testid=\"button-back-to-login\"\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Login\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800\">\n      <div className=\"w-full max-w-md p-6\">\n        <Card className=\"shadow-xl border-0 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm\">\n          <CardHeader className=\"text-center space-y-4\">\n            <div className=\"mx-auto w-12 h-12 bg-gradient-to-br from-primary to-secondary rounded-lg flex items-center justify-center\">\n              <Shield className=\"w-6 h-6 text-white\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n              Reset Password\n            </CardTitle>\n            <CardDescription>\n              Enter your admin email address and we'll send you instructions to reset your password\n            </CardDescription>\n          </CardHeader>\n          \n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Admin Email</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"email\"\n                          placeholder=\"Enter your admin email\"\n                          disabled={isLoading}\n                          data-testid=\"input-admin-email\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-gradient-to-r from-primary to-secondary hover:from-primary/90 hover:to-secondary/90\"\n                  disabled={isLoading}\n                  data-testid=\"button-reset-password\"\n                >\n                  <Mail className=\"w-4 h-4 mr-2\" />\n                  {isLoading ? \"Sending...\" : \"Send Reset Instructions\"}\n                </Button>\n              </form>\n            </Form>\n\n            <div className=\"mt-6 text-center\">\n              <Button\n                variant=\"link\"\n                className=\"text-sm text-muted-foreground\"\n                onClick={() => window.location.href = \"/admin/login\"}\n                data-testid=\"link-back-to-login\"\n              >\n                <ArrowLeft className=\"w-3 h-3 mr-1\" />\n                Back to Login\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":6005},"server/routes/admin.js":{"content":"import express from \"express\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport crypto from \"crypto\";\nimport { storage } from \"../storage.js\";\nimport { sendEmail } from \"../emailService.js\";\n\nconst router = express.Router();\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-admin-jwt-secret-key\";\nconst JWT_EXPIRES = \"24h\";\n\n// Middleware to verify admin JWT token\nconst verifyAdminToken = async (req, res, next) => {\n  try {\n    const token = req.header(\"Authorization\")?.replace(\"Bearer \", \"\");\n    if (!token) {\n      return res.status(401).json({ error: \"No token provided\" });\n    }\n\n    const decoded = jwt.verify(token, JWT_SECRET);\n    const admin = await storage.getAdminUser(decoded.username);\n    \n    if (!admin || !admin.isActive) {\n      return res.status(401).json({ error: \"Invalid token\" });\n    }\n\n    req.admin = admin;\n    next();\n  } catch (error) {\n    res.status(401).json({ error: \"Invalid token\" });\n  }\n};\n\n// Admin login\nrouter.post(\"/login\", async (req, res) => {\n  try {\n    const { username, password } = req.body;\n\n    if (!username || !password) {\n      return res.status(400).json({ error: \"Username and password required\" });\n    }\n\n    const admin = await storage.getAdminUser(username);\n    if (!admin || !admin.isActive) {\n      return res.status(401).json({ error: \"Invalid credentials\" });\n    }\n\n    const isValidPassword = await bcrypt.compare(password, admin.passwordHash);\n    if (!isValidPassword) {\n      return res.status(401).json({ error: \"Invalid credentials\" });\n    }\n\n    // Update last login\n    await storage.updateAdminUser(admin.id, { lastLoginAt: new Date() });\n\n    const token = jwt.sign(\n      { id: admin.id, username: admin.username, role: admin.role },\n      JWT_SECRET,\n      { expiresIn: JWT_EXPIRES }\n    );\n\n    res.json({\n      token,\n      admin: {\n        id: admin.id,\n        username: admin.username,\n        fullName: admin.fullName,\n        email: admin.email,\n        role: admin.role,\n      },\n    });\n  } catch (error) {\n    console.error(\"Admin login error:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n});\n\n// Verify token\nrouter.get(\"/verify\", verifyAdminToken, (req, res) => {\n  res.json({\n    admin: {\n      id: req.admin.id,\n      username: req.admin.username,\n      fullName: req.admin.fullName,\n      email: req.admin.email,\n      role: req.admin.role,\n    },\n  });\n});\n\n// Password reset request\nrouter.post(\"/reset-password\", async (req, res) => {\n  try {\n    const { email } = req.body;\n\n    if (!email) {\n      return res.status(400).json({ error: \"Email required\" });\n    }\n\n    const admin = await storage.getAdminUserByEmail(email);\n    if (!admin) {\n      // Don't reveal if email exists or not\n      return res.json({ message: \"If email exists, reset instructions were sent\" });\n    }\n\n    const resetToken = crypto.randomBytes(32).toString(\"hex\");\n    const resetExpires = new Date(Date.now() + 3600000); // 1 hour\n\n    await storage.updateAdminUser(admin.id, {\n      resetPasswordToken: resetToken,\n      resetPasswordExpires: resetExpires,\n    });\n\n    const resetUrl = `${req.protocol}://${req.get(\"host\")}/admin/reset-password?token=${resetToken}`;\n    \n    await sendEmail({\n      to: email,\n      subject: \"AfricaMechanize Admin Password Reset\",\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2 style=\"color: #2f5233;\">Password Reset Request</h2>\n          <p>You requested a password reset for your AfricaMechanize admin account.</p>\n          <p>Click the link below to reset your password:</p>\n          <a href=\"${resetUrl}\" style=\"display: inline-block; padding: 12px 24px; background: #2f5233; color: white; text-decoration: none; border-radius: 5px; margin: 20px 0;\">\n            Reset Password\n          </a>\n          <p>This link will expire in 1 hour.</p>\n          <p>If you didn't request this reset, please ignore this email.</p>\n        </div>\n      `,\n    });\n\n    res.json({ message: \"If email exists, reset instructions were sent\" });\n  } catch (error) {\n    console.error(\"Password reset error:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n});\n\n// Get admin statistics\nrouter.get(\"/stats\", verifyAdminToken, async (req, res) => {\n  try {\n    const stats = await storage.getAdminStats();\n    res.json(stats);\n  } catch (error) {\n    console.error(\"Admin stats error:\", error);\n    res.status(500).json({ error: \"Failed to fetch statistics\" });\n  }\n});\n\n// Get users for admin management\nrouter.get(\"/users\", verifyAdminToken, async (req, res) => {\n  try {\n    const users = await storage.getAllUsers();\n    res.json(users);\n  } catch (error) {\n    console.error(\"Admin users error:\", error);\n    res.status(500).json({ error: \"Failed to fetch users\" });\n  }\n});\n\n// Get webinars for admin management\nrouter.get(\"/webinars\", verifyAdminToken, async (req, res) => {\n  try {\n    const webinars = await storage.getAllWebinars();\n    res.json(webinars);\n  } catch (error) {\n    console.error(\"Admin webinars error:\", error);\n    res.status(500).json({ error: \"Failed to fetch webinars\" });\n  }\n});\n\n// Get contacts for admin management\nrouter.get(\"/contacts\", verifyAdminToken, async (req, res) => {\n  try {\n    const contacts = await storage.getAllContacts();\n    res.json(contacts);\n  } catch (error) {\n    console.error(\"Admin contacts error:\", error);\n    res.status(500).json({ error: \"Failed to fetch contacts\" });\n  }\n});\n\n// Update user\nrouter.put(\"/users/:id\", verifyAdminToken, async (req, res) => {\n  try {\n    const userId = parseInt(req.params.id);\n    const userData = req.body;\n    const user = await storage.updateUser(userId, userData);\n    res.json(user);\n  } catch (error) {\n    console.error(\"Update user error:\", error);\n    res.status(500).json({ error: \"Failed to update user\" });\n  }\n});\n\n// Delete user\nrouter.delete(\"/users/:id\", verifyAdminToken, async (req, res) => {\n  try {\n    const userId = parseInt(req.params.id);\n    await storage.deleteUser(userId);\n    res.json({ message: \"User deleted successfully\" });\n  } catch (error) {\n    console.error(\"Delete user error:\", error);\n    res.status(500).json({ error: \"Failed to delete user\" });\n  }\n});\n\n// Update contact\nrouter.put(\"/contacts/:id\", verifyAdminToken, async (req, res) => {\n  try {\n    const contactId = parseInt(req.params.id);\n    const updateData = req.body;\n    const contact = await storage.updateContact(contactId, updateData);\n    res.json(contact);\n  } catch (error) {\n    console.error(\"Update contact error:\", error);\n    res.status(500).json({ error: \"Failed to update contact\" });\n  }\n});\n\n// Delete contact\nrouter.delete(\"/contacts/:id\", verifyAdminToken, async (req, res) => {\n  try {\n    const contactId = parseInt(req.params.id);\n    await storage.deleteContact(contactId);\n    res.json({ message: \"Contact deleted successfully\" });\n  } catch (error) {\n    console.error(\"Delete contact error:\", error);\n    res.status(500).json({ error: \"Failed to delete contact\" });\n  }\n});\n\n// Webinar management\nrouter.post(\"/webinars\", verifyAdminToken, async (req, res) => {\n  try {\n    const webinarData = req.body;\n    const webinar = await storage.createWebinar(webinarData);\n    res.json(webinar);\n  } catch (error) {\n    console.error(\"Create webinar error:\", error);\n    res.status(500).json({ error: \"Failed to create webinar\" });\n  }\n});\n\nrouter.put(\"/webinars/:id\", verifyAdminToken, async (req, res) => {\n  try {\n    const webinarId = parseInt(req.params.id);\n    const webinarData = req.body;\n    const webinar = await storage.updateWebinar(webinarId, webinarData);\n    res.json(webinar);\n  } catch (error) {\n    console.error(\"Update webinar error:\", error);\n    res.status(500).json({ error: \"Failed to update webinar\" });\n  }\n});\n\nrouter.delete(\"/webinars/:id\", verifyAdminToken, async (req, res) => {\n  try {\n    const webinarId = parseInt(req.params.id);\n    await storage.deleteWebinar(webinarId);\n    res.json({ message: \"Webinar deleted successfully\" });\n  } catch (error) {\n    console.error(\"Delete webinar error:\", error);\n    res.status(500).json({ error: \"Failed to delete webinar\" });\n  }\n});\n\n// Update site statistics\nrouter.post(\"/update-stats\", verifyAdminToken, async (req, res) => {\n  try {\n    const statsData = req.body;\n    const stats = await storage.updateStatistics(statsData);\n    res.json(stats);\n  } catch (error) {\n    console.error(\"Update stats error:\", error);\n    res.status(500).json({ error: \"Failed to update statistics\" });\n  }\n});\n\nexport default router;","size_bytes":8570},"SETUP.md":{"content":"# Africa Mechanize Web Application - Complete Setup & Functionality Guide\n\n## 🌍 Project Overview\n\nThe Africa Mechanize Web Application is a comprehensive, full-stack platform designed to promote sustainable agricultural mechanization across Africa. This professional-grade application replicates and enhances the functionality of the official africamechanize.org website with modern web technologies and advanced content management capabilities.\n\n## 🏗️ Technical Architecture\n\n### Frontend Stack\n- **Framework**: React 18 with JSX\n- **Build Tool**: Vite with hot reload\n- **Styling**: Tailwind CSS + shadcn/ui components\n- **Routing**: Wouter for client-side navigation\n- **State Management**: TanStack Query for server state\n- **Form Handling**: React Hook Form with Zod validation\n- **UI Components**: Extensive shadcn/ui library with Radix UI primitives\n\n### Backend Stack\n- **Framework**: Express.js with JavaScript\n- **Database**: PostgreSQL with Neon serverless hosting\n- **ORM**: Drizzle ORM with type safety\n- **Authentication**: Passport.js with session management\n- **Security**: JWT tokens, bcrypt hashing, secure sessions\n- **API**: RESTful endpoints with proper error handling\n\n### Database Schema\n- **Users**: Complete authentication with profiles and preferences\n- **Framework Elements**: F-SAMA framework (10 sustainable mechanization elements)\n- **Webinars**: Full webinar lifecycle management with recordings\n- **News & Events**: Content management for announcements, conferences, workshops\n- **Resources**: Document management with categorization and download tracking\n- **Contacts**: Contact form submissions and management\n- **Statistics**: Application analytics and metrics\n\n## 🚀 Getting Started\n\n### Prerequisites\n- Node.js 18+ \n- PostgreSQL database (Neon serverless configured)\n- Environment variables configured in `.env`\n\n### Installation & Setup\n```bash\n# Install dependencies\nnpm install\n\n# Set up database schema\nnpm run db:push\n\n# Start development server\nnpm run dev\n```\n\n### Legacy Database Integration\nThe platform includes a complete integration of the original africamechanize.org database:\n- **Legacy Admin Access**: Original admin accounts (ragesInc, act-admin, masterchief) have been imported\n- **Historical Data**: All original content, navigation, and configuration data preserved\n- **Migration Status**: Check `/api/migration/status` for integration details\n- **Multilingual Support**: Original English/French content structure maintained\n\n### Environment Configuration\nRequired environment variables:\n- `DATABASE_URL`: PostgreSQL connection string\n- `SESSION_SECRET`: Session encryption key\n- `NODE_ENV`: development/production\n- `PGHOST`, `PGUSER`, `PGPASSWORD`, `PGPORT`, `PGDATABASE`: Database connection details\n\n## 🌟 Core Features & Functionality\n\n### 1. F-SAMA Framework Implementation\n**10 Comprehensive Framework Elements:**\n- Farm Power & Mechanization\n- Innovative Financing Solutions\n- Sustainable Agricultural Systems\n- Sustainable Mechanization Practices\n- Social Sustainability & Inclusion\n- Human Resources Development\n- Market Access & Value Chains\n- Research & Development\n- Policy & Institutional Support\n- Environmental Sustainability\n\nEach element includes:\n- Detailed content pages with professional layouts\n- Interactive navigation with breadcrumbs\n- Related webinar connections\n- Resource downloads and materials\n- Multi-language support (English/French)\n\n### 2. Advanced Webinar Management System\n**Public Features:**\n- Comprehensive webinar catalog with search and filtering\n- Detailed webinar pages with speaker information\n- Resource downloads and presentation materials\n- Registration system for upcoming webinars\n- Calendar integration and event reminders\n\n**Admin Features:**\n- Full CRUD operations for webinar management\n- Speaker profile management\n- Resource file uploads and organization\n- Attendance tracking and analytics\n- Recording management with access control\n\n### 3. News & Events Management\n**Content Types:**\n- News articles and announcements\n- Conference and workshop listings\n- Meeting schedules and minutes\n- Industry updates and reports\n- Multi-media content support\n\n**Management Features:**\n- Rich content editor with formatting\n- Publication scheduling and status management\n- Category and tag organization\n- SEO optimization with meta descriptions\n- Social media integration\n\n### 4. Resource Library & Downloads\n**Resource Categories:**\n- Technical documents and guides\n- Research papers and studies\n- Training materials and curricula\n- Policy documents and frameworks\n- Video tutorials and presentations\n- Tools and calculators\n\n**Advanced Features:**\n- Advanced search with filters\n- Download tracking and analytics\n- User access control and permissions\n- Version control and updates\n- Multi-format support (PDF, DOC, XLS, etc.)\n\n### 5. User Authentication & Profiles\n**Public Registration:**\n- Email verification system\n- Profile management with preferences\n- Password reset functionality\n- Social login integration ready\n\n**Admin System:**\n- Secure admin dashboard access\n- Role-based permissions\n- User management and moderation\n- Activity monitoring and logs\n\n### 6. Contact & Newsletter System\n**Contact Management:**\n- Contact form with validation\n- Inquiry categorization and routing\n- Response tracking and follow-up\n- Contact database management\n\n**Newsletter System:**\n- Email subscription management\n- Newsletter creation and distribution\n- Subscriber analytics and reporting\n- Automated email campaigns\n\n### 7. Multi-language Support\n**Internationalization:**\n- English and French language support\n- Content management in multiple languages\n- Language-specific navigation\n- Cultural adaptation for African contexts\n\n## 🛡️ Admin Dashboard Features\n\n### Comprehensive Management Interface\nThe admin dashboard provides complete control over all aspects of the website:\n\n#### 1. Dashboard Overview\n- Real-time statistics and analytics\n- User engagement metrics\n- Content performance monitoring\n- System health indicators\n- Quick action buttons for common tasks\n\n#### 2. User Management\n- Complete user database with search and filtering\n- User profile editing and management\n- Account activation and deactivation\n- Role assignment and permissions\n- User activity monitoring\n\n#### 3. Webinar Administration\n- Webinar creation and scheduling\n- Speaker management and profiles\n- Resource file uploads and organization\n- Registration and attendance tracking\n- Recording access control\n\n#### 4. Content Management System\n**News & Events:**\n- Full CRUD operations for articles and events\n- Rich text editor with media support\n- Publication scheduling and workflow\n- Category and tag management\n- SEO optimization tools\n\n**Resources Management:**\n- Document upload and organization\n- Category and subcategory management\n- Access control and permissions\n- Download tracking and analytics\n- Version control and updates\n\n**Webinar Presentations:**\n- Presentation file management\n- Download access control\n- Resource categorization\n- Speaker material organization\n- Usage analytics and reporting\n\n#### 5. Contact & Communication\n- Contact form submission management\n- Response tracking and follow-up\n- Email template management\n- Newsletter subscriber management\n- Communication analytics\n\n#### 6. Site Configuration\n- Homepage statistics management\n- Navigation menu configuration\n- SEO settings and optimization\n- Social media integration\n- Performance monitoring\n\n## 🔧 Technical Implementation\n\n### Security Features\n- JWT-based authentication with secure tokens\n- Password hashing with bcrypt\n- Session management with PostgreSQL storage\n- CSRF protection and request validation\n- Rate limiting and DDoS protection\n- Secure file upload handling\n\n### Performance Optimization\n- Server-side rendering optimization\n- Database query optimization with indexing\n- CDN integration for static assets\n- Image optimization and lazy loading\n- Caching strategies for improved performance\n- Progressive web app capabilities\n\n### API Architecture\n**RESTful Endpoints:**\n- `/api/auth/*` - Authentication and user management\n- `/api/webinars/*` - Webinar operations\n- `/api/resources/*` - Resource management\n- `/api/news/*` - News and events\n- `/api/contacts/*` - Contact management\n- `/api/admin/*` - Administrative operations\n\n### Database Design\n**Optimized Schema:**\n- Proper indexing for search performance\n- Foreign key relationships and data integrity\n- Audit trails for content changes\n- Soft deletes for data recovery\n- Full-text search capabilities\n- Analytics and reporting tables\n\n## 🌐 Deployment & Production\n\n### Development Environment\n- Hot reload with Vite development server\n- Real-time database synchronization\n- Error handling and logging\n- Debug tools and monitoring\n\n### Production Deployment\n- Optimized build process with Vite\n- Static asset optimization\n- Environment-specific configurations\n- Database migration management\n- Monitoring and logging systems\n\n### Scaling Considerations\n- Horizontal scaling with load balancers\n- Database connection pooling\n- CDN integration for global reach\n- Caching strategies for performance\n- Microservices architecture readiness\n\n## 🔄 Content Workflow\n\n### Content Creation Process\n1. **Planning**: Content strategy and calendar planning\n2. **Creation**: Rich content creation with media support\n3. **Review**: Editorial review and approval workflow\n4. **Publication**: Scheduled publishing with SEO optimization\n5. **Analytics**: Performance monitoring and optimization\n\n### User Engagement Flow\n1. **Discovery**: Search and navigation systems\n2. **Engagement**: Interactive content and downloads\n3. **Registration**: Account creation and profile management\n4. **Participation**: Webinar attendance and resource access\n5. **Community**: Newsletter subscription and updates\n\n## 📊 Analytics & Reporting\n\n### User Analytics\n- User registration and engagement metrics\n- Content consumption patterns\n- Download tracking and popular resources\n- Webinar attendance and feedback\n- Geographic distribution of users\n\n### Content Performance\n- Page views and engagement time\n- Resource download statistics\n- Search query analysis\n- Content effectiveness metrics\n- SEO performance tracking\n\n### Administrative Insights\n- System usage patterns\n- User management efficiency\n- Content workflow optimization\n- Performance bottleneck identification\n- Growth trend analysis\n\n## 🎯 Future Enhancements\n\n### Planned Features\n- Advanced search with AI-powered recommendations\n- Mobile application development\n- Integration with external agricultural databases\n- Advanced analytics dashboard with visualizations\n- Community forums and discussion boards\n- E-learning platform integration\n\n### Technical Improvements\n- Microservices architecture migration\n- GraphQL API implementation\n- Real-time collaboration features\n- Advanced caching mechanisms\n- Enhanced security measures\n\nThis comprehensive platform serves as the digital hub for sustainable agricultural mechanization in Africa, providing tools, resources, and community for stakeholders across the continent.","size_bytes":11124}}}